
Titanic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08006ce8  08006ce8  00016ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080070e8  080070e8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e8  080070e8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080070f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000094  08007184  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08007184  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ef  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ff  00000000  00000000  0002f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000315b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001935a  00000000  00000000  00032f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc0c  00000000  00000000  0004c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca2d  00000000  00000000  00059e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e689b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  000e68f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ccc 	.word	0x08006ccc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	08006ccc 	.word	0x08006ccc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2uiz>:
 8000fd4:	0042      	lsls	r2, r0, #1
 8000fd6:	d20e      	bcs.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30b      	bcc.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d409      	bmi.n	8000ffc <__aeabi_f2uiz+0x28>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4770      	bx	lr
 8000ffc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001000:	d101      	bne.n	8001006 <__aeabi_f2uiz+0x32>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	d102      	bne.n	800100c <__aeabi_f2uiz+0x38>
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setupBLE>:
void sendInstruction (AtInstruction_t instruction, char* parameter);
char** str_split (char* a_str, const char a_delim);
int getSubstring (char *source, char *target,int from, int to);
void sendToLogger (char *msg);

void setupBLE(UART_HandleTypeDef *huartInterface, UART_HandleTypeDef *loggingInterface) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	huart = huartInterface;
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <setupBLE+0x28>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6013      	str	r3, [r2, #0]
	loggingHuart = loggingInterface;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <setupBLE+0x2c>)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6013      	str	r3, [r2, #0]
	sendInstruction(SET_PERMISSIONS, "11111");
 800102a:	4906      	ldr	r1, [pc, #24]	; (8001044 <setupBLE+0x30>)
 800102c:	2007      	movs	r0, #7
 800102e:	f000 f80b 	bl	8001048 <sendInstruction>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000128 	.word	0x20000128
 8001040:	2000012c 	.word	0x2000012c
 8001044:	08006d2c 	.word	0x08006d2c

08001048 <sendInstruction>:

void sendInstruction (AtInstruction_t instruction, char* parameter) {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
	char *instructionPrefix = atInstructions[instruction];
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <sendInstruction+0x5c>)
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	60fb      	str	r3, [r7, #12]
	char *completeInstruction = (char*) malloc(30 * sizeof(char));
 800105e:	201e      	movs	r0, #30
 8001060:	f003 fb64 	bl	800472c <malloc>
 8001064:	4603      	mov	r3, r0
 8001066:	60bb      	str	r3, [r7, #8]
	sprintf(completeInstruction, "%s%s\r\n", instructionPrefix, parameter);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	490e      	ldr	r1, [pc, #56]	; (80010a8 <sendInstruction+0x60>)
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f003 ff8e 	bl	8004f90 <siprintf>
	sendToLogger(completeInstruction);
 8001074:	68b8      	ldr	r0, [r7, #8]
 8001076:	f000 f9f7 	bl	8001468 <sendToLogger>
	HAL_UART_Transmit(huart, (uint8_t *) completeInstruction, strlen(completeInstruction), HAL_MAX_DELAY);
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <sendInstruction+0x64>)
 800107c:	681c      	ldr	r4, [r3, #0]
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff f866 	bl	8000150 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	4620      	mov	r0, r4
 8001090:	f003 f970 	bl	8004374 <HAL_UART_Transmit>
	free(completeInstruction);
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f003 fb51 	bl	800473c <free>
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000000 	.word	0x20000000
 80010a8:	08006d34 	.word	0x08006d34
 80010ac:	20000128 	.word	0x20000128

080010b0 <masterScanForSlaves>:
	char powerString[5];
	gcvt(power, 2, powerString);
	sendInstruction(SET_TRANSMITTING_POWER, powerString);
}

ListDevices_t masterScanForSlaves () {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	char inputBuffer[1];
	char *allText = (char *) malloc(1000 * sizeof(char));
 80010b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010bc:	f003 fb36 	bl	800472c <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Send the scan request
	sendToLogger("About to inquire \r\n");
 80010c4:	4871      	ldr	r0, [pc, #452]	; (800128c <masterScanForSlaves+0x1dc>)
 80010c6:	f000 f9cf 	bl	8001468 <sendToLogger>
	sendInstruction(MASTER_SCAN_FOR_SLAVES, "");
 80010ca:	4971      	ldr	r1, [pc, #452]	; (8001290 <masterScanForSlaves+0x1e0>)
 80010cc:	2005      	movs	r0, #5
 80010ce:	f7ff ffbb 	bl	8001048 <sendInstruction>
	sendToLogger("Inquired \r\n");
 80010d2:	4870      	ldr	r0, [pc, #448]	; (8001294 <masterScanForSlaves+0x1e4>)
 80010d4:	f000 f9c8 	bl	8001468 <sendToLogger>
	// Receive the scan answer
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 80010d8:	e00e      	b.n	80010f8 <masterScanForSlaves+0x48>
		HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 1, HAL_MAX_DELAY);
 80010da:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <masterScanForSlaves+0x1e8>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f107 0110 	add.w	r1, r7, #16
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	2201      	movs	r2, #1
 80010e8:	f003 f9d6 	bl	8004498 <HAL_UART_Receive>
		strcat(allText, inputBuffer);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f4:	f003 ff6c 	bl	8004fd0 <strcat>
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 80010f8:	4968      	ldr	r1, [pc, #416]	; (800129c <masterScanForSlaves+0x1ec>)
 80010fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010fc:	f003 ffa7 	bl	800504e <strstr>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0e9      	beq.n	80010da <masterScanForSlaves+0x2a>
	}
	sendToLogger("Received \r\n");
 8001106:	4866      	ldr	r0, [pc, #408]	; (80012a0 <masterScanForSlaves+0x1f0>)
 8001108:	f000 f9ae 	bl	8001468 <sendToLogger>
	sendToLogger(allText);
 800110c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800110e:	f000 f9ab 	bl	8001468 <sendToLogger>
	sendToLogger("\r\nRetransmitted \r\n");
 8001112:	4864      	ldr	r0, [pc, #400]	; (80012a4 <masterScanForSlaves+0x1f4>)
 8001114:	f000 f9a8 	bl	8001468 <sendToLogger>
	// Break the scan into lines:
	char** lines = str_split(allText, '\n');
 8001118:	210a      	movs	r1, #10
 800111a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111c:	f000 f8c6 	bl	80012ac <str_split>
 8001120:	62b8      	str	r0, [r7, #40]	; 0x28

	// Breaking the lines into tokens and creating the struct
	size_t nbOfEntries = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
	while (*(lines + nbOfEntries) != 0) nbOfEntries++;
 8001126:	e002      	b.n	800112e <masterScanForSlaves+0x7e>
 8001128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112a:	3301      	adds	r3, #1
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001134:	4413      	add	r3, r2
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f5      	bne.n	8001128 <masterScanForSlaves+0x78>
	nbOfEntries--;
 800113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113e:	3b01      	subs	r3, #1
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
	Device_t *entries = (Device_t *) malloc(nbOfEntries * sizeof(Device_t));
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f003 faf0 	bl	800472c <malloc>
 800114c:	4603      	mov	r3, r0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < nbOfEntries; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
 8001154:	e081      	b.n	800125a <masterScanForSlaves+0x1aa>
		// Removing leading trash characters
		char *line = lines[i];
 8001156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	623b      	str	r3, [r7, #32]
		char *e = strrchr(line, '+');
 8001162:	212b      	movs	r1, #43	; 0x2b
 8001164:	6a38      	ldr	r0, [r7, #32]
 8001166:	f003 ff5e 	bl	8005026 <strrchr>
 800116a:	61f8      	str	r0, [r7, #28]
		int lastPlusIndex =  (int)(e - line);
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	61bb      	str	r3, [r7, #24]
		getSubstring(line, line, lastPlusIndex, strlen(line));
 8001174:	6a38      	ldr	r0, [r7, #32]
 8001176:	f7fe ffeb 	bl	8000150 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	6a39      	ldr	r1, [r7, #32]
 8001180:	6a38      	ldr	r0, [r7, #32]
 8001182:	f000 f91d 	bl	80013c0 <getSubstring>
		char **tokens = str_split(line, ',');
 8001186:	212c      	movs	r1, #44	; 0x2c
 8001188:	6a38      	ldr	r0, [r7, #32]
 800118a:	f000 f88f 	bl	80012ac <str_split>
 800118e:	6178      	str	r0, [r7, #20]
		// Checking if all the needed info is available.
		if (*(tokens + 2) != 0) {
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3308      	adds	r3, #8
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d043      	beq.n	8001222 <masterScanForSlaves+0x172>
			getSubstring(tokens[0], tokens[0], 7, strlen(tokens[0]));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	681c      	ldr	r4, [r3, #0]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	681d      	ldr	r5, [r3, #0]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7fe ffd2 	bl	8000150 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2207      	movs	r2, #7
 80011b0:	4629      	mov	r1, r5
 80011b2:	4620      	mov	r0, r4
 80011b4:	f000 f904 	bl	80013c0 <getSubstring>
			getSubstring(tokens[2], tokens[2], 0, strlen(tokens[2])-2);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3308      	adds	r3, #8
 80011bc:	681c      	ldr	r4, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3308      	adds	r3, #8
 80011c2:	681d      	ldr	r5, [r3, #0]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3308      	adds	r3, #8
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7fe ffc0 	bl	8000150 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	3b02      	subs	r3, #2
 80011d4:	2200      	movs	r2, #0
 80011d6:	4629      	mov	r1, r5
 80011d8:	4620      	mov	r0, r4
 80011da:	f000 f8f1 	bl	80013c0 <getSubstring>

			entries[i].index = i+1;
 80011de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	4413      	add	r3, r2
 80011e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e8:	3201      	adds	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
			entries[i].mac = tokens[0];
 80011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f2:	4413      	add	r3, r2
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	605a      	str	r2, [r3, #4]
			entries[i].signalStrength = atoi(tokens[1]);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3304      	adds	r3, #4
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001206:	18d4      	adds	r4, r2, r3
 8001208:	4608      	mov	r0, r1
 800120a:	f003 fa4f 	bl	80046ac <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	60a3      	str	r3, [r4, #8]
			entries[i].name = tokens[2];
 8001212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001218:	4413      	add	r3, r2
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	6892      	ldr	r2, [r2, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	e018      	b.n	8001254 <masterScanForSlaves+0x1a4>
		} else {
			entries[i].index = -1;
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001228:	4413      	add	r3, r2
 800122a:	f04f 32ff 	mov.w	r2, #4294967295
 800122e:	601a      	str	r2, [r3, #0]
			entries[i].mac = "INVALID";
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001236:	4413      	add	r3, r2
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <masterScanForSlaves+0x1f8>)
 800123a:	605a      	str	r2, [r3, #4]
			entries[i].signalStrength = 1;
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001242:	4413      	add	r3, r2
 8001244:	2201      	movs	r2, #1
 8001246:	609a      	str	r2, [r3, #8]
			entries[i].name = "INVALID";
 8001248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124e:	4413      	add	r3, r2
 8001250:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <masterScanForSlaves+0x1f8>)
 8001252:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < nbOfEntries; i++) {
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	3301      	adds	r3, #1
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125e:	429a      	cmp	r2, r3
 8001260:	f63f af79 	bhi.w	8001156 <masterScanForSlaves+0xa6>
		}
	}
	free(allText);
 8001264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001266:	f003 fa69 	bl	800473c <free>
//	return entries;
	ListDevices_t answer = {nbOfEntries, entries};
 800126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	60fb      	str	r3, [r7, #12]
	return answer;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	461a      	mov	r2, r3
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800127e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	3738      	adds	r7, #56	; 0x38
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	bf00      	nop
 800128c:	08006d3c 	.word	0x08006d3c
 8001290:	08006d50 	.word	0x08006d50
 8001294:	08006d54 	.word	0x08006d54
 8001298:	20000128 	.word	0x20000128
 800129c:	08006d60 	.word	0x08006d60
 80012a0:	08006d6c 	.word	0x08006d6c
 80012a4:	08006d78 	.word	0x08006d78
 80012a8:	08006d8c 	.word	0x08006d8c

080012ac <str_split>:
void connectMasterToSlaveFromMACAddress (char *mac) {
	sendInstruction(MASTER_CONNECT_SLAVE, mac);
}

char** str_split(char* a_str, const char a_delim)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 80012d0:	e00c      	b.n	80012ec <str_split+0x40>
    {
        if (a_delim == *tmp)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d104      	bne.n	80012e6 <str_split+0x3a>
        {
            count++;
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	3301      	adds	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	3301      	adds	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
    while (*tmp)
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ee      	bne.n	80012d2 <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7fe ff2b 	bl	8000150 <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	3b01      	subs	r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	429a      	cmp	r2, r3
 8001306:	bf34      	ite	cc
 8001308:	2301      	movcc	r3, #1
 800130a:	2300      	movcs	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	4413      	add	r3, r2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fa03 	bl	800472c <malloc>
 8001326:	4603      	mov	r3, r0
 8001328:	613b      	str	r3, [r7, #16]

    if (result)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d039      	beq.n	80013a4 <str_split+0xf8>
    {
        size_t idx  = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f003 fe9e 	bl	800507c <strtok>
 8001340:	6178      	str	r0, [r7, #20]

        while (token)
 8001342:	e01b      	b.n	800137c <str_split+0xd0>
        {
            assert(idx < count);
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	429a      	cmp	r2, r3
 800134a:	d305      	bcc.n	8001358 <str_split+0xac>
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <str_split+0x104>)
 800134e:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <str_split+0x108>)
 8001350:	21bf      	movs	r1, #191	; 0xbf
 8001352:	4819      	ldr	r0, [pc, #100]	; (80013b8 <str_split+0x10c>)
 8001354:	f003 f98c 	bl	8004670 <__assert_func>
            *(result + idx++) = strdup(token);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	61ba      	str	r2, [r7, #24]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	18d4      	adds	r4, r2, r3
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f003 fe43 	bl	8004ff0 <strdup>
 800136a:	4603      	mov	r3, r0
 800136c:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	2000      	movs	r0, #0
 8001376:	f003 fe81 	bl	800507c <strtok>
 800137a:	6178      	str	r0, [r7, #20]
        while (token)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1e0      	bne.n	8001344 <str_split+0x98>
        }
        assert(idx == count - 1);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3b01      	subs	r3, #1
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	429a      	cmp	r2, r3
 800138a:	d005      	beq.n	8001398 <str_split+0xec>
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <str_split+0x110>)
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <str_split+0x108>)
 8001390:	21c3      	movs	r1, #195	; 0xc3
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <str_split+0x10c>)
 8001394:	f003 f96c 	bl	8004670 <__assert_func>
        *(result + idx) = 0;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4413      	add	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    }

    return result;
 80013a4:	693b      	ldr	r3, [r7, #16]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	372c      	adds	r7, #44	; 0x2c
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08006d94 	.word	0x08006d94
 80013b4:	08006e24 	.word	0x08006e24
 80013b8:	08006da0 	.word	0x08006da0
 80013bc:	08006dc8 	.word	0x08006dc8

080013c0 <getSubstring>:

int  getSubstring(char *source, char *target,int from, int to)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
	int length=0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
	int i=0,j=0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]

	//get length
	while(source[i++]!='\0')
 80013da:	e002      	b.n	80013e2 <getSubstring+0x22>
		length++;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
	while(source[i++]!='\0')
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	61ba      	str	r2, [r7, #24]
 80013e8:	461a      	mov	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f3      	bne.n	80013dc <getSubstring+0x1c>

	if(from<0 || from>length){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db03      	blt.n	8001402 <getSubstring+0x42>
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dd04      	ble.n	800140c <getSubstring+0x4c>
		printf("Invalid \'from\' index\n");
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <getSubstring+0xa0>)
 8001404:	f003 fdac 	bl	8004f60 <puts>
		return 1;
 8001408:	2301      	movs	r3, #1
 800140a:	e025      	b.n	8001458 <getSubstring+0x98>
	}
	if(to>length){
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	dd04      	ble.n	800141e <getSubstring+0x5e>
		printf("Invalid \'to\' index\n");
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <getSubstring+0xa4>)
 8001416:	f003 fda3 	bl	8004f60 <puts>
		return 1;
 800141a:	2301      	movs	r3, #1
 800141c:	e01c      	b.n	8001458 <getSubstring+0x98>
	}

	for(i=from,j=0;i<=to;i++,j++){
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e00d      	b.n	8001444 <getSubstring+0x84>
		target[j]=source[i];
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	441a      	add	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	440b      	add	r3, r1
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	701a      	strb	r2, [r3, #0]
	for(i=from,j=0;i<=to;i++,j++){
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	3301      	adds	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	dded      	ble.n	8001428 <getSubstring+0x68>
	}

	//assign NULL at the end of string
	target[j]='\0';
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]

	return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	08006ddc 	.word	0x08006ddc
 8001464:	08006df4 	.word	0x08006df4

08001468 <sendToLogger>:

void sendToLogger (char *msg) {
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(loggingHuart, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <sendToLogger+0x2c>)
 8001472:	681c      	ldr	r4, [r3, #0]
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7fe fe6b 	bl	8000150 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4620      	mov	r0, r4
 8001486:	f002 ff75 	bl	8004374 <HAL_UART_Transmit>
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	2000012c 	.word	0x2000012c

08001498 <setupMotor>:
#include "main.h"
#include "DCMotor.h"

TIM_OC_InitTypeDef sConfigOC_DC_Motor = {0};

void setupMotor(TIM_HandleTypeDef *htimx){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htimx, TIM_CHANNEL_3);
 80014a0:	2108      	movs	r1, #8
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f002 f9dc 	bl	8003860 <HAL_TIM_PWM_Start>
	setMotorDirection(Forward);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f845 	bl	8001538 <setMotorDirection>
	setMotorSpeed(htimx,TIM_CHANNEL_3,1250,0);
 80014ae:	2300      	movs	r3, #0
 80014b0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80014b4:	2108      	movs	r1, #8
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f804 	bl	80014c4 <setMotorSpeed>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <setMotorSpeed>:

void setMotorSpeed(TIM_HandleTypeDef *htimx, uint32_t channel, uint16_t period, uint16_t speed){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80bb      	strh	r3, [r7, #4]

	sConfigOC_DC_Motor.Pulse = (speed*period)/100;
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	88fa      	ldrh	r2, [r7, #6]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <setMotorSpeed+0x6c>)
 80014e4:	fb82 1203 	smull	r1, r2, r2, r3
 80014e8:	1152      	asrs	r2, r2, #5
 80014ea:	17db      	asrs	r3, r3, #31
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <setMotorSpeed+0x70>)
 80014f2:	605a      	str	r2, [r3, #4]
	sConfigOC_DC_Motor.OCMode = TIM_OCMODE_PWM1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <setMotorSpeed+0x70>)
 80014f6:	2260      	movs	r2, #96	; 0x60
 80014f8:	601a      	str	r2, [r3, #0]
	sConfigOC_DC_Motor.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <setMotorSpeed+0x70>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	sConfigOC_DC_Motor.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <setMotorSpeed+0x70>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]

	HAL_TIM_PWM_Stop(htimx, channel);
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f002 fa4b 	bl	80039a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Init(htimx);
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f002 f957 	bl	80037c2 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC_DC_Motor, channel);
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4907      	ldr	r1, [pc, #28]	; (8001534 <setMotorSpeed+0x70>)
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f002 faa7 	bl	8003a6c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htimx, channel);
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f002 f99d 	bl	8003860 <HAL_TIM_PWM_Start>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	51eb851f 	.word	0x51eb851f
 8001534:	200000b0 	.word	0x200000b0

08001538 <setMotorDirection>:
	uint16_t pulse = (speed*1.0/100)*period;
	setMotorPWM(timer,channel,period,pulse);
	return pulse;
}
*/
void setMotorDirection(Direction dir_code){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState bit_to_send = GPIO_PIN_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]

	//Enviar código de controle da direção:
	HAL_GPIO_WritePin(GPIOA, DIR_EN_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154c:	4828      	ldr	r0, [pc, #160]	; (80015f0 <setMotorDirection+0xb8>)
 800154e:	f001 fcc7 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_LATCH_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	4826      	ldr	r0, [pc, #152]	; (80015f0 <setMotorDirection+0xb8>)
 8001558:	f001 fcc2 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIR_CLK_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2120      	movs	r1, #32
 8001560:	4824      	ldr	r0, [pc, #144]	; (80015f4 <setMotorDirection+0xbc>)
 8001562:	f001 fcbd 	bl	8002ee0 <HAL_GPIO_WritePin>

	unsigned char comparator = 0x80;
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	73bb      	strb	r3, [r7, #14]

	for (int i = 0; i<8; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	e02a      	b.n	80015c6 <setMotorDirection+0x8e>
		if (dir_code & comparator){
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	4013      	ands	r3, r2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <setMotorDirection+0x4a>
		  bit_to_send = GPIO_PIN_SET;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e001      	b.n	8001586 <setMotorDirection+0x4e>
		}
		else{
		  bit_to_send = GPIO_PIN_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
		}

		comparator = comparator >> 1;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]

		HAL_GPIO_WritePin(GPIOA, DIR_EN_Pin, bit_to_send);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4816      	ldr	r0, [pc, #88]	; (80015f0 <setMotorDirection+0xb8>)
 8001596:	f001 fca3 	bl	8002ee0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f001 f9ea 	bl	8002974 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, DIR_CLK_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2120      	movs	r1, #32
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <setMotorDirection+0xbc>)
 80015a6:	f001 fc9b 	bl	8002ee0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f001 f9e2 	bl	8002974 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, DIR_CLK_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2120      	movs	r1, #32
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <setMotorDirection+0xbc>)
 80015b6:	f001 fc93 	bl	8002ee0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f001 f9da 	bl	8002974 <HAL_Delay>
	for (int i = 0; i<8; i++){
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	ddd1      	ble.n	8001570 <setMotorDirection+0x38>
	}

	HAL_GPIO_WritePin(GPIOA, DIR_LATCH_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2140      	movs	r1, #64	; 0x40
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <setMotorDirection+0xb8>)
 80015d2:	f001 fc85 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f001 f9cc 	bl	8002974 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, DIR_LATCH_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <setMotorDirection+0xb8>)
 80015e2:	f001 fc7d 	bl	8002ee0 <HAL_GPIO_WritePin>
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40010c00 	.word	0x40010c00

080015f8 <setServoAngle>:

const float ANGLE_PERCENTAGE_90_NEG = 0.0256;
const float ANGLE_PERCENTAGE_90_POS = 0.1240;
const float ANGLE_PERCENTAGE_NEUTRAL = 0.0744;

void setServoAngle(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, int16_t angle){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	460b      	mov	r3, r1
 8001608:	80fb      	strh	r3, [r7, #6]
 800160a:	4613      	mov	r3, r2
 800160c:	80bb      	strh	r3, [r7, #4]
	uint16_t pulse = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	82fb      	strh	r3, [r7, #22]
	if((angle==0)||(angle<-90)||(angle>90)){
 8001612:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <setServoAngle+0x34>
 800161a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800161e:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001622:	db03      	blt.n	800162c <setServoAngle+0x34>
 8001624:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001628:	2b5a      	cmp	r3, #90	; 0x5a
 800162a:	dd0f      	ble.n	800164c <setServoAngle+0x54>
			pulse = ANGLE_PERCENTAGE_NEUTRAL*period;
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb2c 	bl	8000c8c <__aeabi_i2f>
 8001634:	4603      	mov	r3, r0
 8001636:	4a59      	ldr	r2, [pc, #356]	; (800179c <setServoAngle+0x1a4>)
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb7a 	bl	8000d34 <__aeabi_fmul>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fcc6 	bl	8000fd4 <__aeabi_f2uiz>
 8001648:	4603      	mov	r3, r0
 800164a:	82fb      	strh	r3, [r7, #22]
	}
	if((angle>=-90)&&(angle<0)){
 800164c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001650:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001654:	db4e      	blt.n	80016f4 <setServoAngle+0xfc>
 8001656:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da4a      	bge.n	80016f4 <setServoAngle+0xfc>
		pulse = (((angle+90.0)/90)*(ANGLE_PERCENTAGE_NEUTRAL-ANGLE_PERCENTAGE_90_NEG)+ANGLE_PERCENTAGE_90_NEG)*period;
 800165e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fece 	bl	8000404 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <setServoAngle+0x1a8>)
 800166e:	f7fe fd7d 	bl	800016c <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <setServoAngle+0x1a8>)
 8001680:	f7ff f854 	bl	800072c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	4b43      	ldr	r3, [pc, #268]	; (800179c <setServoAngle+0x1a4>)
 800168e:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <setServoAngle+0x1ac>)
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fa44 	bl	8000b20 <__aeabi_fsub>
 8001698:	4603      	mov	r3, r0
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fec4 	bl	8000428 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe ff16 	bl	80004d8 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4614      	mov	r4, r2
 80016b2:	461d      	mov	r5, r3
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <setServoAngle+0x1ac>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe feb6 	bl	8000428 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe fd52 	bl	800016c <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fe96 	bl	8000404 <__aeabi_i2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fefa 	bl	80004d8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f9a4 	bl	8000a38 <__aeabi_d2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	82fb      	strh	r3, [r7, #22]
	}
	if((angle>0)&&(angle<=90)){
 80016f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	dd45      	ble.n	8001788 <setServoAngle+0x190>
 80016fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001700:	2b5a      	cmp	r3, #90	; 0x5a
 8001702:	dc41      	bgt.n	8001788 <setServoAngle+0x190>
		pulse = (((angle)/90.0)*(ANGLE_PERCENTAGE_90_POS-ANGLE_PERCENTAGE_NEUTRAL)+ANGLE_PERCENTAGE_NEUTRAL)*period;
 8001704:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe7b 	bl	8000404 <__aeabi_i2d>
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <setServoAngle+0x1a8>)
 8001714:	f7ff f80a 	bl	800072c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4614      	mov	r4, r2
 800171e:	461d      	mov	r5, r3
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <setServoAngle+0x1b0>)
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <setServoAngle+0x1a4>)
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f9fa 	bl	8000b20 <__aeabi_fsub>
 800172c:	4603      	mov	r3, r0
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fe7a 	bl	8000428 <__aeabi_f2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4620      	mov	r0, r4
 800173a:	4629      	mov	r1, r5
 800173c:	f7fe fecc 	bl	80004d8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	461d      	mov	r5, r3
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <setServoAngle+0x1a4>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe6c 	bl	8000428 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7fe fd08 	bl	800016c <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fe4c 	bl	8000404 <__aeabi_i2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe feb0 	bl	80004d8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f95a 	bl	8000a38 <__aeabi_d2uiz>
 8001784:	4603      	mov	r3, r0
 8001786:	82fb      	strh	r3, [r7, #22]
	}
	setServoPWM(timer,channel,period,pulse);
 8001788:	8afb      	ldrh	r3, [r7, #22]
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f80c 	bl	80017ac <setServoPWM>
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bdb0      	pop	{r4, r5, r7, pc}
 800179c:	3d985f07 	.word	0x3d985f07
 80017a0:	40568000 	.word	0x40568000
 80017a4:	3cd1b717 	.word	0x3cd1b717
 80017a8:	3dfdf3b6 	.word	0x3dfdf3b6

080017ac <setServoPWM>:

void setServoPWM(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	; 0x30
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	460b      	mov	r3, r1
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	4613      	mov	r3, r2
 80017c0:	80bb      	strh	r3, [r7, #4]
	 HAL_TIM_PWM_Stop(timer, channel); // stop generation of pwm
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f002 f8ed 	bl	80039a4 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer->Init.Period = period; // set the period duration
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Init(timer); // reinititialise with new period value
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f001 fff6 	bl	80037c2 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d6:	2360      	movs	r3, #96	; 0x60
 80017d8:	617b      	str	r3, [r7, #20]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	4619      	mov	r1, r3
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f002 f93c 	bl	8003a6c <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(timer, channel); // start pwm generation
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f002 f832 	bl	8003860 <HAL_TIM_PWM_Start>
}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180a:	f001 f851 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180e:	f000 f8b7 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001812:	f000 f9c3 	bl	8001b9c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001816:	f000 f94b 	bl	8001ab0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800181a:	f000 f8f1 	bl	8001a00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setupBLE(&huart1, &huart3);
 800181e:	494f      	ldr	r1, [pc, #316]	; (800195c <main+0x158>)
 8001820:	484f      	ldr	r0, [pc, #316]	; (8001960 <main+0x15c>)
 8001822:	f7ff fbf7 	bl	8001014 <setupBLE>
  setMotorDirection(Forward);
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff fe86 	bl	8001538 <setMotorDirection>
  setupMotor(&htim2);
 800182c:	484d      	ldr	r0, [pc, #308]	; (8001964 <main+0x160>)
 800182e:	f7ff fe33 	bl	8001498 <setupMotor>

  int8_t error = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	777b      	strb	r3, [r7, #29]
  int8_t past_error = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	77fb      	strb	r3, [r7, #31]
  int8_t P = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	773b      	strb	r3, [r7, #28]
  int8_t I = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	77bb      	strb	r3, [r7, #30]
  int8_t D = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	76fb      	strb	r3, [r7, #27]
  const int8_t Kp = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	76bb      	strb	r3, [r7, #26]
  const int8_t Ki = 0.1;
 800184a:	2300      	movs	r3, #0
 800184c:	767b      	strb	r3, [r7, #25]
  const int8_t Kd = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	763b      	strb	r3, [r7, #24]
  {
    /* USER CODE END WHILE */

	// LER SENSORES
	// LEITURA DA POSIÇÃO
	ListDevices_t listOfDevices = masterScanForSlaves();
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fc2a 	bl	80010b0 <masterScanForSlaves>
	getPowersFromReading(listOfDevices);
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001864:	f000 fa20 	bl	8001ca8 <getPowersFromReading>
	Point myPosition = get_position(b1Power, b2Power, b3Power);
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <main+0x164>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fa0d 	bl	8000c8c <__aeabi_i2f>
 8001872:	4604      	mov	r4, r0
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <main+0x168>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fa07 	bl	8000c8c <__aeabi_i2f>
 800187e:	4605      	mov	r5, r0
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <main+0x16c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa01 	bl	8000c8c <__aeabi_i2f>
 800188a:	4603      	mov	r3, r0
 800188c:	1d38      	adds	r0, r7, #4
 800188e:	462a      	mov	r2, r5
 8001890:	4621      	mov	r1, r4
 8001892:	f000 fba1 	bl	8001fd8 <get_position>
	free(listOfDevices.devices);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4618      	mov	r0, r3
 800189a:	f002 ff4f 	bl	800473c <free>

	// CALCULAR ERRO

	// CALCULAR SINAL DE CONTROLE DE ANGULO

	if (error==0){
 800189e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <main+0xa6>
		I = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	77bb      	strb	r3, [r7, #30]
	}
	P = error;
 80018aa:	7f7b      	ldrb	r3, [r7, #29]
 80018ac:	773b      	strb	r3, [r7, #28]
	I = I + error;
 80018ae:	7fba      	ldrb	r2, [r7, #30]
 80018b0:	7f7b      	ldrb	r3, [r7, #29]
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	77bb      	strb	r3, [r7, #30]
	if (I > 90){
 80018b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018bc:	2b5a      	cmp	r3, #90	; 0x5a
 80018be:	dd02      	ble.n	80018c6 <main+0xc2>
		I = 90;
 80018c0:	235a      	movs	r3, #90	; 0x5a
 80018c2:	77bb      	strb	r3, [r7, #30]
 80018c4:	e006      	b.n	80018d4 <main+0xd0>
	}
	else if (I < -90){
 80018c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018ca:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 80018ce:	da01      	bge.n	80018d4 <main+0xd0>
		I = -90;
 80018d0:	23a6      	movs	r3, #166	; 0xa6
 80018d2:	77bb      	strb	r3, [r7, #30]
	}
	D = error - past_error;
 80018d4:	7f7a      	ldrb	r2, [r7, #29]
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	76fb      	strb	r3, [r7, #27]

	uint8_t PID = (Kp*P) + (Ki*I) + (Kd*D);
 80018de:	7ebb      	ldrb	r3, [r7, #26]
 80018e0:	7f3a      	ldrb	r2, [r7, #28]
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	7e7b      	ldrb	r3, [r7, #25]
 80018ea:	7fb9      	ldrb	r1, [r7, #30]
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	7e3b      	ldrb	r3, [r7, #24]
 80018f8:	7ef9      	ldrb	r1, [r7, #27]
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	75fb      	strb	r3, [r7, #23]

	past_error = error;
 8001904:	7f7b      	ldrb	r3, [r7, #29]
 8001906:	77fb      	strb	r3, [r7, #31]

	// CONTROLAR OS MOTORES

	if (PID >= 0){
		angle -= PID;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <main+0x170>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <main+0x170>)
 8001914:	701a      	strb	r2, [r3, #0]
	}
	else{
		angle += PID;
	}

	if(error<0)
 8001916:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800191a:	2b00      	cmp	r3, #0
 800191c:	da05      	bge.n	800192a <main+0x126>
		speed = 100+error;
 800191e:	7f7b      	ldrb	r3, [r7, #29]
 8001920:	3364      	adds	r3, #100	; 0x64
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <main+0x174>)
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e005      	b.n	8001936 <main+0x132>
	else
		speed = 100-error;
 800192a:	7f7b      	ldrb	r3, [r7, #29]
 800192c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <main+0x174>)
 8001934:	701a      	strb	r2, [r3, #0]

	setServoAngle(&htim3,TIM_CHANNEL_2,PERIOD,angle);
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <main+0x170>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b21b      	sxth	r3, r3
 800193c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001940:	2104      	movs	r1, #4
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <main+0x178>)
 8001944:	f7ff fe58 	bl	80015f8 <setServoAngle>
	setMotorSpeed(&htim2,TIM_CHANNEL_2,PERIOD,speed);
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <main+0x174>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001952:	2104      	movs	r1, #4
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <main+0x160>)
 8001956:	f7ff fdb5 	bl	80014c4 <setMotorSpeed>
  {
 800195a:	e77a      	b.n	8001852 <main+0x4e>
 800195c:	20000130 	.word	0x20000130
 8001960:	200001bc 	.word	0x200001bc
 8001964:	20000200 	.word	0x20000200
 8001968:	200000d0 	.word	0x200000d0
 800196c:	200000d4 	.word	0x200000d4
 8001970:	200000d8 	.word	0x200000d8
 8001974:	200000cc 	.word	0x200000cc
 8001978:	200000cd 	.word	0x200000cd
 800197c:	20000174 	.word	0x20000174

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b090      	sub	sp, #64	; 0x40
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	2228      	movs	r2, #40	; 0x28
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fedc 	bl	800474c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a6:	2301      	movs	r3, #1
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019aa:	2310      	movs	r3, #16
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ae:	2302      	movs	r3, #2
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fac8 	bl	8002f54 <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80019ca:	f000 fd43 	bl	8002454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
 80019d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	2302      	movs	r3, #2
 80019d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80019d6:	23b0      	movs	r3, #176	; 0xb0
 80019d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80019da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f001 fd33 	bl	8003454 <HAL_RCC_ClockConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80019f4:	f000 fd2e 	bl	8002454 <Error_Handler>
  }
}
 80019f8:	bf00      	nop
 80019fa:	3740      	adds	r7, #64	; 0x40
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a38:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001a3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a4a:	4818      	ldr	r0, [pc, #96]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a4c:	f001 feb9 	bl	80037c2 <HAL_TIM_PWM_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a56:	f000 fcfd 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4619      	mov	r1, r3
 8001a68:	4810      	ldr	r0, [pc, #64]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a6a:	f002 fc25 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a74:	f000 fcee 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a78:	2360      	movs	r3, #96	; 0x60
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 94;
 8001a7c:	235e      	movs	r3, #94	; 0x5e
 8001a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM2_Init+0xac>)
 8001a90:	f001 ffec 	bl	8003a6c <HAL_TIM_PWM_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a9a:	f000 fcdb 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM2_Init+0xac>)
 8001aa0:	f000 fd4a 	bl	8002538 <HAL_TIM_MspPostInit>

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000200 	.word	0x20000200

08001ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	; 0x38
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
 8001adc:	615a      	str	r2, [r3, #20]
 8001ade:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001ae2:	4a2d      	ldr	r2, [pc, #180]	; (8001b98 <MX_TIM3_Init+0xe8>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001af4:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001af8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b06:	4823      	ldr	r0, [pc, #140]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001b08:	f001 fe0c 	bl	8003724 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b12:	f000 fc9f 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b20:	4619      	mov	r1, r3
 8001b22:	481c      	ldr	r0, [pc, #112]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001b24:	f002 f860 	bl	8003be8 <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b2e:	f000 fc91 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b32:	4818      	ldr	r0, [pc, #96]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001b34:	f001 fe45 	bl	80037c2 <HAL_TIM_PWM_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b3e:	f000 fc89 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4810      	ldr	r0, [pc, #64]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001b52:	f002 fbb1 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b5c:	f000 fc7a 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b60:	2360      	movs	r3, #96	; 0x60
 8001b62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2204      	movs	r2, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4807      	ldr	r0, [pc, #28]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001b78:	f001 ff78 	bl	8003a6c <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b82:	f000 fc67 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b86:	4803      	ldr	r0, [pc, #12]	; (8001b94 <MX_TIM3_Init+0xe4>)
 8001b88:	f000 fcd6 	bl	8002538 <HAL_TIM_MspPostInit>

}
 8001b8c:	bf00      	nop
 8001b8e:	3738      	adds	r7, #56	; 0x38
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000174 	.word	0x20000174
 8001b98:	40000400 	.word	0x40000400

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bce:	f043 0320 	orr.w	r3, r3, #32
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a2b      	ldr	r2, [pc, #172]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xf8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_LATCH_Pin|DIR_EN_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001c16:	4820      	ldr	r0, [pc, #128]	; (8001c98 <MX_GPIO_Init+0xfc>)
 8001c18:	f001 f962 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2120      	movs	r1, #32
 8001c20:	481e      	ldr	r0, [pc, #120]	; (8001c9c <MX_GPIO_Init+0x100>)
 8001c22:	f001 f95d 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_GPIO_Init+0x104>)
 8001c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481a      	ldr	r0, [pc, #104]	; (8001ca4 <MX_GPIO_Init+0x108>)
 8001c3c:	f000 ffcc 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_LATCH_Pin DIR_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_LATCH_Pin|DIR_EN_Pin;
 8001c40:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	480f      	ldr	r0, [pc, #60]	; (8001c98 <MX_GPIO_Init+0xfc>)
 8001c5a:	f000 ffbd 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_CLK_Pin */
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <MX_GPIO_Init+0x100>)
 8001c76:	f000 ffaf 	bl	8002bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2028      	movs	r0, #40	; 0x28
 8001c80:	f000 ff73 	bl	8002b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c84:	2028      	movs	r0, #40	; 0x28
 8001c86:	f000 ff8c 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010800 	.word	0x40010800
 8001c9c:	40010c00 	.word	0x40010c00
 8001ca0:	10110000 	.word	0x10110000
 8001ca4:	40011000 	.word	0x40011000

08001ca8 <getPowersFromReading>:

/* USER CODE BEGIN 4 */
void getPowersFromReading(ListDevices_t listOfDevices) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	463b      	mov	r3, r7
 8001cb0:	e883 0003 	stmia.w	r3, {r0, r1}
	static int b1Powers[5] = {0,0,0,0,0};
	static int b2Powers[5] = {0,0,0,0,0};
	static int b3Powers[5] = {0,0,0,0,0};
	static uint8_t currentIndex = 0;

	uint8_t nbOfDevices = listOfDevices.nbOfDevices;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	74fb      	strb	r3, [r7, #19]
	Device_t* devices = listOfDevices.devices;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
	uint8_t b1Changed = 0, b2Changed = 0, b3Changed = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75bb      	strb	r3, [r7, #22]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	757b      	strb	r3, [r7, #21]

	// Get the powers from entries
	for (uint8_t i=0; i<nbOfDevices; i++) {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	753b      	strb	r3, [r7, #20]
 8001ccc:	e076      	b.n	8001dbc <getPowersFromReading+0x114>
		if(strstr(devices[i].name, "B1") != NULL && !isOutlierInArray(5, b1Powers, devices[i].signalStrength)) {
 8001cce:	7d3b      	ldrb	r3, [r7, #20]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4966      	ldr	r1, [pc, #408]	; (8001e74 <getPowersFromReading+0x1cc>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 f9b7 	bl	800504e <strstr>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01a      	beq.n	8001d1c <getPowersFromReading+0x74>
 8001ce6:	7d3b      	ldrb	r3, [r7, #20]
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4961      	ldr	r1, [pc, #388]	; (8001e78 <getPowersFromReading+0x1d0>)
 8001cf4:	2005      	movs	r0, #5
 8001cf6:	f000 f8ff 	bl	8001ef8 <isOutlierInArray>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10d      	bne.n	8001d1c <getPowersFromReading+0x74>
			b1Powers[currentIndex] = devices[i].signalStrength;
 8001d00:	7d3b      	ldrb	r3, [r7, #20]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a5c      	ldr	r2, [pc, #368]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a59      	ldr	r2, [pc, #356]	; (8001e78 <getPowersFromReading+0x1d0>)
 8001d12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b1Changed = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
 8001d1a:	e04c      	b.n	8001db6 <getPowersFromReading+0x10e>
		} else if (strstr(devices[i].name, "B2")!= NULL && !isOutlierInArray(5, b2Powers, devices[i].signalStrength)) {
 8001d1c:	7d3b      	ldrb	r3, [r7, #20]
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4956      	ldr	r1, [pc, #344]	; (8001e80 <getPowersFromReading+0x1d8>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 f990 	bl	800504e <strstr>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01a      	beq.n	8001d6a <getPowersFromReading+0xc2>
 8001d34:	7d3b      	ldrb	r3, [r7, #20]
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4950      	ldr	r1, [pc, #320]	; (8001e84 <getPowersFromReading+0x1dc>)
 8001d42:	2005      	movs	r0, #5
 8001d44:	f000 f8d8 	bl	8001ef8 <isOutlierInArray>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <getPowersFromReading+0xc2>
			b2Powers[currentIndex] = devices[i].signalStrength;
 8001d4e:	7d3b      	ldrb	r3, [r7, #20]
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001d58:	7812      	ldrb	r2, [r2, #0]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4a49      	ldr	r2, [pc, #292]	; (8001e84 <getPowersFromReading+0x1dc>)
 8001d60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b2Changed = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	75bb      	strb	r3, [r7, #22]
 8001d68:	e025      	b.n	8001db6 <getPowersFromReading+0x10e>
		} else if (strstr(devices[i].name, "B3")!= NULL && !isOutlierInArray(5, b3Powers, devices[i].signalStrength)) {
 8001d6a:	7d3b      	ldrb	r3, [r7, #20]
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4944      	ldr	r1, [pc, #272]	; (8001e88 <getPowersFromReading+0x1e0>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 f969 	bl	800504e <strstr>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d019      	beq.n	8001db6 <getPowersFromReading+0x10e>
 8001d82:	7d3b      	ldrb	r3, [r7, #20]
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4413      	add	r3, r2
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	493f      	ldr	r1, [pc, #252]	; (8001e8c <getPowersFromReading+0x1e4>)
 8001d90:	2005      	movs	r0, #5
 8001d92:	f000 f8b1 	bl	8001ef8 <isOutlierInArray>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10c      	bne.n	8001db6 <getPowersFromReading+0x10e>
			b3Powers[currentIndex] = devices[i].signalStrength;
 8001d9c:	7d3b      	ldrb	r3, [r7, #20]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a35      	ldr	r2, [pc, #212]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	4611      	mov	r1, r2
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a37      	ldr	r2, [pc, #220]	; (8001e8c <getPowersFromReading+0x1e4>)
 8001dae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b3Changed = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	757b      	strb	r3, [r7, #21]
	for (uint8_t i=0; i<nbOfDevices; i++) {
 8001db6:	7d3b      	ldrb	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	753b      	strb	r3, [r7, #20]
 8001dbc:	7d3a      	ldrb	r2, [r7, #20]
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d384      	bcc.n	8001cce <getPowersFromReading+0x26>
		}
	}

	uint8_t prevIndex = (currentIndex > 0) ? currentIndex-1 : 4;
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <getPowersFromReading+0x12e>
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	e000      	b.n	8001dd8 <getPowersFromReading+0x130>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	72fb      	strb	r3, [r7, #11]
	if(!b1Changed) b1Powers[currentIndex] = b1Powers[prevIndex];
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <getPowersFromReading+0x14c>
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <getPowersFromReading+0x1d0>)
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <getPowersFromReading+0x1d0>)
 8001df0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(!b2Changed) b2Powers[currentIndex] = b2Powers[prevIndex];
 8001df4:	7dbb      	ldrb	r3, [r7, #22]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <getPowersFromReading+0x166>
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001dfe:	7812      	ldrb	r2, [r2, #0]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <getPowersFromReading+0x1dc>)
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <getPowersFromReading+0x1dc>)
 8001e0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(!b3Changed) b3Powers[currentIndex] = b3Powers[prevIndex];
 8001e0e:	7d7b      	ldrb	r3, [r7, #21]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <getPowersFromReading+0x180>
 8001e14:	7afb      	ldrb	r3, [r7, #11]
 8001e16:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <getPowersFromReading+0x1e4>)
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <getPowersFromReading+0x1e4>)
 8001e24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	b1Power = getAverage(5, b1Powers);
 8001e28:	4913      	ldr	r1, [pc, #76]	; (8001e78 <getPowersFromReading+0x1d0>)
 8001e2a:	2005      	movs	r0, #5
 8001e2c:	f000 f836 	bl	8001e9c <getAverage>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <getPowersFromReading+0x1e8>)
 8001e34:	6013      	str	r3, [r2, #0]
	b2Power = getAverage(5, b2Powers);
 8001e36:	4913      	ldr	r1, [pc, #76]	; (8001e84 <getPowersFromReading+0x1dc>)
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f000 f82f 	bl	8001e9c <getAverage>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <getPowersFromReading+0x1ec>)
 8001e42:	6013      	str	r3, [r2, #0]
	b3Power = getAverage(5, b3Powers);
 8001e44:	4911      	ldr	r1, [pc, #68]	; (8001e8c <getPowersFromReading+0x1e4>)
 8001e46:	2005      	movs	r0, #5
 8001e48:	f000 f828 	bl	8001e9c <getAverage>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <getPowersFromReading+0x1f0>)
 8001e50:	6013      	str	r3, [r2, #0]

	currentIndex = (currentIndex >= 4) ? 0 : currentIndex+1;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d804      	bhi.n	8001e64 <getPowersFromReading+0x1bc>
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e000      	b.n	8001e66 <getPowersFromReading+0x1be>
 8001e64:	2300      	movs	r3, #0
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <getPowersFromReading+0x1d4>)
 8001e68:	7013      	strb	r3, [r2, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	08006e08 	.word	0x08006e08
 8001e78:	200000dc 	.word	0x200000dc
 8001e7c:	200000f0 	.word	0x200000f0
 8001e80:	08006e0c 	.word	0x08006e0c
 8001e84:	200000f4 	.word	0x200000f4
 8001e88:	08006e10 	.word	0x08006e10
 8001e8c:	20000108 	.word	0x20000108
 8001e90:	200000d0 	.word	0x200000d0
 8001e94:	200000d4 	.word	0x200000d4
 8001e98:	200000d8 	.word	0x200000d8

08001e9c <getAverage>:

int getAverage(int nbOfEntries, int entries[]) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	int nonNullEntries = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
	int sum = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
	for (int i=0; i<nbOfEntries; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e014      	b.n	8001ede <getAverage+0x42>
		if(entries[i] != 0)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <getAverage+0x2c>
			nonNullEntries++;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
		sum += entries[i];
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
	for (int i=0; i<nbOfEntries; i++) {
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbe6      	blt.n	8001eb4 <getAverage+0x18>
	}
	return sum/nonNullEntries;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <isOutlierInArray>:

uint8_t isOutlierInArray(int nbOfEntries, int array[], int value) {
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
	int min = array[0], max = array[0];
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
	for (int i=1; i<nbOfEntries; i++) {
 8001f10:	2301      	movs	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e01e      	b.n	8001f54 <isOutlierInArray+0x5c>
		if (array[i] > max) max = array[i];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	da05      	bge.n	8001f32 <isOutlierInArray+0x3a>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
		if (array[i] < min) min = array[i];
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dd05      	ble.n	8001f4e <isOutlierInArray+0x56>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61fb      	str	r3, [r7, #28]
	for (int i=1; i<nbOfEntries; i++) {
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbdc      	blt.n	8001f16 <isOutlierInArray+0x1e>
	}
	return (value > 1.1*max || value < 0.9*min);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe fa51 	bl	8000404 <__aeabi_i2d>
 8001f62:	4604      	mov	r4, r0
 8001f64:	460d      	mov	r5, r1
 8001f66:	69b8      	ldr	r0, [r7, #24]
 8001f68:	f7fe fa4c 	bl	8000404 <__aeabi_i2d>
 8001f6c:	a316      	add	r3, pc, #88	; (adr r3, 8001fc8 <isOutlierInArray+0xd0>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fab1 	bl	80004d8 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe fd3b 	bl	80009f8 <__aeabi_dcmpgt>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d115      	bne.n	8001fb4 <isOutlierInArray+0xbc>
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe fa3b 	bl	8000404 <__aeabi_i2d>
 8001f8e:	4604      	mov	r4, r0
 8001f90:	460d      	mov	r5, r1
 8001f92:	69f8      	ldr	r0, [r7, #28]
 8001f94:	f7fe fa36 	bl	8000404 <__aeabi_i2d>
 8001f98:	a30d      	add	r3, pc, #52	; (adr r3, 8001fd0 <isOutlierInArray+0xd8>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fa9b 	bl	80004d8 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f7fe fd07 	bl	80009bc <__aeabi_dcmplt>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <isOutlierInArray+0xc0>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <isOutlierInArray+0xc2>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	9999999a 	.word	0x9999999a
 8001fcc:	3ff19999 	.word	0x3ff19999
 8001fd0:	cccccccd 	.word	0xcccccccd
 8001fd4:	3feccccc 	.word	0x3feccccc

08001fd8 <get_position>:

Point get_position(float rss1, float rss2, float rss3) {
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b090      	sub	sp, #64	; 0x40
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]

  int8_t P = -69; // Abstract Value, Must be measured
 8001fe6:	23bb      	movs	r3, #187	; 0xbb
 8001fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  int8_t N = 2;  // NI
 8001fec:	2302      	movs	r3, #2
 8001fee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  // getting the distance in meters
  float d1 = pow(10,((P - rss1)/(10*N)));
 8001ff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fe48 	bl	8000c8c <__aeabi_i2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fd8d 	bl	8000b20 <__aeabi_fsub>
 8002006:	4603      	mov	r3, r0
 8002008:	461c      	mov	r4, r3
 800200a:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fe38 	bl	8000c8c <__aeabi_i2f>
 800201c:	4603      	mov	r3, r0
 800201e:	4619      	mov	r1, r3
 8002020:	4620      	mov	r0, r4
 8002022:	f7fe ff3b 	bl	8000e9c <__aeabi_fdiv>
 8002026:	4603      	mov	r3, r0
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f9fd 	bl	8000428 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	49c6      	ldr	r1, [pc, #792]	; (8002350 <get_position+0x378>)
 8002038:	f003 feba 	bl	8005db0 <pow>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fd18 	bl	8000a78 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
  float d2 = pow(10,((P - rss2)/(10*N)));
 800204c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe1b 	bl	8000c8c <__aeabi_i2f>
 8002056:	4603      	mov	r3, r0
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd60 	bl	8000b20 <__aeabi_fsub>
 8002060:	4603      	mov	r3, r0
 8002062:	461c      	mov	r4, r3
 8002064:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fe0b 	bl	8000c8c <__aeabi_i2f>
 8002076:	4603      	mov	r3, r0
 8002078:	4619      	mov	r1, r3
 800207a:	4620      	mov	r0, r4
 800207c:	f7fe ff0e 	bl	8000e9c <__aeabi_fdiv>
 8002080:	4603      	mov	r3, r0
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f9d0 	bl	8000428 <__aeabi_f2d>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	49af      	ldr	r1, [pc, #700]	; (8002350 <get_position+0x378>)
 8002092:	f003 fe8d 	bl	8005db0 <pow>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fceb 	bl	8000a78 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
  float d3 = pow(10,((P - rss3)/(10*N)));
 80020a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fdee 	bl	8000c8c <__aeabi_i2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fd33 	bl	8000b20 <__aeabi_fsub>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461c      	mov	r4, r3
 80020be:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fdde 	bl	8000c8c <__aeabi_i2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7fe fee1 	bl	8000e9c <__aeabi_fdiv>
 80020da:	4603      	mov	r3, r0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9a3 	bl	8000428 <__aeabi_f2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	f04f 0000 	mov.w	r0, #0
 80020ea:	4999      	ldr	r1, [pc, #612]	; (8002350 <get_position+0x378>)
 80020ec:	f003 fe60 	bl	8005db0 <pow>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fcbe 	bl	8000a78 <__aeabi_d2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  const Point B2 = {-19.866425, -43.964556 };
  const Point B3 = {-19.866572, -43.964556 };

  // Calculate the position of the unknown point.

  float A = (-2*B1.x+2*B2.x);
 8002100:	4b94      	ldr	r3, [pc, #592]	; (8002354 <get_position+0x37c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fe13 	bl	8000d34 <__aeabi_fmul>
 800210e:	4603      	mov	r3, r0
 8002110:	461c      	mov	r4, r3
 8002112:	4b91      	ldr	r3, [pc, #580]	; (8002358 <get_position+0x380>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fd03 	bl	8000b24 <__addsf3>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	4620      	mov	r0, r4
 8002124:	f7fe fcfe 	bl	8000b24 <__addsf3>
 8002128:	4603      	mov	r3, r0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float B = (-2*B1.y+2*B2.y);
 800212c:	4b89      	ldr	r3, [pc, #548]	; (8002354 <get_position+0x37c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fdfd 	bl	8000d34 <__aeabi_fmul>
 800213a:	4603      	mov	r3, r0
 800213c:	461c      	mov	r4, r3
 800213e:	4b86      	ldr	r3, [pc, #536]	; (8002358 <get_position+0x380>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4619      	mov	r1, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fced 	bl	8000b24 <__addsf3>
 800214a:	4603      	mov	r3, r0
 800214c:	4619      	mov	r1, r3
 800214e:	4620      	mov	r0, r4
 8002150:	f7fe fce8 	bl	8000b24 <__addsf3>
 8002154:	4603      	mov	r3, r0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  float C = pow(d1,2)-pow(d2,2)-pow(B1.x,2)+pow(B2.x,2)-pow(B1.y,2)+pow(B2.y,2);
 8002158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800215a:	f7fe f965 	bl	8000428 <__aeabi_f2d>
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002166:	f003 fe23 	bl	8005db0 <pow>
 800216a:	4604      	mov	r4, r0
 800216c:	460d      	mov	r5, r1
 800216e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002170:	f7fe f95a 	bl	8000428 <__aeabi_f2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800217c:	f003 fe18 	bl	8005db0 <pow>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fd ffee 	bl	8000168 <__aeabi_dsub>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4614      	mov	r4, r2
 8002192:	461d      	mov	r5, r3
 8002194:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <get_position+0x37c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f945 	bl	8000428 <__aeabi_f2d>
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021a6:	f003 fe03 	bl	8005db0 <pow>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fd ffd9 	bl	8000168 <__aeabi_dsub>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4614      	mov	r4, r2
 80021bc:	461d      	mov	r5, r3
 80021be:	4b66      	ldr	r3, [pc, #408]	; (8002358 <get_position+0x380>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f930 	bl	8000428 <__aeabi_f2d>
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021d0:	f003 fdee 	bl	8005db0 <pow>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fd ffc6 	bl	800016c <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4614      	mov	r4, r2
 80021e6:	461d      	mov	r5, r3
 80021e8:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <get_position+0x37c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f91b 	bl	8000428 <__aeabi_f2d>
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021fa:	f003 fdd9 	bl	8005db0 <pow>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4620      	mov	r0, r4
 8002204:	4629      	mov	r1, r5
 8002206:	f7fd ffaf 	bl	8000168 <__aeabi_dsub>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4614      	mov	r4, r2
 8002210:	461d      	mov	r5, r3
 8002212:	4b51      	ldr	r3, [pc, #324]	; (8002358 <get_position+0x380>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f906 	bl	8000428 <__aeabi_f2d>
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002224:	f003 fdc4 	bl	8005db0 <pow>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4620      	mov	r0, r4
 800222e:	4629      	mov	r1, r5
 8002230:	f7fd ff9c 	bl	800016c <__adddf3>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f7fe fc1c 	bl	8000a78 <__aeabi_d2f>
 8002240:	4603      	mov	r3, r0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  float D = (-2*B2.x+2*B3.x);
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <get_position+0x380>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fd71 	bl	8000d34 <__aeabi_fmul>
 8002252:	4603      	mov	r3, r0
 8002254:	461c      	mov	r4, r3
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <get_position+0x384>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4619      	mov	r1, r3
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fc61 	bl	8000b24 <__addsf3>
 8002262:	4603      	mov	r3, r0
 8002264:	4619      	mov	r1, r3
 8002266:	4620      	mov	r0, r4
 8002268:	f7fe fc5c 	bl	8000b24 <__addsf3>
 800226c:	4603      	mov	r3, r0
 800226e:	623b      	str	r3, [r7, #32]
  float E = (-2*B2.y+2*B3.y);
 8002270:	4b39      	ldr	r3, [pc, #228]	; (8002358 <get_position+0x380>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fd5b 	bl	8000d34 <__aeabi_fmul>
 800227e:	4603      	mov	r3, r0
 8002280:	461c      	mov	r4, r3
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <get_position+0x384>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4619      	mov	r1, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fc4b 	bl	8000b24 <__addsf3>
 800228e:	4603      	mov	r3, r0
 8002290:	4619      	mov	r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	f7fe fc46 	bl	8000b24 <__addsf3>
 8002298:	4603      	mov	r3, r0
 800229a:	61fb      	str	r3, [r7, #28]
  float F = pow(d2,2)-pow(d3,2)-pow(B2.x,2)+pow(B3.x,2)-pow(B2.y,2)+pow(B2.y,2);
 800229c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800229e:	f7fe f8c3 	bl	8000428 <__aeabi_f2d>
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022aa:	f003 fd81 	bl	8005db0 <pow>
 80022ae:	4604      	mov	r4, r0
 80022b0:	460d      	mov	r5, r1
 80022b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022b4:	f7fe f8b8 	bl	8000428 <__aeabi_f2d>
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c0:	f003 fd76 	bl	8005db0 <pow>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fd ff4c 	bl	8000168 <__aeabi_dsub>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4614      	mov	r4, r2
 80022d6:	461d      	mov	r5, r3
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <get_position+0x380>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f8a3 	bl	8000428 <__aeabi_f2d>
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ea:	f003 fd61 	bl	8005db0 <pow>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4620      	mov	r0, r4
 80022f4:	4629      	mov	r1, r5
 80022f6:	f7fd ff37 	bl	8000168 <__aeabi_dsub>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4614      	mov	r4, r2
 8002300:	461d      	mov	r5, r3
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <get_position+0x384>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f88e 	bl	8000428 <__aeabi_f2d>
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002314:	f003 fd4c 	bl	8005db0 <pow>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4620      	mov	r0, r4
 800231e:	4629      	mov	r1, r5
 8002320:	f7fd ff24 	bl	800016c <__adddf3>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4614      	mov	r4, r2
 800232a:	461d      	mov	r5, r3
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <get_position+0x380>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f879 	bl	8000428 <__aeabi_f2d>
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233e:	f003 fd37 	bl	8005db0 <pow>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7fd ff0d 	bl	8000168 <__aeabi_dsub>
 800234e:	e007      	b.n	8002360 <get_position+0x388>
 8002350:	40240000 	.word	0x40240000
 8002354:	08006e30 	.word	0x08006e30
 8002358:	08006e38 	.word	0x08006e38
 800235c:	08006e40 	.word	0x08006e40
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4614      	mov	r4, r2
 8002366:	461d      	mov	r5, r3
 8002368:	4b39      	ldr	r3, [pc, #228]	; (8002450 <get_position+0x478>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f85b 	bl	8000428 <__aeabi_f2d>
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800237a:	f003 fd19 	bl	8005db0 <pow>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4620      	mov	r0, r4
 8002384:	4629      	mov	r1, r5
 8002386:	f7fd fef1 	bl	800016c <__adddf3>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fb71 	bl	8000a78 <__aeabi_d2f>
 8002396:	4603      	mov	r3, r0
 8002398:	61bb      	str	r3, [r7, #24]

  Point p = {
    .x = ((C*E) - (F*B)) / ((E*A) - (B*D)),
 800239a:	69f9      	ldr	r1, [r7, #28]
 800239c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800239e:	f7fe fcc9 	bl	8000d34 <__aeabi_fmul>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461c      	mov	r4, r3
 80023a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023a8:	69b8      	ldr	r0, [r7, #24]
 80023aa:	f7fe fcc3 	bl	8000d34 <__aeabi_fmul>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4619      	mov	r1, r3
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7fe fbb4 	bl	8000b20 <__aeabi_fsub>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461c      	mov	r4, r3
 80023bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023be:	69f8      	ldr	r0, [r7, #28]
 80023c0:	f7fe fcb8 	bl	8000d34 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461d      	mov	r5, r3
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023cc:	f7fe fcb2 	bl	8000d34 <__aeabi_fmul>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4619      	mov	r1, r3
 80023d4:	4628      	mov	r0, r5
 80023d6:	f7fe fba3 	bl	8000b20 <__aeabi_fsub>
 80023da:	4603      	mov	r3, r0
 80023dc:	4619      	mov	r1, r3
 80023de:	4620      	mov	r0, r4
 80023e0:	f7fe fd5c 	bl	8000e9c <__aeabi_fdiv>
 80023e4:	4603      	mov	r3, r0
  Point p = {
 80023e6:	613b      	str	r3, [r7, #16]
    .y = ((C*D) - (F*A)) / ((B*D) - (A*E))
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ec:	f7fe fca2 	bl	8000d34 <__aeabi_fmul>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461c      	mov	r4, r3
 80023f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023f6:	69b8      	ldr	r0, [r7, #24]
 80023f8:	f7fe fc9c 	bl	8000d34 <__aeabi_fmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4619      	mov	r1, r3
 8002400:	4620      	mov	r0, r4
 8002402:	f7fe fb8d 	bl	8000b20 <__aeabi_fsub>
 8002406:	4603      	mov	r3, r0
 8002408:	461c      	mov	r4, r3
 800240a:	6a39      	ldr	r1, [r7, #32]
 800240c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800240e:	f7fe fc91 	bl	8000d34 <__aeabi_fmul>
 8002412:	4603      	mov	r3, r0
 8002414:	461d      	mov	r5, r3
 8002416:	69f9      	ldr	r1, [r7, #28]
 8002418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241a:	f7fe fc8b 	bl	8000d34 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	4619      	mov	r1, r3
 8002422:	4628      	mov	r0, r5
 8002424:	f7fe fb7c 	bl	8000b20 <__aeabi_fsub>
 8002428:	4603      	mov	r3, r0
 800242a:	4619      	mov	r1, r3
 800242c:	4620      	mov	r0, r4
 800242e:	f7fe fd35 	bl	8000e9c <__aeabi_fdiv>
 8002432:	4603      	mov	r3, r0
  Point p = {
 8002434:	617b      	str	r3, [r7, #20]
  };

  return p;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	461a      	mov	r2, r3
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002442:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	3740      	adds	r7, #64	; 0x40
 800244a:	46bd      	mov	sp, r7
 800244c:	bdb0      	pop	{r4, r5, r7, pc}
 800244e:	bf00      	nop
 8002450:	08006e38 	.word	0x08006e38

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_MspInit+0x5c>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_MspInit+0x5c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6193      	str	r3, [r2, #24]
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_MspInit+0x5c>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_MspInit+0x5c>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_MspInit+0x5c>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_MspInit+0x5c>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_MspInit+0x60>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_MspInit+0x60>)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000

080024c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d10b      	bne.n	80024ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_TIM_PWM_MspInit+0x34>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_TIM_PWM_MspInit+0x34>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_TIM_PWM_MspInit+0x34>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000

080024fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_TIM_Base_MspInit+0x34>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10b      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_TIM_Base_MspInit+0x38>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <HAL_TIM_Base_MspInit+0x38>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_TIM_Base_MspInit+0x38>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40000400 	.word	0x40000400
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d12b      	bne.n	80025b0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_TIM_MspPostInit+0xe0>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_TIM_MspPostInit+0xe0>)
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_TIM_MspPostInit+0xe0>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2302      	movs	r3, #2
 800257c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0310 	add.w	r3, r7, #16
 8002582:	4619      	mov	r1, r3
 8002584:	4825      	ldr	r0, [pc, #148]	; (800261c <HAL_TIM_MspPostInit+0xe4>)
 8002586:	f000 fb27 	bl	8002bd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_TIM_MspPostInit+0xe8>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_TIM_MspPostInit+0xe8>)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025ae:	e02e      	b.n	800260e <HAL_TIM_MspPostInit+0xd6>
  else if(htim->Instance==TIM3)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <HAL_TIM_MspPostInit+0xec>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d129      	bne.n	800260e <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_TIM_MspPostInit+0xe0>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_TIM_MspPostInit+0xe0>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6193      	str	r3, [r2, #24]
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_TIM_MspPostInit+0xe0>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2302      	movs	r3, #2
 80025dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025de:	f107 0310 	add.w	r3, r7, #16
 80025e2:	4619      	mov	r1, r3
 80025e4:	4810      	ldr	r0, [pc, #64]	; (8002628 <HAL_TIM_MspPostInit+0xf0>)
 80025e6:	f000 faf7 	bl	8002bd8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_TIM_MspPostInit+0xe8>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
 8002608:	4a05      	ldr	r2, [pc, #20]	; (8002620 <HAL_TIM_MspPostInit+0xe8>)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	6053      	str	r3, [r2, #4]
}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40010c00 	.word	0x40010c00
 8002620:	40010000 	.word	0x40010000
 8002624:	40000400 	.word	0x40000400
 8002628:	40011000 	.word	0x40011000

0800262c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <HardFault_Handler+0x4>

0800263e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <MemManage_Handler+0x4>

08002644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <BusFault_Handler+0x4>

0800264a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800264e:	e7fe      	b.n	800264e <UsageFault_Handler+0x4>

08002650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002678:	f000 f960 	bl	800293c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}

08002680 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002684:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002688:	f000 fc42 	bl	8002f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
	return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <_kill>:

int _kill(int pid, int sig)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026a8:	f002 f804 	bl	80046b4 <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2216      	movs	r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
	return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_exit>:

void _exit (int status)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026c6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffe7 	bl	800269e <_kill>
	while (1) {}		/* Make sure we hang here */
 80026d0:	e7fe      	b.n	80026d0 <_exit+0x12>

080026d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e00a      	b.n	80026fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026e4:	f3af 8000 	nop.w
 80026e8:	4601      	mov	r1, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	60ba      	str	r2, [r7, #8]
 80026f0:	b2ca      	uxtb	r2, r1
 80026f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	3301      	adds	r3, #1
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	dbf0      	blt.n	80026e4 <_read+0x12>
	}

return len;
 8002702:	687b      	ldr	r3, [r7, #4]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e009      	b.n	8002732 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	60ba      	str	r2, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	dbf1      	blt.n	800271e <_write+0x12>
	}
	return len;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <_sbrk+0x50>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x16>
		heap_end = &end;
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <_sbrk+0x50>)
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <_sbrk+0x54>)
 8002758:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <_sbrk+0x50>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <_sbrk+0x50>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	466a      	mov	r2, sp
 800276a:	4293      	cmp	r3, r2
 800276c:	d907      	bls.n	800277e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800276e:	f001 ffa1 	bl	80046b4 <__errno>
 8002772:	4603      	mov	r3, r0
 8002774:	220c      	movs	r2, #12
 8002776:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	e006      	b.n	800278c <_sbrk+0x48>
	}

	heap_end += incr;
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <_sbrk+0x50>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a03      	ldr	r2, [pc, #12]	; (8002794 <_sbrk+0x50>)
 8002788:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	2000011c 	.word	0x2000011c
 8002798:	20000260 	.word	0x20000260

0800279c <_close>:

int _close(int file)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c2:	605a      	str	r2, [r3, #4]
	return 0;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <_isatty>:

int _isatty(int file)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	return 1;
 80027d8:	2301      	movs	r3, #1
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
	return 0;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <SystemInit+0x5c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <SystemInit+0x5c>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <SystemInit+0x5c>)
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4911      	ldr	r1, [pc, #68]	; (8002858 <SystemInit+0x5c>)
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <SystemInit+0x60>)
 8002814:	4013      	ands	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <SystemInit+0x5c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <SystemInit+0x5c>)
 800281e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <SystemInit+0x5c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SystemInit+0x5c>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <SystemInit+0x5c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <SystemInit+0x5c>)
 800283a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800283e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SystemInit+0x5c>)
 8002842:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002846:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SystemInit+0x64>)
 800284a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40021000 	.word	0x40021000
 800285c:	f8ff0000 	.word	0xf8ff0000
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002866:	490d      	ldr	r1, [pc, #52]	; (800289c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800286c:	e002      	b.n	8002874 <LoopCopyDataInit>

0800286e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002872:	3304      	adds	r3, #4

08002874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002878:	d3f9      	bcc.n	800286e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800287c:	4c0a      	ldr	r4, [pc, #40]	; (80028a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002880:	e001      	b.n	8002886 <LoopFillZerobss>

08002882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002884:	3204      	adds	r2, #4

08002886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002888:	d3fb      	bcc.n	8002882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800288a:	f7ff ffb7 	bl	80027fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288e:	f001 ff29 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002892:	f7fe ffb7 	bl	8001804 <main>
  bx lr
 8002896:	4770      	bx	lr
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80028a0:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 80028a4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80028a8:	2000025c 	.word	0x2000025c

080028ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC1_2_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_Init+0x28>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_Init+0x28>)
 80028ba:	f043 0310 	orr.w	r3, r3, #16
 80028be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 f947 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 f808 	bl	80028dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff fdc8 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x54>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_InitTick+0x58>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f95f 	bl	8002bbe <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00e      	b.n	8002928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d80a      	bhi.n	8002926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f000 f927 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <HAL_InitTick+0x5c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000020 	.word	0x20000020
 8002934:	20000028 	.word	0x20000028
 8002938:	20000024 	.word	0x20000024

0800293c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x1c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_IncTick+0x20>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <HAL_IncTick+0x20>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000028 	.word	0x20000028
 800295c:	20000248 	.word	0x20000248

08002960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_GetTick+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20000248 	.word	0x20000248

08002974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff fff0 	bl	8002960 <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d005      	beq.n	800299a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_Delay+0x44>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800299a:	bf00      	nop
 800299c:	f7ff ffe0 	bl	8002960 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d8f7      	bhi.n	800299c <HAL_Delay+0x28>
  {
  }
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000028 	.word	0x20000028

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4906      	ldr	r1, [pc, #24]	; (8002a54 <__NVIC_EnableIRQ+0x34>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff90 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff2d 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff42 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff90 	bl	8002aac <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5f 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff35 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffa2 	bl	8002b10 <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b08b      	sub	sp, #44	; 0x2c
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bea:	e169      	b.n	8002ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bec:	2201      	movs	r2, #1
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	f040 8158 	bne.w	8002eba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a9a      	ldr	r2, [pc, #616]	; (8002e78 <HAL_GPIO_Init+0x2a0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d05e      	beq.n	8002cd2 <HAL_GPIO_Init+0xfa>
 8002c14:	4a98      	ldr	r2, [pc, #608]	; (8002e78 <HAL_GPIO_Init+0x2a0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d875      	bhi.n	8002d06 <HAL_GPIO_Init+0x12e>
 8002c1a:	4a98      	ldr	r2, [pc, #608]	; (8002e7c <HAL_GPIO_Init+0x2a4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d058      	beq.n	8002cd2 <HAL_GPIO_Init+0xfa>
 8002c20:	4a96      	ldr	r2, [pc, #600]	; (8002e7c <HAL_GPIO_Init+0x2a4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d86f      	bhi.n	8002d06 <HAL_GPIO_Init+0x12e>
 8002c26:	4a96      	ldr	r2, [pc, #600]	; (8002e80 <HAL_GPIO_Init+0x2a8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d052      	beq.n	8002cd2 <HAL_GPIO_Init+0xfa>
 8002c2c:	4a94      	ldr	r2, [pc, #592]	; (8002e80 <HAL_GPIO_Init+0x2a8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d869      	bhi.n	8002d06 <HAL_GPIO_Init+0x12e>
 8002c32:	4a94      	ldr	r2, [pc, #592]	; (8002e84 <HAL_GPIO_Init+0x2ac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d04c      	beq.n	8002cd2 <HAL_GPIO_Init+0xfa>
 8002c38:	4a92      	ldr	r2, [pc, #584]	; (8002e84 <HAL_GPIO_Init+0x2ac>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d863      	bhi.n	8002d06 <HAL_GPIO_Init+0x12e>
 8002c3e:	4a92      	ldr	r2, [pc, #584]	; (8002e88 <HAL_GPIO_Init+0x2b0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d046      	beq.n	8002cd2 <HAL_GPIO_Init+0xfa>
 8002c44:	4a90      	ldr	r2, [pc, #576]	; (8002e88 <HAL_GPIO_Init+0x2b0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d85d      	bhi.n	8002d06 <HAL_GPIO_Init+0x12e>
 8002c4a:	2b12      	cmp	r3, #18
 8002c4c:	d82a      	bhi.n	8002ca4 <HAL_GPIO_Init+0xcc>
 8002c4e:	2b12      	cmp	r3, #18
 8002c50:	d859      	bhi.n	8002d06 <HAL_GPIO_Init+0x12e>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <HAL_GPIO_Init+0x80>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002cd3 	.word	0x08002cd3
 8002c5c:	08002cad 	.word	0x08002cad
 8002c60:	08002cbf 	.word	0x08002cbf
 8002c64:	08002d01 	.word	0x08002d01
 8002c68:	08002d07 	.word	0x08002d07
 8002c6c:	08002d07 	.word	0x08002d07
 8002c70:	08002d07 	.word	0x08002d07
 8002c74:	08002d07 	.word	0x08002d07
 8002c78:	08002d07 	.word	0x08002d07
 8002c7c:	08002d07 	.word	0x08002d07
 8002c80:	08002d07 	.word	0x08002d07
 8002c84:	08002d07 	.word	0x08002d07
 8002c88:	08002d07 	.word	0x08002d07
 8002c8c:	08002d07 	.word	0x08002d07
 8002c90:	08002d07 	.word	0x08002d07
 8002c94:	08002d07 	.word	0x08002d07
 8002c98:	08002d07 	.word	0x08002d07
 8002c9c:	08002cb5 	.word	0x08002cb5
 8002ca0:	08002cc9 	.word	0x08002cc9
 8002ca4:	4a79      	ldr	r2, [pc, #484]	; (8002e8c <HAL_GPIO_Init+0x2b4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002caa:	e02c      	b.n	8002d06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	623b      	str	r3, [r7, #32]
          break;
 8002cb2:	e029      	b.n	8002d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	623b      	str	r3, [r7, #32]
          break;
 8002cbc:	e024      	b.n	8002d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	623b      	str	r3, [r7, #32]
          break;
 8002cc6:	e01f      	b.n	8002d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	623b      	str	r3, [r7, #32]
          break;
 8002cd0:	e01a      	b.n	8002d08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cda:	2304      	movs	r3, #4
 8002cdc:	623b      	str	r3, [r7, #32]
          break;
 8002cde:	e013      	b.n	8002d08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce8:	2308      	movs	r3, #8
 8002cea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	611a      	str	r2, [r3, #16]
          break;
 8002cf2:	e009      	b.n	8002d08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	615a      	str	r2, [r3, #20]
          break;
 8002cfe:	e003      	b.n	8002d08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
          break;
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x130>
          break;
 8002d06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2bff      	cmp	r3, #255	; 0xff
 8002d0c:	d801      	bhi.n	8002d12 <HAL_GPIO_Init+0x13a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	e001      	b.n	8002d16 <HAL_GPIO_Init+0x13e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2bff      	cmp	r3, #255	; 0xff
 8002d1c:	d802      	bhi.n	8002d24 <HAL_GPIO_Init+0x14c>
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	e002      	b.n	8002d2a <HAL_GPIO_Init+0x152>
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	3b08      	subs	r3, #8
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	210f      	movs	r1, #15
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	6a39      	ldr	r1, [r7, #32]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	431a      	orrs	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80b1 	beq.w	8002eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d58:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4a4c      	ldr	r2, [pc, #304]	; (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6193      	str	r3, [r2, #24]
 8002d64:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d70:	4a48      	ldr	r2, [pc, #288]	; (8002e94 <HAL_GPIO_Init+0x2bc>)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a40      	ldr	r2, [pc, #256]	; (8002e98 <HAL_GPIO_Init+0x2c0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_GPIO_Init+0x1ec>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <HAL_GPIO_Init+0x2c4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00d      	beq.n	8002dc0 <HAL_GPIO_Init+0x1e8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3e      	ldr	r2, [pc, #248]	; (8002ea0 <HAL_GPIO_Init+0x2c8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <HAL_GPIO_Init+0x1e4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a3d      	ldr	r2, [pc, #244]	; (8002ea4 <HAL_GPIO_Init+0x2cc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_GPIO_Init+0x1e0>
 8002db4:	2303      	movs	r3, #3
 8002db6:	e006      	b.n	8002dc6 <HAL_GPIO_Init+0x1ee>
 8002db8:	2304      	movs	r3, #4
 8002dba:	e004      	b.n	8002dc6 <HAL_GPIO_Init+0x1ee>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e002      	b.n	8002dc6 <HAL_GPIO_Init+0x1ee>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_GPIO_Init+0x1ee>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	f002 0203 	and.w	r2, r2, #3
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	4093      	lsls	r3, r2
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dd6:	492f      	ldr	r1, [pc, #188]	; (8002e94 <HAL_GPIO_Init+0x2bc>)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	492c      	ldr	r1, [pc, #176]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	4928      	ldr	r1, [pc, #160]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4922      	ldr	r1, [pc, #136]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	491e      	ldr	r1, [pc, #120]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	4918      	ldr	r1, [pc, #96]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	4914      	ldr	r1, [pc, #80]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d021      	beq.n	8002eac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60cb      	str	r3, [r1, #12]
 8002e74:	e021      	b.n	8002eba <HAL_GPIO_Init+0x2e2>
 8002e76:	bf00      	nop
 8002e78:	10320000 	.word	0x10320000
 8002e7c:	10310000 	.word	0x10310000
 8002e80:	10220000 	.word	0x10220000
 8002e84:	10210000 	.word	0x10210000
 8002e88:	10120000 	.word	0x10120000
 8002e8c:	10110000 	.word	0x10110000
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	40010c00 	.word	0x40010c00
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_GPIO_Init+0x304>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	4909      	ldr	r1, [pc, #36]	; (8002edc <HAL_GPIO_Init+0x304>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f47f ae8e 	bne.w	8002bec <HAL_GPIO_Init+0x14>
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	372c      	adds	r7, #44	; 0x2c
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
 8002eec:	4613      	mov	r3, r2
 8002eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002efc:	e003      	b.n	8002f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f806 	bl	8002f40 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40010400 	.word	0x40010400

08002f40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e26c      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8087 	beq.w	8003082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f74:	4b92      	ldr	r3, [pc, #584]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d00c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f80:	4b8f      	ldr	r3, [pc, #572]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d112      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5e>
 8002f8c:	4b8c      	ldr	r3, [pc, #560]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	4b89      	ldr	r3, [pc, #548]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d06c      	beq.n	8003080 <HAL_RCC_OscConfig+0x12c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d168      	bne.n	8003080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e246      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x76>
 8002fbc:	4b80      	ldr	r3, [pc, #512]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7f      	ldr	r2, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e02e      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x98>
 8002fd2:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7a      	ldr	r2, [pc, #488]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a77      	ldr	r2, [pc, #476]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0xbc>
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a71      	ldr	r2, [pc, #452]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6e      	ldr	r2, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8003010:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6a      	ldr	r2, [pc, #424]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b68      	ldr	r3, [pc, #416]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a67      	ldr	r2, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7ff fc96 	bl	8002960 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7ff fc92 	bl	8002960 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1fa      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0xe4>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff fc82 	bl	8002960 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7ff fc7e 	bl	8002960 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1e6      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x10c>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d063      	beq.n	8003156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308e:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800309a:	4b49      	ldr	r3, [pc, #292]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d11c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x18c>
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x176>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1ba      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4939      	ldr	r1, [pc, #228]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	e03a      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e8:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7ff fc37 	bl	8002960 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f6:	f7ff fc33 	bl	8002960 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e19b      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4927      	ldr	r1, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff fc16 	bl	8002960 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7ff fc12 	bl	8002960 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e17a      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03a      	beq.n	80031d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d019      	beq.n	800319e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7ff fbf6 	bl	8002960 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7ff fbf2 	bl	8002960 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e15a      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003196:	2001      	movs	r0, #1
 8003198:	f000 faa6 	bl	80036e8 <RCC_Delay>
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a4:	f7ff fbdc 	bl	8002960 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031aa:	e00f      	b.n	80031cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ac:	f7ff fbd8 	bl	8002960 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d908      	bls.n	80031cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e140      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	42420000 	.word	0x42420000
 80031c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b9e      	ldr	r3, [pc, #632]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e9      	bne.n	80031ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a6 	beq.w	8003332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b97      	ldr	r3, [pc, #604]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b94      	ldr	r3, [pc, #592]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a93      	ldr	r2, [pc, #588]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b91      	ldr	r3, [pc, #580]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b8b      	ldr	r3, [pc, #556]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a8a      	ldr	r2, [pc, #552]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7ff fb99 	bl	8002960 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7ff fb95 	bl	8002960 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0fd      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	4b81      	ldr	r3, [pc, #516]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x312>
 8003258:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a7a      	ldr	r2, [pc, #488]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e02d      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x334>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6213      	str	r3, [r2, #32]
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a72      	ldr	r2, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6213      	str	r3, [r2, #32]
 8003286:	e01c      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x356>
 8003290:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6213      	str	r3, [r2, #32]
 800329c:	4b6a      	ldr	r3, [pc, #424]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6213      	str	r3, [r2, #32]
 80032a8:	e00b      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a66      	ldr	r2, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6213      	str	r3, [r2, #32]
 80032b6:	4b64      	ldr	r3, [pc, #400]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a63      	ldr	r2, [pc, #396]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d015      	beq.n	80032f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7ff fb49 	bl	8002960 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7ff fb45 	bl	8002960 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0ab      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCC_OscConfig+0x37e>
 80032f4:	e014      	b.n	8003320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7ff fb33 	bl	8002960 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7ff fb2f 	bl	8002960 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e095      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ee      	bne.n	80032fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b48      	ldr	r3, [pc, #288]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a47      	ldr	r2, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8081 	beq.w	800343e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d061      	beq.n	800340c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d146      	bne.n	80033de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <HAL_RCC_OscConfig+0x4fc>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7ff fb03 	bl	8002960 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335e:	f7ff faff 	bl	8002960 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e067      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	4b35      	ldr	r3, [pc, #212]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d108      	bne.n	8003398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	492d      	ldr	r1, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a19      	ldr	r1, [r3, #32]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	430b      	orrs	r3, r1
 80033aa:	4927      	ldr	r1, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b0:	4b27      	ldr	r3, [pc, #156]	; (8003450 <HAL_RCC_OscConfig+0x4fc>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7ff fad3 	bl	8002960 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7ff facf 	bl	8002960 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e037      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x46a>
 80033dc:	e02f      	b.n	800343e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <HAL_RCC_OscConfig+0x4fc>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7ff fabc 	bl	8002960 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7ff fab8 	bl	8002960 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e020      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x498>
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e013      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	429a      	cmp	r2, r3
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
 8003450:	42420060 	.word	0x42420060

08003454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0d0      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	4965      	ldr	r1, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d040      	beq.n	8003574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e073      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06b      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4936      	ldr	r1, [pc, #216]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003544:	f7ff fa0c 	bl	8002960 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7ff fa08 	bl	8002960 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e053      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d210      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 0207 	bic.w	r2, r3, #7
 800358a:	4922      	ldr	r1, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490a      	ldr	r1, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1cc>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1d0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f96a 	bl	80028dc <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
 800361c:	08006e48 	.word	0x08006e48
 8003620:	20000020 	.word	0x20000020
 8003624:	20000024 	.word	0x20000024

08003628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b490      	push	{r4, r7}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003630:	1d3c      	adds	r4, r7, #4
 8003632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003638:	f240 2301 	movw	r3, #513	; 0x201
 800363c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x40>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d003      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x46>
 8003666:	e02d      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800366a:	623b      	str	r3, [r7, #32]
      break;
 800366c:	e02d      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	0c9b      	lsrs	r3, r3, #18
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800367a:	4413      	add	r3, r2
 800367c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003680:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c5b      	lsrs	r3, r3, #17
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800369a:	4413      	add	r3, r2
 800369c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a6:	fb02 f203 	mul.w	r2, r2, r3
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	e004      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	623b      	str	r3, [r7, #32]
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c6:	623b      	str	r3, [r7, #32]
      break;
 80036c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ca:	6a3b      	ldr	r3, [r7, #32]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3728      	adds	r7, #40	; 0x28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc90      	pop	{r4, r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	08006e14 	.word	0x08006e14
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	003d0900 	.word	0x003d0900

080036e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <RCC_Delay+0x34>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <RCC_Delay+0x38>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0a5b      	lsrs	r3, r3, #9
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003704:	bf00      	nop
  }
  while (Delay --);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	60fa      	str	r2, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f9      	bne.n	8003704 <RCC_Delay+0x1c>
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20000020 	.word	0x20000020
 8003720:	10624dd3 	.word	0x10624dd3

08003724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e041      	b.n	80037ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe fed6 	bl	80024fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f000 fb04 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e041      	b.n	8003858 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fe fe6b 	bl	80024c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f000 fab5 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_TIM_PWM_Start+0x24>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e022      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d109      	bne.n	800389e <HAL_TIM_PWM_Start+0x3e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e015      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d109      	bne.n	80038b8 <HAL_TIM_PWM_Start+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e008      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e05e      	b.n	8003990 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x82>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	e013      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	e00b      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	e003      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2201      	movs	r2, #1
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fcac 	bl	8004270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1e      	ldr	r2, [pc, #120]	; (8003998 <HAL_TIM_PWM_Start+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d107      	bne.n	8003932 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_TIM_PWM_Start+0x138>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_TIM_PWM_Start+0xfa>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d009      	beq.n	800395a <HAL_TIM_PWM_Start+0xfa>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_TIM_PWM_Start+0x13c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_TIM_PWM_Start+0xfa>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_TIM_PWM_Start+0x140>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d111      	bne.n	800397e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d010      	beq.n	800398e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	e007      	b.n	800398e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800

080039a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	6839      	ldr	r1, [r7, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fc5a 	bl	8004270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <HAL_TIM_PWM_Stop+0xc4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d117      	bne.n	80039f6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_TIM_PWM_Stop+0x52>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	f240 4344 	movw	r3, #1092	; 0x444
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d107      	bne.n	80039f6 <HAL_TIM_PWM_Stop+0x52>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_TIM_PWM_Stop+0x82>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a1a      	ldr	r2, [r3, #32]
 8003a0c:	f240 4344 	movw	r3, #1092	; 0x444
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d107      	bne.n	8003a26 <HAL_TIM_PWM_Stop+0x82>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_PWM_Stop+0x92>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a34:	e013      	b.n	8003a5e <HAL_TIM_PWM_Stop+0xba>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d104      	bne.n	8003a46 <HAL_TIM_PWM_Stop+0xa2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a44:	e00b      	b.n	8003a5e <HAL_TIM_PWM_Stop+0xba>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d104      	bne.n	8003a56 <HAL_TIM_PWM_Stop+0xb2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a54:	e003      	b.n	8003a5e <HAL_TIM_PWM_Stop+0xba>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40012c00 	.word	0x40012c00

08003a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e0ac      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	f200 809f 	bhi.w	8003bd4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003bd5 	.word	0x08003bd5
 8003aa4:	08003bd5 	.word	0x08003bd5
 8003aa8:	08003bd5 	.word	0x08003bd5
 8003aac:	08003b11 	.word	0x08003b11
 8003ab0:	08003bd5 	.word	0x08003bd5
 8003ab4:	08003bd5 	.word	0x08003bd5
 8003ab8:	08003bd5 	.word	0x08003bd5
 8003abc:	08003b53 	.word	0x08003b53
 8003ac0:	08003bd5 	.word	0x08003bd5
 8003ac4:	08003bd5 	.word	0x08003bd5
 8003ac8:	08003bd5 	.word	0x08003bd5
 8003acc:	08003b93 	.word	0x08003b93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f9ac 	bl	8003e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0208 	orr.w	r2, r2, #8
 8003aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0204 	bic.w	r2, r2, #4
 8003afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	619a      	str	r2, [r3, #24]
      break;
 8003b0e:	e062      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f9f2 	bl	8003f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6999      	ldr	r1, [r3, #24]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	021a      	lsls	r2, r3, #8
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	619a      	str	r2, [r3, #24]
      break;
 8003b50:	e041      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fa3b 	bl	8003fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0208 	orr.w	r2, r2, #8
 8003b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0204 	bic.w	r2, r2, #4
 8003b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69d9      	ldr	r1, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
      break;
 8003b90:	e021      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fa85 	bl	80040a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69d9      	ldr	r1, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	021a      	lsls	r2, r3, #8
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	61da      	str	r2, [r3, #28]
      break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_ConfigClockSource+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0b3      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x180>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c38:	d03e      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0xd0>
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3e:	f200 8087 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	f000 8085 	beq.w	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d87f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c50:	2b70      	cmp	r3, #112	; 0x70
 8003c52:	d01a      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xa2>
 8003c54:	2b70      	cmp	r3, #112	; 0x70
 8003c56:	d87b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c58:	2b60      	cmp	r3, #96	; 0x60
 8003c5a:	d050      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x116>
 8003c5c:	2b60      	cmp	r3, #96	; 0x60
 8003c5e:	d877      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c60:	2b50      	cmp	r3, #80	; 0x50
 8003c62:	d03c      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xf6>
 8003c64:	2b50      	cmp	r3, #80	; 0x50
 8003c66:	d873      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d058      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x136>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d86f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c70:	2b30      	cmp	r3, #48	; 0x30
 8003c72:	d064      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
 8003c74:	2b30      	cmp	r3, #48	; 0x30
 8003c76:	d86b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d060      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d867      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d05a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c88:	e062      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f000 faca 	bl	8004232 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	609a      	str	r2, [r3, #8]
      break;
 8003cb6:	e04e      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f000 fab3 	bl	8004232 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cda:	609a      	str	r2, [r3, #8]
      break;
 8003cdc:	e03b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 fa2a 	bl	8004144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2150      	movs	r1, #80	; 0x50
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa81 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e02b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 fa48 	bl	80041a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2160      	movs	r1, #96	; 0x60
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fa71 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e01b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 fa0a 	bl	8004144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2140      	movs	r1, #64	; 0x40
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa61 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e00b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 fa58 	bl	80041fe <TIM_ITRx_SetConfig>
        break;
 8003d4e:	e002      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <TIM_Base_SetConfig+0xbc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <TIM_Base_SetConfig+0xc0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <TIM_Base_SetConfig+0xbc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <TIM_Base_SetConfig+0xc0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800

08003e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10c      	bne.n	8003eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0308 	bic.w	r3, r3, #8
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00

08003f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0210 	bic.w	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0320 	bic.w	r3, r3, #32
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <TIM_OC2_SetConfig+0xd0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10d      	bne.n	8003f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC2_SetConfig+0xd0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d113      	bne.n	8003fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	40012c00 	.word	0x40012c00

08003fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800401c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <TIM_OC3_SetConfig+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10d      	bne.n	800404e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800404c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <TIM_OC3_SetConfig+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00

080040a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <TIM_OC4_SetConfig+0x98>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d109      	bne.n	800411c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00

08004144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0201 	bic.w	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800416e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f023 030a 	bic.w	r3, r3, #10
 8004180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f023 0210 	bic.w	r2, r3, #16
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	031b      	lsls	r3, r3, #12
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	f043 0307 	orr.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	431a      	orrs	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2201      	movs	r2, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1a      	ldr	r2, [r3, #32]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e046      	b.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d009      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a10      	ldr	r2, [pc, #64]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800

08004374 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b20      	cmp	r3, #32
 8004392:	d17c      	bne.n	800448e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_Transmit+0x2c>
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e075      	b.n	8004490 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Transmit+0x3e>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e06e      	b.n	8004490 <HAL_UART_Transmit+0x11c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c8:	f7fe faca 	bl	8002960 <HAL_GetTick>
 80043cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	88fa      	ldrh	r2, [r7, #6]
 80043d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e2:	d108      	bne.n	80043f6 <HAL_UART_Transmit+0x82>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	e003      	b.n	80043fe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004406:	e02a      	b.n	800445e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2200      	movs	r2, #0
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f8e2 	bl	80045dc <UART_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e036      	b.n	8004490 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004436:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	3302      	adds	r3, #2
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e007      	b.n	8004450 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3301      	adds	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1cf      	bne.n	8004408 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2200      	movs	r2, #0
 8004470:	2140      	movs	r1, #64	; 0x40
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f8b2 	bl	80045dc <UART_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e006      	b.n	8004490 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e000      	b.n	8004490 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800448e:	2302      	movs	r3, #2
  }
}
 8004490:	4618      	mov	r0, r3
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	f040 808c 	bne.w	80045d2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_UART_Receive+0x2e>
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e084      	b.n	80045d4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Receive+0x40>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e07d      	b.n	80045d4 <HAL_UART_Receive+0x13c>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2222      	movs	r2, #34	; 0x22
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f4:	f7fe fa34 	bl	8002960 <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	88fa      	ldrh	r2, [r7, #6]
 8004504:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450e:	d108      	bne.n	8004522 <HAL_UART_Receive+0x8a>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	e003      	b.n	800452a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004532:	e043      	b.n	80045bc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2200      	movs	r2, #0
 800453c:	2120      	movs	r1, #32
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f84c 	bl	80045dc <UART_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e042      	b.n	80045d4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10c      	bne.n	800456e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004560:	b29a      	uxth	r2, r3
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	3302      	adds	r3, #2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e01f      	b.n	80045ae <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d007      	beq.n	8004588 <HAL_UART_Receive+0xf0>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <HAL_UART_Receive+0xfe>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e008      	b.n	80045a8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1b6      	bne.n	8004534 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ec:	e02c      	b.n	8004648 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d028      	beq.n	8004648 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <UART_WaitOnFlagUntilTimeout+0x30>
 80045fc:	f7fe f9b0 	bl	8002960 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	429a      	cmp	r2, r3
 800460a:	d21d      	bcs.n	8004648 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800461a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e00f      	b.n	8004668 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4013      	ands	r3, r2
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	429a      	cmp	r2, r3
 8004664:	d0c3      	beq.n	80045ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <__assert_func>:
 8004670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004672:	4614      	mov	r4, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <__assert_func+0x2c>)
 8004678:	4605      	mov	r5, r0
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68d8      	ldr	r0, [r3, #12]
 800467e:	b14c      	cbz	r4, 8004694 <__assert_func+0x24>
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <__assert_func+0x30>)
 8004682:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004686:	9100      	str	r1, [sp, #0]
 8004688:	462b      	mov	r3, r5
 800468a:	4906      	ldr	r1, [pc, #24]	; (80046a4 <__assert_func+0x34>)
 800468c:	f000 f818 	bl	80046c0 <fiprintf>
 8004690:	f000 fea0 	bl	80053d4 <abort>
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <__assert_func+0x38>)
 8004696:	461c      	mov	r4, r3
 8004698:	e7f3      	b.n	8004682 <__assert_func+0x12>
 800469a:	bf00      	nop
 800469c:	2000002c 	.word	0x2000002c
 80046a0:	08006e58 	.word	0x08006e58
 80046a4:	08006e65 	.word	0x08006e65
 80046a8:	08006e93 	.word	0x08006e93

080046ac <atoi>:
 80046ac:	220a      	movs	r2, #10
 80046ae:	2100      	movs	r1, #0
 80046b0:	f000 bdc6 	b.w	8005240 <strtol>

080046b4 <__errno>:
 80046b4:	4b01      	ldr	r3, [pc, #4]	; (80046bc <__errno+0x8>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	2000002c 	.word	0x2000002c

080046c0 <fiprintf>:
 80046c0:	b40e      	push	{r1, r2, r3}
 80046c2:	b503      	push	{r0, r1, lr}
 80046c4:	4601      	mov	r1, r0
 80046c6:	ab03      	add	r3, sp, #12
 80046c8:	4805      	ldr	r0, [pc, #20]	; (80046e0 <fiprintf+0x20>)
 80046ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	f000 f911 	bl	80048f8 <_vfiprintf_r>
 80046d6:	b002      	add	sp, #8
 80046d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046dc:	b003      	add	sp, #12
 80046de:	4770      	bx	lr
 80046e0:	2000002c 	.word	0x2000002c

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	2600      	movs	r6, #0
 80046e8:	4d0c      	ldr	r5, [pc, #48]	; (800471c <__libc_init_array+0x38>)
 80046ea:	4c0d      	ldr	r4, [pc, #52]	; (8004720 <__libc_init_array+0x3c>)
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	42a6      	cmp	r6, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	f002 faea 	bl	8006ccc <_init>
 80046f8:	2600      	movs	r6, #0
 80046fa:	4d0a      	ldr	r5, [pc, #40]	; (8004724 <__libc_init_array+0x40>)
 80046fc:	4c0a      	ldr	r4, [pc, #40]	; (8004728 <__libc_init_array+0x44>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	42a6      	cmp	r6, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	f855 3b04 	ldr.w	r3, [r5], #4
 800470c:	4798      	blx	r3
 800470e:	3601      	adds	r6, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	f855 3b04 	ldr.w	r3, [r5], #4
 8004716:	4798      	blx	r3
 8004718:	3601      	adds	r6, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	080070e8 	.word	0x080070e8
 8004720:	080070e8 	.word	0x080070e8
 8004724:	080070e8 	.word	0x080070e8
 8004728:	080070ec 	.word	0x080070ec

0800472c <malloc>:
 800472c:	4b02      	ldr	r3, [pc, #8]	; (8004738 <malloc+0xc>)
 800472e:	4601      	mov	r1, r0
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f000 b85f 	b.w	80047f4 <_malloc_r>
 8004736:	bf00      	nop
 8004738:	2000002c 	.word	0x2000002c

0800473c <free>:
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <free+0xc>)
 800473e:	4601      	mov	r1, r0
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f000 b80b 	b.w	800475c <_free_r>
 8004746:	bf00      	nop
 8004748:	2000002c 	.word	0x2000002c

0800474c <memset>:
 800474c:	4603      	mov	r3, r0
 800474e:	4402      	add	r2, r0
 8004750:	4293      	cmp	r3, r2
 8004752:	d100      	bne.n	8004756 <memset+0xa>
 8004754:	4770      	bx	lr
 8004756:	f803 1b01 	strb.w	r1, [r3], #1
 800475a:	e7f9      	b.n	8004750 <memset+0x4>

0800475c <_free_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4605      	mov	r5, r0
 8004760:	2900      	cmp	r1, #0
 8004762:	d043      	beq.n	80047ec <_free_r+0x90>
 8004764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004768:	1f0c      	subs	r4, r1, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	bfb8      	it	lt
 800476e:	18e4      	addlt	r4, r4, r3
 8004770:	f001 f88c 	bl	800588c <__malloc_lock>
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <_free_r+0x94>)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	4610      	mov	r0, r2
 800477a:	b933      	cbnz	r3, 800478a <_free_r+0x2e>
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	6014      	str	r4, [r2, #0]
 8004780:	4628      	mov	r0, r5
 8004782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004786:	f001 b887 	b.w	8005898 <__malloc_unlock>
 800478a:	42a3      	cmp	r3, r4
 800478c:	d90a      	bls.n	80047a4 <_free_r+0x48>
 800478e:	6821      	ldr	r1, [r4, #0]
 8004790:	1862      	adds	r2, r4, r1
 8004792:	4293      	cmp	r3, r2
 8004794:	bf01      	itttt	eq
 8004796:	681a      	ldreq	r2, [r3, #0]
 8004798:	685b      	ldreq	r3, [r3, #4]
 800479a:	1852      	addeq	r2, r2, r1
 800479c:	6022      	streq	r2, [r4, #0]
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	6004      	str	r4, [r0, #0]
 80047a2:	e7ed      	b.n	8004780 <_free_r+0x24>
 80047a4:	461a      	mov	r2, r3
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b10b      	cbz	r3, 80047ae <_free_r+0x52>
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	d9fa      	bls.n	80047a4 <_free_r+0x48>
 80047ae:	6811      	ldr	r1, [r2, #0]
 80047b0:	1850      	adds	r0, r2, r1
 80047b2:	42a0      	cmp	r0, r4
 80047b4:	d10b      	bne.n	80047ce <_free_r+0x72>
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	4401      	add	r1, r0
 80047ba:	1850      	adds	r0, r2, r1
 80047bc:	4283      	cmp	r3, r0
 80047be:	6011      	str	r1, [r2, #0]
 80047c0:	d1de      	bne.n	8004780 <_free_r+0x24>
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4401      	add	r1, r0
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	6053      	str	r3, [r2, #4]
 80047cc:	e7d8      	b.n	8004780 <_free_r+0x24>
 80047ce:	d902      	bls.n	80047d6 <_free_r+0x7a>
 80047d0:	230c      	movs	r3, #12
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	e7d4      	b.n	8004780 <_free_r+0x24>
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	1821      	adds	r1, r4, r0
 80047da:	428b      	cmp	r3, r1
 80047dc:	bf01      	itttt	eq
 80047de:	6819      	ldreq	r1, [r3, #0]
 80047e0:	685b      	ldreq	r3, [r3, #4]
 80047e2:	1809      	addeq	r1, r1, r0
 80047e4:	6021      	streq	r1, [r4, #0]
 80047e6:	6063      	str	r3, [r4, #4]
 80047e8:	6054      	str	r4, [r2, #4]
 80047ea:	e7c9      	b.n	8004780 <_free_r+0x24>
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
 80047ee:	bf00      	nop
 80047f0:	20000120 	.word	0x20000120

080047f4 <_malloc_r>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	1ccd      	adds	r5, r1, #3
 80047f8:	f025 0503 	bic.w	r5, r5, #3
 80047fc:	3508      	adds	r5, #8
 80047fe:	2d0c      	cmp	r5, #12
 8004800:	bf38      	it	cc
 8004802:	250c      	movcc	r5, #12
 8004804:	2d00      	cmp	r5, #0
 8004806:	4606      	mov	r6, r0
 8004808:	db01      	blt.n	800480e <_malloc_r+0x1a>
 800480a:	42a9      	cmp	r1, r5
 800480c:	d903      	bls.n	8004816 <_malloc_r+0x22>
 800480e:	230c      	movs	r3, #12
 8004810:	6033      	str	r3, [r6, #0]
 8004812:	2000      	movs	r0, #0
 8004814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004816:	f001 f839 	bl	800588c <__malloc_lock>
 800481a:	4921      	ldr	r1, [pc, #132]	; (80048a0 <_malloc_r+0xac>)
 800481c:	680a      	ldr	r2, [r1, #0]
 800481e:	4614      	mov	r4, r2
 8004820:	b99c      	cbnz	r4, 800484a <_malloc_r+0x56>
 8004822:	4f20      	ldr	r7, [pc, #128]	; (80048a4 <_malloc_r+0xb0>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	b923      	cbnz	r3, 8004832 <_malloc_r+0x3e>
 8004828:	4621      	mov	r1, r4
 800482a:	4630      	mov	r0, r6
 800482c:	f000 fba0 	bl	8004f70 <_sbrk_r>
 8004830:	6038      	str	r0, [r7, #0]
 8004832:	4629      	mov	r1, r5
 8004834:	4630      	mov	r0, r6
 8004836:	f000 fb9b 	bl	8004f70 <_sbrk_r>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	d123      	bne.n	8004886 <_malloc_r+0x92>
 800483e:	230c      	movs	r3, #12
 8004840:	4630      	mov	r0, r6
 8004842:	6033      	str	r3, [r6, #0]
 8004844:	f001 f828 	bl	8005898 <__malloc_unlock>
 8004848:	e7e3      	b.n	8004812 <_malloc_r+0x1e>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	1b5b      	subs	r3, r3, r5
 800484e:	d417      	bmi.n	8004880 <_malloc_r+0x8c>
 8004850:	2b0b      	cmp	r3, #11
 8004852:	d903      	bls.n	800485c <_malloc_r+0x68>
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	441c      	add	r4, r3
 8004858:	6025      	str	r5, [r4, #0]
 800485a:	e004      	b.n	8004866 <_malloc_r+0x72>
 800485c:	6863      	ldr	r3, [r4, #4]
 800485e:	42a2      	cmp	r2, r4
 8004860:	bf0c      	ite	eq
 8004862:	600b      	streq	r3, [r1, #0]
 8004864:	6053      	strne	r3, [r2, #4]
 8004866:	4630      	mov	r0, r6
 8004868:	f001 f816 	bl	8005898 <__malloc_unlock>
 800486c:	f104 000b 	add.w	r0, r4, #11
 8004870:	1d23      	adds	r3, r4, #4
 8004872:	f020 0007 	bic.w	r0, r0, #7
 8004876:	1ac2      	subs	r2, r0, r3
 8004878:	d0cc      	beq.n	8004814 <_malloc_r+0x20>
 800487a:	1a1b      	subs	r3, r3, r0
 800487c:	50a3      	str	r3, [r4, r2]
 800487e:	e7c9      	b.n	8004814 <_malloc_r+0x20>
 8004880:	4622      	mov	r2, r4
 8004882:	6864      	ldr	r4, [r4, #4]
 8004884:	e7cc      	b.n	8004820 <_malloc_r+0x2c>
 8004886:	1cc4      	adds	r4, r0, #3
 8004888:	f024 0403 	bic.w	r4, r4, #3
 800488c:	42a0      	cmp	r0, r4
 800488e:	d0e3      	beq.n	8004858 <_malloc_r+0x64>
 8004890:	1a21      	subs	r1, r4, r0
 8004892:	4630      	mov	r0, r6
 8004894:	f000 fb6c 	bl	8004f70 <_sbrk_r>
 8004898:	3001      	adds	r0, #1
 800489a:	d1dd      	bne.n	8004858 <_malloc_r+0x64>
 800489c:	e7cf      	b.n	800483e <_malloc_r+0x4a>
 800489e:	bf00      	nop
 80048a0:	20000120 	.word	0x20000120
 80048a4:	20000124 	.word	0x20000124

080048a8 <__sfputc_r>:
 80048a8:	6893      	ldr	r3, [r2, #8]
 80048aa:	b410      	push	{r4}
 80048ac:	3b01      	subs	r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	6093      	str	r3, [r2, #8]
 80048b2:	da07      	bge.n	80048c4 <__sfputc_r+0x1c>
 80048b4:	6994      	ldr	r4, [r2, #24]
 80048b6:	42a3      	cmp	r3, r4
 80048b8:	db01      	blt.n	80048be <__sfputc_r+0x16>
 80048ba:	290a      	cmp	r1, #10
 80048bc:	d102      	bne.n	80048c4 <__sfputc_r+0x1c>
 80048be:	bc10      	pop	{r4}
 80048c0:	f000 bcc8 	b.w	8005254 <__swbuf_r>
 80048c4:	6813      	ldr	r3, [r2, #0]
 80048c6:	1c58      	adds	r0, r3, #1
 80048c8:	6010      	str	r0, [r2, #0]
 80048ca:	7019      	strb	r1, [r3, #0]
 80048cc:	4608      	mov	r0, r1
 80048ce:	bc10      	pop	{r4}
 80048d0:	4770      	bx	lr

080048d2 <__sfputs_r>:
 80048d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d4:	4606      	mov	r6, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	4614      	mov	r4, r2
 80048da:	18d5      	adds	r5, r2, r3
 80048dc:	42ac      	cmp	r4, r5
 80048de:	d101      	bne.n	80048e4 <__sfputs_r+0x12>
 80048e0:	2000      	movs	r0, #0
 80048e2:	e007      	b.n	80048f4 <__sfputs_r+0x22>
 80048e4:	463a      	mov	r2, r7
 80048e6:	4630      	mov	r0, r6
 80048e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ec:	f7ff ffdc 	bl	80048a8 <__sfputc_r>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d1f3      	bne.n	80048dc <__sfputs_r+0xa>
 80048f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048f8 <_vfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	460d      	mov	r5, r1
 80048fe:	4614      	mov	r4, r2
 8004900:	4698      	mov	r8, r3
 8004902:	4606      	mov	r6, r0
 8004904:	b09d      	sub	sp, #116	; 0x74
 8004906:	b118      	cbz	r0, 8004910 <_vfiprintf_r+0x18>
 8004908:	6983      	ldr	r3, [r0, #24]
 800490a:	b90b      	cbnz	r3, 8004910 <_vfiprintf_r+0x18>
 800490c:	f000 fe84 	bl	8005618 <__sinit>
 8004910:	4b89      	ldr	r3, [pc, #548]	; (8004b38 <_vfiprintf_r+0x240>)
 8004912:	429d      	cmp	r5, r3
 8004914:	d11b      	bne.n	800494e <_vfiprintf_r+0x56>
 8004916:	6875      	ldr	r5, [r6, #4]
 8004918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800491a:	07d9      	lsls	r1, r3, #31
 800491c:	d405      	bmi.n	800492a <_vfiprintf_r+0x32>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	059a      	lsls	r2, r3, #22
 8004922:	d402      	bmi.n	800492a <_vfiprintf_r+0x32>
 8004924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004926:	f000 ff15 	bl	8005754 <__retarget_lock_acquire_recursive>
 800492a:	89ab      	ldrh	r3, [r5, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	d501      	bpl.n	8004934 <_vfiprintf_r+0x3c>
 8004930:	692b      	ldr	r3, [r5, #16]
 8004932:	b9eb      	cbnz	r3, 8004970 <_vfiprintf_r+0x78>
 8004934:	4629      	mov	r1, r5
 8004936:	4630      	mov	r0, r6
 8004938:	f000 fcde 	bl	80052f8 <__swsetup_r>
 800493c:	b1c0      	cbz	r0, 8004970 <_vfiprintf_r+0x78>
 800493e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004940:	07dc      	lsls	r4, r3, #31
 8004942:	d50e      	bpl.n	8004962 <_vfiprintf_r+0x6a>
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	b01d      	add	sp, #116	; 0x74
 800494a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494e:	4b7b      	ldr	r3, [pc, #492]	; (8004b3c <_vfiprintf_r+0x244>)
 8004950:	429d      	cmp	r5, r3
 8004952:	d101      	bne.n	8004958 <_vfiprintf_r+0x60>
 8004954:	68b5      	ldr	r5, [r6, #8]
 8004956:	e7df      	b.n	8004918 <_vfiprintf_r+0x20>
 8004958:	4b79      	ldr	r3, [pc, #484]	; (8004b40 <_vfiprintf_r+0x248>)
 800495a:	429d      	cmp	r5, r3
 800495c:	bf08      	it	eq
 800495e:	68f5      	ldreq	r5, [r6, #12]
 8004960:	e7da      	b.n	8004918 <_vfiprintf_r+0x20>
 8004962:	89ab      	ldrh	r3, [r5, #12]
 8004964:	0598      	lsls	r0, r3, #22
 8004966:	d4ed      	bmi.n	8004944 <_vfiprintf_r+0x4c>
 8004968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800496a:	f000 fef4 	bl	8005756 <__retarget_lock_release_recursive>
 800496e:	e7e9      	b.n	8004944 <_vfiprintf_r+0x4c>
 8004970:	2300      	movs	r3, #0
 8004972:	9309      	str	r3, [sp, #36]	; 0x24
 8004974:	2320      	movs	r3, #32
 8004976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800497a:	2330      	movs	r3, #48	; 0x30
 800497c:	f04f 0901 	mov.w	r9, #1
 8004980:	f8cd 800c 	str.w	r8, [sp, #12]
 8004984:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004b44 <_vfiprintf_r+0x24c>
 8004988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800498c:	4623      	mov	r3, r4
 800498e:	469a      	mov	sl, r3
 8004990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004994:	b10a      	cbz	r2, 800499a <_vfiprintf_r+0xa2>
 8004996:	2a25      	cmp	r2, #37	; 0x25
 8004998:	d1f9      	bne.n	800498e <_vfiprintf_r+0x96>
 800499a:	ebba 0b04 	subs.w	fp, sl, r4
 800499e:	d00b      	beq.n	80049b8 <_vfiprintf_r+0xc0>
 80049a0:	465b      	mov	r3, fp
 80049a2:	4622      	mov	r2, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	4630      	mov	r0, r6
 80049a8:	f7ff ff93 	bl	80048d2 <__sfputs_r>
 80049ac:	3001      	adds	r0, #1
 80049ae:	f000 80aa 	beq.w	8004b06 <_vfiprintf_r+0x20e>
 80049b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049b4:	445a      	add	r2, fp
 80049b6:	9209      	str	r2, [sp, #36]	; 0x24
 80049b8:	f89a 3000 	ldrb.w	r3, [sl]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a2 	beq.w	8004b06 <_vfiprintf_r+0x20e>
 80049c2:	2300      	movs	r3, #0
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049cc:	f10a 0a01 	add.w	sl, sl, #1
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	9307      	str	r3, [sp, #28]
 80049d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049d8:	931a      	str	r3, [sp, #104]	; 0x68
 80049da:	4654      	mov	r4, sl
 80049dc:	2205      	movs	r2, #5
 80049de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e2:	4858      	ldr	r0, [pc, #352]	; (8004b44 <_vfiprintf_r+0x24c>)
 80049e4:	f000 ff1c 	bl	8005820 <memchr>
 80049e8:	9a04      	ldr	r2, [sp, #16]
 80049ea:	b9d8      	cbnz	r0, 8004a24 <_vfiprintf_r+0x12c>
 80049ec:	06d1      	lsls	r1, r2, #27
 80049ee:	bf44      	itt	mi
 80049f0:	2320      	movmi	r3, #32
 80049f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049f6:	0713      	lsls	r3, r2, #28
 80049f8:	bf44      	itt	mi
 80049fa:	232b      	movmi	r3, #43	; 0x2b
 80049fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a00:	f89a 3000 	ldrb.w	r3, [sl]
 8004a04:	2b2a      	cmp	r3, #42	; 0x2a
 8004a06:	d015      	beq.n	8004a34 <_vfiprintf_r+0x13c>
 8004a08:	4654      	mov	r4, sl
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f04f 0c0a 	mov.w	ip, #10
 8004a10:	9a07      	ldr	r2, [sp, #28]
 8004a12:	4621      	mov	r1, r4
 8004a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a18:	3b30      	subs	r3, #48	; 0x30
 8004a1a:	2b09      	cmp	r3, #9
 8004a1c:	d94e      	bls.n	8004abc <_vfiprintf_r+0x1c4>
 8004a1e:	b1b0      	cbz	r0, 8004a4e <_vfiprintf_r+0x156>
 8004a20:	9207      	str	r2, [sp, #28]
 8004a22:	e014      	b.n	8004a4e <_vfiprintf_r+0x156>
 8004a24:	eba0 0308 	sub.w	r3, r0, r8
 8004a28:	fa09 f303 	lsl.w	r3, r9, r3
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	46a2      	mov	sl, r4
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	e7d2      	b.n	80049da <_vfiprintf_r+0xe2>
 8004a34:	9b03      	ldr	r3, [sp, #12]
 8004a36:	1d19      	adds	r1, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	9103      	str	r1, [sp, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bfbb      	ittet	lt
 8004a40:	425b      	neglt	r3, r3
 8004a42:	f042 0202 	orrlt.w	r2, r2, #2
 8004a46:	9307      	strge	r3, [sp, #28]
 8004a48:	9307      	strlt	r3, [sp, #28]
 8004a4a:	bfb8      	it	lt
 8004a4c:	9204      	strlt	r2, [sp, #16]
 8004a4e:	7823      	ldrb	r3, [r4, #0]
 8004a50:	2b2e      	cmp	r3, #46	; 0x2e
 8004a52:	d10c      	bne.n	8004a6e <_vfiprintf_r+0x176>
 8004a54:	7863      	ldrb	r3, [r4, #1]
 8004a56:	2b2a      	cmp	r3, #42	; 0x2a
 8004a58:	d135      	bne.n	8004ac6 <_vfiprintf_r+0x1ce>
 8004a5a:	9b03      	ldr	r3, [sp, #12]
 8004a5c:	3402      	adds	r4, #2
 8004a5e:	1d1a      	adds	r2, r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	9203      	str	r2, [sp, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bfb8      	it	lt
 8004a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b54 <_vfiprintf_r+0x25c>
 8004a72:	2203      	movs	r2, #3
 8004a74:	4650      	mov	r0, sl
 8004a76:	7821      	ldrb	r1, [r4, #0]
 8004a78:	f000 fed2 	bl	8005820 <memchr>
 8004a7c:	b140      	cbz	r0, 8004a90 <_vfiprintf_r+0x198>
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	eba0 000a 	sub.w	r0, r0, sl
 8004a84:	fa03 f000 	lsl.w	r0, r3, r0
 8004a88:	9b04      	ldr	r3, [sp, #16]
 8004a8a:	3401      	adds	r4, #1
 8004a8c:	4303      	orrs	r3, r0
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a94:	2206      	movs	r2, #6
 8004a96:	482c      	ldr	r0, [pc, #176]	; (8004b48 <_vfiprintf_r+0x250>)
 8004a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a9c:	f000 fec0 	bl	8005820 <memchr>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d03f      	beq.n	8004b24 <_vfiprintf_r+0x22c>
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <_vfiprintf_r+0x254>)
 8004aa6:	bb1b      	cbnz	r3, 8004af0 <_vfiprintf_r+0x1f8>
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	3307      	adds	r3, #7
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	9303      	str	r3, [sp, #12]
 8004ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab6:	443b      	add	r3, r7
 8004ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aba:	e767      	b.n	800498c <_vfiprintf_r+0x94>
 8004abc:	460c      	mov	r4, r1
 8004abe:	2001      	movs	r0, #1
 8004ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ac4:	e7a5      	b.n	8004a12 <_vfiprintf_r+0x11a>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f04f 0c0a 	mov.w	ip, #10
 8004acc:	4619      	mov	r1, r3
 8004ace:	3401      	adds	r4, #1
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ad8:	3a30      	subs	r2, #48	; 0x30
 8004ada:	2a09      	cmp	r2, #9
 8004adc:	d903      	bls.n	8004ae6 <_vfiprintf_r+0x1ee>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0c5      	beq.n	8004a6e <_vfiprintf_r+0x176>
 8004ae2:	9105      	str	r1, [sp, #20]
 8004ae4:	e7c3      	b.n	8004a6e <_vfiprintf_r+0x176>
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	2301      	movs	r3, #1
 8004aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aee:	e7f0      	b.n	8004ad2 <_vfiprintf_r+0x1da>
 8004af0:	ab03      	add	r3, sp, #12
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	462a      	mov	r2, r5
 8004af6:	4630      	mov	r0, r6
 8004af8:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <_vfiprintf_r+0x258>)
 8004afa:	a904      	add	r1, sp, #16
 8004afc:	f3af 8000 	nop.w
 8004b00:	4607      	mov	r7, r0
 8004b02:	1c78      	adds	r0, r7, #1
 8004b04:	d1d6      	bne.n	8004ab4 <_vfiprintf_r+0x1bc>
 8004b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b08:	07d9      	lsls	r1, r3, #31
 8004b0a:	d405      	bmi.n	8004b18 <_vfiprintf_r+0x220>
 8004b0c:	89ab      	ldrh	r3, [r5, #12]
 8004b0e:	059a      	lsls	r2, r3, #22
 8004b10:	d402      	bmi.n	8004b18 <_vfiprintf_r+0x220>
 8004b12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b14:	f000 fe1f 	bl	8005756 <__retarget_lock_release_recursive>
 8004b18:	89ab      	ldrh	r3, [r5, #12]
 8004b1a:	065b      	lsls	r3, r3, #25
 8004b1c:	f53f af12 	bmi.w	8004944 <_vfiprintf_r+0x4c>
 8004b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b22:	e711      	b.n	8004948 <_vfiprintf_r+0x50>
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <_vfiprintf_r+0x258>)
 8004b2e:	a904      	add	r1, sp, #16
 8004b30:	f000 f882 	bl	8004c38 <_printf_i>
 8004b34:	e7e4      	b.n	8004b00 <_vfiprintf_r+0x208>
 8004b36:	bf00      	nop
 8004b38:	08007064 	.word	0x08007064
 8004b3c:	08007084 	.word	0x08007084
 8004b40:	08007044 	.word	0x08007044
 8004b44:	08006e98 	.word	0x08006e98
 8004b48:	08006ea2 	.word	0x08006ea2
 8004b4c:	00000000 	.word	0x00000000
 8004b50:	080048d3 	.word	0x080048d3
 8004b54:	08006e9e 	.word	0x08006e9e

08004b58 <_printf_common>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	4616      	mov	r6, r2
 8004b5e:	4699      	mov	r9, r3
 8004b60:	688a      	ldr	r2, [r1, #8]
 8004b62:	690b      	ldr	r3, [r1, #16]
 8004b64:	4607      	mov	r7, r0
 8004b66:	4293      	cmp	r3, r2
 8004b68:	bfb8      	it	lt
 8004b6a:	4613      	movlt	r3, r2
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b72:	460c      	mov	r4, r1
 8004b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b78:	b10a      	cbz	r2, 8004b7e <_printf_common+0x26>
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	0699      	lsls	r1, r3, #26
 8004b82:	bf42      	ittt	mi
 8004b84:	6833      	ldrmi	r3, [r6, #0]
 8004b86:	3302      	addmi	r3, #2
 8004b88:	6033      	strmi	r3, [r6, #0]
 8004b8a:	6825      	ldr	r5, [r4, #0]
 8004b8c:	f015 0506 	ands.w	r5, r5, #6
 8004b90:	d106      	bne.n	8004ba0 <_printf_common+0x48>
 8004b92:	f104 0a19 	add.w	sl, r4, #25
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	6832      	ldr	r2, [r6, #0]
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	dc28      	bgt.n	8004bf2 <_printf_common+0x9a>
 8004ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ba4:	1e13      	subs	r3, r2, #0
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	bf18      	it	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	0692      	lsls	r2, r2, #26
 8004bae:	d42d      	bmi.n	8004c0c <_printf_common+0xb4>
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d020      	beq.n	8004c00 <_printf_common+0xa8>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	68e5      	ldr	r5, [r4, #12]
 8004bc2:	f003 0306 	and.w	r3, r3, #6
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	bf18      	it	ne
 8004bca:	2500      	movne	r5, #0
 8004bcc:	6832      	ldr	r2, [r6, #0]
 8004bce:	f04f 0600 	mov.w	r6, #0
 8004bd2:	68a3      	ldr	r3, [r4, #8]
 8004bd4:	bf08      	it	eq
 8004bd6:	1aad      	subeq	r5, r5, r2
 8004bd8:	6922      	ldr	r2, [r4, #16]
 8004bda:	bf08      	it	eq
 8004bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bfc4      	itt	gt
 8004be4:	1a9b      	subgt	r3, r3, r2
 8004be6:	18ed      	addgt	r5, r5, r3
 8004be8:	341a      	adds	r4, #26
 8004bea:	42b5      	cmp	r5, r6
 8004bec:	d11a      	bne.n	8004c24 <_printf_common+0xcc>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e008      	b.n	8004c04 <_printf_common+0xac>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	47c0      	blx	r8
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d103      	bne.n	8004c08 <_printf_common+0xb0>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c08:	3501      	adds	r5, #1
 8004c0a:	e7c4      	b.n	8004b96 <_printf_common+0x3e>
 8004c0c:	2030      	movs	r0, #48	; 0x30
 8004c0e:	18e1      	adds	r1, r4, r3
 8004c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c1a:	4422      	add	r2, r4
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c22:	e7c5      	b.n	8004bb0 <_printf_common+0x58>
 8004c24:	2301      	movs	r3, #1
 8004c26:	4622      	mov	r2, r4
 8004c28:	4649      	mov	r1, r9
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	47c0      	blx	r8
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d0e6      	beq.n	8004c00 <_printf_common+0xa8>
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7d9      	b.n	8004bea <_printf_common+0x92>
	...

08004c38 <_printf_i>:
 8004c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	7e27      	ldrb	r7, [r4, #24]
 8004c40:	4691      	mov	r9, r2
 8004c42:	2f78      	cmp	r7, #120	; 0x78
 8004c44:	4680      	mov	r8, r0
 8004c46:	469a      	mov	sl, r3
 8004c48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c4e:	d807      	bhi.n	8004c60 <_printf_i+0x28>
 8004c50:	2f62      	cmp	r7, #98	; 0x62
 8004c52:	d80a      	bhi.n	8004c6a <_printf_i+0x32>
 8004c54:	2f00      	cmp	r7, #0
 8004c56:	f000 80d9 	beq.w	8004e0c <_printf_i+0x1d4>
 8004c5a:	2f58      	cmp	r7, #88	; 0x58
 8004c5c:	f000 80a4 	beq.w	8004da8 <_printf_i+0x170>
 8004c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c68:	e03a      	b.n	8004ce0 <_printf_i+0xa8>
 8004c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c6e:	2b15      	cmp	r3, #21
 8004c70:	d8f6      	bhi.n	8004c60 <_printf_i+0x28>
 8004c72:	a001      	add	r0, pc, #4	; (adr r0, 8004c78 <_printf_i+0x40>)
 8004c74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c78:	08004cd1 	.word	0x08004cd1
 8004c7c:	08004ce5 	.word	0x08004ce5
 8004c80:	08004c61 	.word	0x08004c61
 8004c84:	08004c61 	.word	0x08004c61
 8004c88:	08004c61 	.word	0x08004c61
 8004c8c:	08004c61 	.word	0x08004c61
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004c61 	.word	0x08004c61
 8004c98:	08004c61 	.word	0x08004c61
 8004c9c:	08004c61 	.word	0x08004c61
 8004ca0:	08004c61 	.word	0x08004c61
 8004ca4:	08004df3 	.word	0x08004df3
 8004ca8:	08004d15 	.word	0x08004d15
 8004cac:	08004dd5 	.word	0x08004dd5
 8004cb0:	08004c61 	.word	0x08004c61
 8004cb4:	08004c61 	.word	0x08004c61
 8004cb8:	08004e15 	.word	0x08004e15
 8004cbc:	08004c61 	.word	0x08004c61
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004c61 	.word	0x08004c61
 8004cc8:	08004c61 	.word	0x08004c61
 8004ccc:	08004ddd 	.word	0x08004ddd
 8004cd0:	680b      	ldr	r3, [r1, #0]
 8004cd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cd6:	1d1a      	adds	r2, r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	600a      	str	r2, [r1, #0]
 8004cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0a4      	b.n	8004e2e <_printf_i+0x1f6>
 8004ce4:	6825      	ldr	r5, [r4, #0]
 8004ce6:	6808      	ldr	r0, [r1, #0]
 8004ce8:	062e      	lsls	r6, r5, #24
 8004cea:	f100 0304 	add.w	r3, r0, #4
 8004cee:	d50a      	bpl.n	8004d06 <_printf_i+0xce>
 8004cf0:	6805      	ldr	r5, [r0, #0]
 8004cf2:	600b      	str	r3, [r1, #0]
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	da03      	bge.n	8004d00 <_printf_i+0xc8>
 8004cf8:	232d      	movs	r3, #45	; 0x2d
 8004cfa:	426d      	negs	r5, r5
 8004cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d00:	230a      	movs	r3, #10
 8004d02:	485e      	ldr	r0, [pc, #376]	; (8004e7c <_printf_i+0x244>)
 8004d04:	e019      	b.n	8004d3a <_printf_i+0x102>
 8004d06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d0a:	6805      	ldr	r5, [r0, #0]
 8004d0c:	600b      	str	r3, [r1, #0]
 8004d0e:	bf18      	it	ne
 8004d10:	b22d      	sxthne	r5, r5
 8004d12:	e7ef      	b.n	8004cf4 <_printf_i+0xbc>
 8004d14:	680b      	ldr	r3, [r1, #0]
 8004d16:	6825      	ldr	r5, [r4, #0]
 8004d18:	1d18      	adds	r0, r3, #4
 8004d1a:	6008      	str	r0, [r1, #0]
 8004d1c:	0628      	lsls	r0, r5, #24
 8004d1e:	d501      	bpl.n	8004d24 <_printf_i+0xec>
 8004d20:	681d      	ldr	r5, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <_printf_i+0xf2>
 8004d24:	0669      	lsls	r1, r5, #25
 8004d26:	d5fb      	bpl.n	8004d20 <_printf_i+0xe8>
 8004d28:	881d      	ldrh	r5, [r3, #0]
 8004d2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2308      	moveq	r3, #8
 8004d30:	230a      	movne	r3, #10
 8004d32:	4852      	ldr	r0, [pc, #328]	; (8004e7c <_printf_i+0x244>)
 8004d34:	2100      	movs	r1, #0
 8004d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d3a:	6866      	ldr	r6, [r4, #4]
 8004d3c:	2e00      	cmp	r6, #0
 8004d3e:	bfa8      	it	ge
 8004d40:	6821      	ldrge	r1, [r4, #0]
 8004d42:	60a6      	str	r6, [r4, #8]
 8004d44:	bfa4      	itt	ge
 8004d46:	f021 0104 	bicge.w	r1, r1, #4
 8004d4a:	6021      	strge	r1, [r4, #0]
 8004d4c:	b90d      	cbnz	r5, 8004d52 <_printf_i+0x11a>
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	d04d      	beq.n	8004dee <_printf_i+0x1b6>
 8004d52:	4616      	mov	r6, r2
 8004d54:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d58:	fb03 5711 	mls	r7, r3, r1, r5
 8004d5c:	5dc7      	ldrb	r7, [r0, r7]
 8004d5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d62:	462f      	mov	r7, r5
 8004d64:	42bb      	cmp	r3, r7
 8004d66:	460d      	mov	r5, r1
 8004d68:	d9f4      	bls.n	8004d54 <_printf_i+0x11c>
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d10b      	bne.n	8004d86 <_printf_i+0x14e>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	07df      	lsls	r7, r3, #31
 8004d72:	d508      	bpl.n	8004d86 <_printf_i+0x14e>
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	6861      	ldr	r1, [r4, #4]
 8004d78:	4299      	cmp	r1, r3
 8004d7a:	bfde      	ittt	le
 8004d7c:	2330      	movle	r3, #48	; 0x30
 8004d7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d86:	1b92      	subs	r2, r2, r6
 8004d88:	6122      	str	r2, [r4, #16]
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4640      	mov	r0, r8
 8004d90:	f8cd a000 	str.w	sl, [sp]
 8004d94:	aa03      	add	r2, sp, #12
 8004d96:	f7ff fedf 	bl	8004b58 <_printf_common>
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d14c      	bne.n	8004e38 <_printf_i+0x200>
 8004d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004da2:	b004      	add	sp, #16
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	4834      	ldr	r0, [pc, #208]	; (8004e7c <_printf_i+0x244>)
 8004daa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dae:	680e      	ldr	r6, [r1, #0]
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004db6:	061f      	lsls	r7, r3, #24
 8004db8:	600e      	str	r6, [r1, #0]
 8004dba:	d514      	bpl.n	8004de6 <_printf_i+0x1ae>
 8004dbc:	07d9      	lsls	r1, r3, #31
 8004dbe:	bf44      	itt	mi
 8004dc0:	f043 0320 	orrmi.w	r3, r3, #32
 8004dc4:	6023      	strmi	r3, [r4, #0]
 8004dc6:	b91d      	cbnz	r5, 8004dd0 <_printf_i+0x198>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	f023 0320 	bic.w	r3, r3, #32
 8004dce:	6023      	str	r3, [r4, #0]
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	e7af      	b.n	8004d34 <_printf_i+0xfc>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	f043 0320 	orr.w	r3, r3, #32
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	2378      	movs	r3, #120	; 0x78
 8004dde:	4828      	ldr	r0, [pc, #160]	; (8004e80 <_printf_i+0x248>)
 8004de0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004de4:	e7e3      	b.n	8004dae <_printf_i+0x176>
 8004de6:	065e      	lsls	r6, r3, #25
 8004de8:	bf48      	it	mi
 8004dea:	b2ad      	uxthmi	r5, r5
 8004dec:	e7e6      	b.n	8004dbc <_printf_i+0x184>
 8004dee:	4616      	mov	r6, r2
 8004df0:	e7bb      	b.n	8004d6a <_printf_i+0x132>
 8004df2:	680b      	ldr	r3, [r1, #0]
 8004df4:	6826      	ldr	r6, [r4, #0]
 8004df6:	1d1d      	adds	r5, r3, #4
 8004df8:	6960      	ldr	r0, [r4, #20]
 8004dfa:	600d      	str	r5, [r1, #0]
 8004dfc:	0635      	lsls	r5, r6, #24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	d501      	bpl.n	8004e06 <_printf_i+0x1ce>
 8004e02:	6018      	str	r0, [r3, #0]
 8004e04:	e002      	b.n	8004e0c <_printf_i+0x1d4>
 8004e06:	0671      	lsls	r1, r6, #25
 8004e08:	d5fb      	bpl.n	8004e02 <_printf_i+0x1ca>
 8004e0a:	8018      	strh	r0, [r3, #0]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4616      	mov	r6, r2
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	e7ba      	b.n	8004d8a <_printf_i+0x152>
 8004e14:	680b      	ldr	r3, [r1, #0]
 8004e16:	1d1a      	adds	r2, r3, #4
 8004e18:	600a      	str	r2, [r1, #0]
 8004e1a:	681e      	ldr	r6, [r3, #0]
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4630      	mov	r0, r6
 8004e20:	6862      	ldr	r2, [r4, #4]
 8004e22:	f000 fcfd 	bl	8005820 <memchr>
 8004e26:	b108      	cbz	r0, 8004e2c <_printf_i+0x1f4>
 8004e28:	1b80      	subs	r0, r0, r6
 8004e2a:	6060      	str	r0, [r4, #4]
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	2300      	movs	r3, #0
 8004e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e36:	e7a8      	b.n	8004d8a <_printf_i+0x152>
 8004e38:	4632      	mov	r2, r6
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	47d0      	blx	sl
 8004e42:	3001      	adds	r0, #1
 8004e44:	d0ab      	beq.n	8004d9e <_printf_i+0x166>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	079b      	lsls	r3, r3, #30
 8004e4a:	d413      	bmi.n	8004e74 <_printf_i+0x23c>
 8004e4c:	68e0      	ldr	r0, [r4, #12]
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	4298      	cmp	r0, r3
 8004e52:	bfb8      	it	lt
 8004e54:	4618      	movlt	r0, r3
 8004e56:	e7a4      	b.n	8004da2 <_printf_i+0x16a>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4632      	mov	r2, r6
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	4640      	mov	r0, r8
 8004e60:	47d0      	blx	sl
 8004e62:	3001      	adds	r0, #1
 8004e64:	d09b      	beq.n	8004d9e <_printf_i+0x166>
 8004e66:	3501      	adds	r5, #1
 8004e68:	68e3      	ldr	r3, [r4, #12]
 8004e6a:	9903      	ldr	r1, [sp, #12]
 8004e6c:	1a5b      	subs	r3, r3, r1
 8004e6e:	42ab      	cmp	r3, r5
 8004e70:	dcf2      	bgt.n	8004e58 <_printf_i+0x220>
 8004e72:	e7eb      	b.n	8004e4c <_printf_i+0x214>
 8004e74:	2500      	movs	r5, #0
 8004e76:	f104 0619 	add.w	r6, r4, #25
 8004e7a:	e7f5      	b.n	8004e68 <_printf_i+0x230>
 8004e7c:	08006ea9 	.word	0x08006ea9
 8004e80:	08006eba 	.word	0x08006eba

08004e84 <_puts_r>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	460e      	mov	r6, r1
 8004e88:	4605      	mov	r5, r0
 8004e8a:	b118      	cbz	r0, 8004e94 <_puts_r+0x10>
 8004e8c:	6983      	ldr	r3, [r0, #24]
 8004e8e:	b90b      	cbnz	r3, 8004e94 <_puts_r+0x10>
 8004e90:	f000 fbc2 	bl	8005618 <__sinit>
 8004e94:	69ab      	ldr	r3, [r5, #24]
 8004e96:	68ac      	ldr	r4, [r5, #8]
 8004e98:	b913      	cbnz	r3, 8004ea0 <_puts_r+0x1c>
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 fbbc 	bl	8005618 <__sinit>
 8004ea0:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <_puts_r+0xd0>)
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d120      	bne.n	8004ee8 <_puts_r+0x64>
 8004ea6:	686c      	ldr	r4, [r5, #4]
 8004ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eaa:	07db      	lsls	r3, r3, #31
 8004eac:	d405      	bmi.n	8004eba <_puts_r+0x36>
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	0598      	lsls	r0, r3, #22
 8004eb2:	d402      	bmi.n	8004eba <_puts_r+0x36>
 8004eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eb6:	f000 fc4d 	bl	8005754 <__retarget_lock_acquire_recursive>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	0719      	lsls	r1, r3, #28
 8004ebe:	d51d      	bpl.n	8004efc <_puts_r+0x78>
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	b1db      	cbz	r3, 8004efc <_puts_r+0x78>
 8004ec4:	3e01      	subs	r6, #1
 8004ec6:	68a3      	ldr	r3, [r4, #8]
 8004ec8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	bb39      	cbnz	r1, 8004f22 <_puts_r+0x9e>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	da38      	bge.n	8004f48 <_puts_r+0xc4>
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	210a      	movs	r1, #10
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f9ba 	bl	8005254 <__swbuf_r>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d011      	beq.n	8004f08 <_puts_r+0x84>
 8004ee4:	250a      	movs	r5, #10
 8004ee6:	e011      	b.n	8004f0c <_puts_r+0x88>
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <_puts_r+0xd4>)
 8004eea:	429c      	cmp	r4, r3
 8004eec:	d101      	bne.n	8004ef2 <_puts_r+0x6e>
 8004eee:	68ac      	ldr	r4, [r5, #8]
 8004ef0:	e7da      	b.n	8004ea8 <_puts_r+0x24>
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <_puts_r+0xd8>)
 8004ef4:	429c      	cmp	r4, r3
 8004ef6:	bf08      	it	eq
 8004ef8:	68ec      	ldreq	r4, [r5, #12]
 8004efa:	e7d5      	b.n	8004ea8 <_puts_r+0x24>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 f9fa 	bl	80052f8 <__swsetup_r>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d0dd      	beq.n	8004ec4 <_puts_r+0x40>
 8004f08:	f04f 35ff 	mov.w	r5, #4294967295
 8004f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0e:	07da      	lsls	r2, r3, #31
 8004f10:	d405      	bmi.n	8004f1e <_puts_r+0x9a>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	059b      	lsls	r3, r3, #22
 8004f16:	d402      	bmi.n	8004f1e <_puts_r+0x9a>
 8004f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1a:	f000 fc1c 	bl	8005756 <__retarget_lock_release_recursive>
 8004f1e:	4628      	mov	r0, r5
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	da04      	bge.n	8004f30 <_puts_r+0xac>
 8004f26:	69a2      	ldr	r2, [r4, #24]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	dc06      	bgt.n	8004f3a <_puts_r+0xb6>
 8004f2c:	290a      	cmp	r1, #10
 8004f2e:	d004      	beq.n	8004f3a <_puts_r+0xb6>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	6022      	str	r2, [r4, #0]
 8004f36:	7019      	strb	r1, [r3, #0]
 8004f38:	e7c5      	b.n	8004ec6 <_puts_r+0x42>
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f000 f989 	bl	8005254 <__swbuf_r>
 8004f42:	3001      	adds	r0, #1
 8004f44:	d1bf      	bne.n	8004ec6 <_puts_r+0x42>
 8004f46:	e7df      	b.n	8004f08 <_puts_r+0x84>
 8004f48:	250a      	movs	r5, #10
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	6022      	str	r2, [r4, #0]
 8004f50:	701d      	strb	r5, [r3, #0]
 8004f52:	e7db      	b.n	8004f0c <_puts_r+0x88>
 8004f54:	08007064 	.word	0x08007064
 8004f58:	08007084 	.word	0x08007084
 8004f5c:	08007044 	.word	0x08007044

08004f60 <puts>:
 8004f60:	4b02      	ldr	r3, [pc, #8]	; (8004f6c <puts+0xc>)
 8004f62:	4601      	mov	r1, r0
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	f7ff bf8d 	b.w	8004e84 <_puts_r>
 8004f6a:	bf00      	nop
 8004f6c:	2000002c 	.word	0x2000002c

08004f70 <_sbrk_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	2300      	movs	r3, #0
 8004f74:	4d05      	ldr	r5, [pc, #20]	; (8004f8c <_sbrk_r+0x1c>)
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fd fbe2 	bl	8002744 <_sbrk>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_sbrk_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_sbrk_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	20000258 	.word	0x20000258

08004f90 <siprintf>:
 8004f90:	b40e      	push	{r1, r2, r3}
 8004f92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f96:	b500      	push	{lr}
 8004f98:	b09c      	sub	sp, #112	; 0x70
 8004f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f9c:	9002      	str	r0, [sp, #8]
 8004f9e:	9006      	str	r0, [sp, #24]
 8004fa0:	9107      	str	r1, [sp, #28]
 8004fa2:	9104      	str	r1, [sp, #16]
 8004fa4:	4808      	ldr	r0, [pc, #32]	; (8004fc8 <siprintf+0x38>)
 8004fa6:	4909      	ldr	r1, [pc, #36]	; (8004fcc <siprintf+0x3c>)
 8004fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fac:	9105      	str	r1, [sp, #20]
 8004fae:	6800      	ldr	r0, [r0, #0]
 8004fb0:	a902      	add	r1, sp, #8
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	f000 fcf8 	bl	80059a8 <_svfiprintf_r>
 8004fb8:	2200      	movs	r2, #0
 8004fba:	9b02      	ldr	r3, [sp, #8]
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	b01c      	add	sp, #112	; 0x70
 8004fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fc4:	b003      	add	sp, #12
 8004fc6:	4770      	bx	lr
 8004fc8:	2000002c 	.word	0x2000002c
 8004fcc:	ffff0208 	.word	0xffff0208

08004fd0 <strcat>:
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	7814      	ldrb	r4, [r2, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	3201      	adds	r2, #1
 8004fda:	2c00      	cmp	r4, #0
 8004fdc:	d1fa      	bne.n	8004fd4 <strcat+0x4>
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fe4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	d1f9      	bne.n	8004fe0 <strcat+0x10>
 8004fec:	bd10      	pop	{r4, pc}
	...

08004ff0 <strdup>:
 8004ff0:	4b02      	ldr	r3, [pc, #8]	; (8004ffc <strdup+0xc>)
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f000 b803 	b.w	8005000 <_strdup_r>
 8004ffa:	bf00      	nop
 8004ffc:	2000002c 	.word	0x2000002c

08005000 <_strdup_r>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	460d      	mov	r5, r1
 8005008:	f7fb f8a2 	bl	8000150 <strlen>
 800500c:	1c46      	adds	r6, r0, #1
 800500e:	4631      	mov	r1, r6
 8005010:	4620      	mov	r0, r4
 8005012:	f7ff fbef 	bl	80047f4 <_malloc_r>
 8005016:	4604      	mov	r4, r0
 8005018:	b118      	cbz	r0, 8005022 <_strdup_r+0x22>
 800501a:	4632      	mov	r2, r6
 800501c:	4629      	mov	r1, r5
 800501e:	f000 fc0d 	bl	800583c <memcpy>
 8005022:	4620      	mov	r0, r4
 8005024:	bd70      	pop	{r4, r5, r6, pc}

08005026 <strrchr>:
 8005026:	b538      	push	{r3, r4, r5, lr}
 8005028:	4603      	mov	r3, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b969      	cbnz	r1, 800504a <strrchr+0x24>
 800502e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005032:	f000 be40 	b.w	8005cb6 <strchr>
 8005036:	4605      	mov	r5, r0
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	4621      	mov	r1, r4
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fe3a 	bl	8005cb6 <strchr>
 8005042:	2800      	cmp	r0, #0
 8005044:	d1f7      	bne.n	8005036 <strrchr+0x10>
 8005046:	4628      	mov	r0, r5
 8005048:	bd38      	pop	{r3, r4, r5, pc}
 800504a:	2500      	movs	r5, #0
 800504c:	e7f5      	b.n	800503a <strrchr+0x14>

0800504e <strstr>:
 800504e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005050:	780c      	ldrb	r4, [r1, #0]
 8005052:	b164      	cbz	r4, 800506e <strstr+0x20>
 8005054:	4603      	mov	r3, r0
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	1c5e      	adds	r6, r3, #1
 800505c:	b90a      	cbnz	r2, 8005062 <strstr+0x14>
 800505e:	4610      	mov	r0, r2
 8005060:	e005      	b.n	800506e <strstr+0x20>
 8005062:	4294      	cmp	r4, r2
 8005064:	d108      	bne.n	8005078 <strstr+0x2a>
 8005066:	460d      	mov	r5, r1
 8005068:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800506c:	b902      	cbnz	r2, 8005070 <strstr+0x22>
 800506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005070:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005074:	4297      	cmp	r7, r2
 8005076:	d0f7      	beq.n	8005068 <strstr+0x1a>
 8005078:	4633      	mov	r3, r6
 800507a:	e7ec      	b.n	8005056 <strstr+0x8>

0800507c <strtok>:
 800507c:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <strtok+0x5c>)
 800507e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	681f      	ldr	r7, [r3, #0]
 8005084:	4605      	mov	r5, r0
 8005086:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005088:	460e      	mov	r6, r1
 800508a:	b9ec      	cbnz	r4, 80050c8 <strtok+0x4c>
 800508c:	2050      	movs	r0, #80	; 0x50
 800508e:	f7ff fb4d 	bl	800472c <malloc>
 8005092:	4602      	mov	r2, r0
 8005094:	65b8      	str	r0, [r7, #88]	; 0x58
 8005096:	b920      	cbnz	r0, 80050a2 <strtok+0x26>
 8005098:	2157      	movs	r1, #87	; 0x57
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <strtok+0x60>)
 800509c:	4810      	ldr	r0, [pc, #64]	; (80050e0 <strtok+0x64>)
 800509e:	f7ff fae7 	bl	8004670 <__assert_func>
 80050a2:	e9c0 4400 	strd	r4, r4, [r0]
 80050a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80050aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80050ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80050b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80050b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80050ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80050be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80050c2:	6184      	str	r4, [r0, #24]
 80050c4:	7704      	strb	r4, [r0, #28]
 80050c6:	6244      	str	r4, [r0, #36]	; 0x24
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ce:	2301      	movs	r3, #1
 80050d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	f000 b806 	b.w	80050e4 <__strtok_r>
 80050d8:	2000002c 	.word	0x2000002c
 80050dc:	08006ecb 	.word	0x08006ecb
 80050e0:	08006ee2 	.word	0x08006ee2

080050e4 <__strtok_r>:
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	b908      	cbnz	r0, 80050ec <__strtok_r+0x8>
 80050e8:	6810      	ldr	r0, [r2, #0]
 80050ea:	b188      	cbz	r0, 8005110 <__strtok_r+0x2c>
 80050ec:	4604      	mov	r4, r0
 80050ee:	460f      	mov	r7, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80050f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80050fa:	b91e      	cbnz	r6, 8005104 <__strtok_r+0x20>
 80050fc:	b965      	cbnz	r5, 8005118 <__strtok_r+0x34>
 80050fe:	4628      	mov	r0, r5
 8005100:	6015      	str	r5, [r2, #0]
 8005102:	e005      	b.n	8005110 <__strtok_r+0x2c>
 8005104:	42b5      	cmp	r5, r6
 8005106:	d1f6      	bne.n	80050f6 <__strtok_r+0x12>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <__strtok_r+0xa>
 800510c:	6014      	str	r4, [r2, #0]
 800510e:	7003      	strb	r3, [r0, #0]
 8005110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005112:	461c      	mov	r4, r3
 8005114:	e00c      	b.n	8005130 <__strtok_r+0x4c>
 8005116:	b915      	cbnz	r5, 800511e <__strtok_r+0x3a>
 8005118:	460e      	mov	r6, r1
 800511a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800511e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005122:	42ab      	cmp	r3, r5
 8005124:	d1f7      	bne.n	8005116 <__strtok_r+0x32>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f3      	beq.n	8005112 <__strtok_r+0x2e>
 800512a:	2300      	movs	r3, #0
 800512c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005130:	6014      	str	r4, [r2, #0]
 8005132:	e7ed      	b.n	8005110 <__strtok_r+0x2c>

08005134 <_strtol_l.isra.0>:
 8005134:	2b01      	cmp	r3, #1
 8005136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800513a:	4686      	mov	lr, r0
 800513c:	d001      	beq.n	8005142 <_strtol_l.isra.0+0xe>
 800513e:	2b24      	cmp	r3, #36	; 0x24
 8005140:	d906      	bls.n	8005150 <_strtol_l.isra.0+0x1c>
 8005142:	f7ff fab7 	bl	80046b4 <__errno>
 8005146:	2316      	movs	r3, #22
 8005148:	6003      	str	r3, [r0, #0]
 800514a:	2000      	movs	r0, #0
 800514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005150:	468c      	mov	ip, r1
 8005152:	4e3a      	ldr	r6, [pc, #232]	; (800523c <_strtol_l.isra.0+0x108>)
 8005154:	4660      	mov	r0, ip
 8005156:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800515a:	5da5      	ldrb	r5, [r4, r6]
 800515c:	f015 0508 	ands.w	r5, r5, #8
 8005160:	d1f8      	bne.n	8005154 <_strtol_l.isra.0+0x20>
 8005162:	2c2d      	cmp	r4, #45	; 0x2d
 8005164:	d133      	bne.n	80051ce <_strtol_l.isra.0+0x9a>
 8005166:	f04f 0801 	mov.w	r8, #1
 800516a:	f89c 4000 	ldrb.w	r4, [ip]
 800516e:	f100 0c02 	add.w	ip, r0, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d05d      	beq.n	8005232 <_strtol_l.isra.0+0xfe>
 8005176:	2b10      	cmp	r3, #16
 8005178:	d10c      	bne.n	8005194 <_strtol_l.isra.0+0x60>
 800517a:	2c30      	cmp	r4, #48	; 0x30
 800517c:	d10a      	bne.n	8005194 <_strtol_l.isra.0+0x60>
 800517e:	f89c 0000 	ldrb.w	r0, [ip]
 8005182:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005186:	2858      	cmp	r0, #88	; 0x58
 8005188:	d14e      	bne.n	8005228 <_strtol_l.isra.0+0xf4>
 800518a:	2310      	movs	r3, #16
 800518c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005190:	f10c 0c02 	add.w	ip, ip, #2
 8005194:	2500      	movs	r5, #0
 8005196:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800519a:	3f01      	subs	r7, #1
 800519c:	fbb7 f9f3 	udiv	r9, r7, r3
 80051a0:	4628      	mov	r0, r5
 80051a2:	fb03 7a19 	mls	sl, r3, r9, r7
 80051a6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80051aa:	2e09      	cmp	r6, #9
 80051ac:	d818      	bhi.n	80051e0 <_strtol_l.isra.0+0xac>
 80051ae:	4634      	mov	r4, r6
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	dd24      	ble.n	80051fe <_strtol_l.isra.0+0xca>
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	db1f      	blt.n	80051f8 <_strtol_l.isra.0+0xc4>
 80051b8:	4581      	cmp	r9, r0
 80051ba:	d31d      	bcc.n	80051f8 <_strtol_l.isra.0+0xc4>
 80051bc:	d101      	bne.n	80051c2 <_strtol_l.isra.0+0x8e>
 80051be:	45a2      	cmp	sl, r4
 80051c0:	db1a      	blt.n	80051f8 <_strtol_l.isra.0+0xc4>
 80051c2:	2501      	movs	r5, #1
 80051c4:	fb00 4003 	mla	r0, r0, r3, r4
 80051c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80051cc:	e7eb      	b.n	80051a6 <_strtol_l.isra.0+0x72>
 80051ce:	2c2b      	cmp	r4, #43	; 0x2b
 80051d0:	bf08      	it	eq
 80051d2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80051d6:	46a8      	mov	r8, r5
 80051d8:	bf08      	it	eq
 80051da:	f100 0c02 	addeq.w	ip, r0, #2
 80051de:	e7c8      	b.n	8005172 <_strtol_l.isra.0+0x3e>
 80051e0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80051e4:	2e19      	cmp	r6, #25
 80051e6:	d801      	bhi.n	80051ec <_strtol_l.isra.0+0xb8>
 80051e8:	3c37      	subs	r4, #55	; 0x37
 80051ea:	e7e1      	b.n	80051b0 <_strtol_l.isra.0+0x7c>
 80051ec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80051f0:	2e19      	cmp	r6, #25
 80051f2:	d804      	bhi.n	80051fe <_strtol_l.isra.0+0xca>
 80051f4:	3c57      	subs	r4, #87	; 0x57
 80051f6:	e7db      	b.n	80051b0 <_strtol_l.isra.0+0x7c>
 80051f8:	f04f 35ff 	mov.w	r5, #4294967295
 80051fc:	e7e4      	b.n	80051c8 <_strtol_l.isra.0+0x94>
 80051fe:	2d00      	cmp	r5, #0
 8005200:	da08      	bge.n	8005214 <_strtol_l.isra.0+0xe0>
 8005202:	2322      	movs	r3, #34	; 0x22
 8005204:	4638      	mov	r0, r7
 8005206:	f8ce 3000 	str.w	r3, [lr]
 800520a:	2a00      	cmp	r2, #0
 800520c:	d09e      	beq.n	800514c <_strtol_l.isra.0+0x18>
 800520e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005212:	e007      	b.n	8005224 <_strtol_l.isra.0+0xf0>
 8005214:	f1b8 0f00 	cmp.w	r8, #0
 8005218:	d000      	beq.n	800521c <_strtol_l.isra.0+0xe8>
 800521a:	4240      	negs	r0, r0
 800521c:	2a00      	cmp	r2, #0
 800521e:	d095      	beq.n	800514c <_strtol_l.isra.0+0x18>
 8005220:	2d00      	cmp	r5, #0
 8005222:	d1f4      	bne.n	800520e <_strtol_l.isra.0+0xda>
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	e791      	b.n	800514c <_strtol_l.isra.0+0x18>
 8005228:	2430      	movs	r4, #48	; 0x30
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1b2      	bne.n	8005194 <_strtol_l.isra.0+0x60>
 800522e:	2308      	movs	r3, #8
 8005230:	e7b0      	b.n	8005194 <_strtol_l.isra.0+0x60>
 8005232:	2c30      	cmp	r4, #48	; 0x30
 8005234:	d0a3      	beq.n	800517e <_strtol_l.isra.0+0x4a>
 8005236:	230a      	movs	r3, #10
 8005238:	e7ac      	b.n	8005194 <_strtol_l.isra.0+0x60>
 800523a:	bf00      	nop
 800523c:	08006f44 	.word	0x08006f44

08005240 <strtol>:
 8005240:	4613      	mov	r3, r2
 8005242:	460a      	mov	r2, r1
 8005244:	4601      	mov	r1, r0
 8005246:	4802      	ldr	r0, [pc, #8]	; (8005250 <strtol+0x10>)
 8005248:	6800      	ldr	r0, [r0, #0]
 800524a:	f7ff bf73 	b.w	8005134 <_strtol_l.isra.0>
 800524e:	bf00      	nop
 8005250:	2000002c 	.word	0x2000002c

08005254 <__swbuf_r>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	460e      	mov	r6, r1
 8005258:	4614      	mov	r4, r2
 800525a:	4605      	mov	r5, r0
 800525c:	b118      	cbz	r0, 8005266 <__swbuf_r+0x12>
 800525e:	6983      	ldr	r3, [r0, #24]
 8005260:	b90b      	cbnz	r3, 8005266 <__swbuf_r+0x12>
 8005262:	f000 f9d9 	bl	8005618 <__sinit>
 8005266:	4b21      	ldr	r3, [pc, #132]	; (80052ec <__swbuf_r+0x98>)
 8005268:	429c      	cmp	r4, r3
 800526a:	d12b      	bne.n	80052c4 <__swbuf_r+0x70>
 800526c:	686c      	ldr	r4, [r5, #4]
 800526e:	69a3      	ldr	r3, [r4, #24]
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	071a      	lsls	r2, r3, #28
 8005276:	d52f      	bpl.n	80052d8 <__swbuf_r+0x84>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	b36b      	cbz	r3, 80052d8 <__swbuf_r+0x84>
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	6820      	ldr	r0, [r4, #0]
 8005280:	b2f6      	uxtb	r6, r6
 8005282:	1ac0      	subs	r0, r0, r3
 8005284:	6963      	ldr	r3, [r4, #20]
 8005286:	4637      	mov	r7, r6
 8005288:	4283      	cmp	r3, r0
 800528a:	dc04      	bgt.n	8005296 <__swbuf_r+0x42>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f92e 	bl	80054f0 <_fflush_r>
 8005294:	bb30      	cbnz	r0, 80052e4 <__swbuf_r+0x90>
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	3001      	adds	r0, #1
 800529a:	3b01      	subs	r3, #1
 800529c:	60a3      	str	r3, [r4, #8]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	701e      	strb	r6, [r3, #0]
 80052a6:	6963      	ldr	r3, [r4, #20]
 80052a8:	4283      	cmp	r3, r0
 80052aa:	d004      	beq.n	80052b6 <__swbuf_r+0x62>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	07db      	lsls	r3, r3, #31
 80052b0:	d506      	bpl.n	80052c0 <__swbuf_r+0x6c>
 80052b2:	2e0a      	cmp	r6, #10
 80052b4:	d104      	bne.n	80052c0 <__swbuf_r+0x6c>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 f919 	bl	80054f0 <_fflush_r>
 80052be:	b988      	cbnz	r0, 80052e4 <__swbuf_r+0x90>
 80052c0:	4638      	mov	r0, r7
 80052c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <__swbuf_r+0x9c>)
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d101      	bne.n	80052ce <__swbuf_r+0x7a>
 80052ca:	68ac      	ldr	r4, [r5, #8]
 80052cc:	e7cf      	b.n	800526e <__swbuf_r+0x1a>
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <__swbuf_r+0xa0>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	bf08      	it	eq
 80052d4:	68ec      	ldreq	r4, [r5, #12]
 80052d6:	e7ca      	b.n	800526e <__swbuf_r+0x1a>
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f80c 	bl	80052f8 <__swsetup_r>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d0cb      	beq.n	800527c <__swbuf_r+0x28>
 80052e4:	f04f 37ff 	mov.w	r7, #4294967295
 80052e8:	e7ea      	b.n	80052c0 <__swbuf_r+0x6c>
 80052ea:	bf00      	nop
 80052ec:	08007064 	.word	0x08007064
 80052f0:	08007084 	.word	0x08007084
 80052f4:	08007044 	.word	0x08007044

080052f8 <__swsetup_r>:
 80052f8:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <__swsetup_r+0xcc>)
 80052fa:	b570      	push	{r4, r5, r6, lr}
 80052fc:	681d      	ldr	r5, [r3, #0]
 80052fe:	4606      	mov	r6, r0
 8005300:	460c      	mov	r4, r1
 8005302:	b125      	cbz	r5, 800530e <__swsetup_r+0x16>
 8005304:	69ab      	ldr	r3, [r5, #24]
 8005306:	b913      	cbnz	r3, 800530e <__swsetup_r+0x16>
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f985 	bl	8005618 <__sinit>
 800530e:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <__swsetup_r+0xd0>)
 8005310:	429c      	cmp	r4, r3
 8005312:	d10f      	bne.n	8005334 <__swsetup_r+0x3c>
 8005314:	686c      	ldr	r4, [r5, #4]
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800531c:	0719      	lsls	r1, r3, #28
 800531e:	d42c      	bmi.n	800537a <__swsetup_r+0x82>
 8005320:	06dd      	lsls	r5, r3, #27
 8005322:	d411      	bmi.n	8005348 <__swsetup_r+0x50>
 8005324:	2309      	movs	r3, #9
 8005326:	6033      	str	r3, [r6, #0]
 8005328:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	e03e      	b.n	80053b2 <__swsetup_r+0xba>
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <__swsetup_r+0xd4>)
 8005336:	429c      	cmp	r4, r3
 8005338:	d101      	bne.n	800533e <__swsetup_r+0x46>
 800533a:	68ac      	ldr	r4, [r5, #8]
 800533c:	e7eb      	b.n	8005316 <__swsetup_r+0x1e>
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <__swsetup_r+0xd8>)
 8005340:	429c      	cmp	r4, r3
 8005342:	bf08      	it	eq
 8005344:	68ec      	ldreq	r4, [r5, #12]
 8005346:	e7e6      	b.n	8005316 <__swsetup_r+0x1e>
 8005348:	0758      	lsls	r0, r3, #29
 800534a:	d512      	bpl.n	8005372 <__swsetup_r+0x7a>
 800534c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800534e:	b141      	cbz	r1, 8005362 <__swsetup_r+0x6a>
 8005350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005354:	4299      	cmp	r1, r3
 8005356:	d002      	beq.n	800535e <__swsetup_r+0x66>
 8005358:	4630      	mov	r0, r6
 800535a:	f7ff f9ff 	bl	800475c <_free_r>
 800535e:	2300      	movs	r3, #0
 8005360:	6363      	str	r3, [r4, #52]	; 0x34
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	2300      	movs	r3, #0
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	f043 0308 	orr.w	r3, r3, #8
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	b94b      	cbnz	r3, 8005392 <__swsetup_r+0x9a>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005388:	d003      	beq.n	8005392 <__swsetup_r+0x9a>
 800538a:	4621      	mov	r1, r4
 800538c:	4630      	mov	r0, r6
 800538e:	f000 fa07 	bl	80057a0 <__smakebuf_r>
 8005392:	89a0      	ldrh	r0, [r4, #12]
 8005394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005398:	f010 0301 	ands.w	r3, r0, #1
 800539c:	d00a      	beq.n	80053b4 <__swsetup_r+0xbc>
 800539e:	2300      	movs	r3, #0
 80053a0:	60a3      	str	r3, [r4, #8]
 80053a2:	6963      	ldr	r3, [r4, #20]
 80053a4:	425b      	negs	r3, r3
 80053a6:	61a3      	str	r3, [r4, #24]
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	b943      	cbnz	r3, 80053be <__swsetup_r+0xc6>
 80053ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053b0:	d1ba      	bne.n	8005328 <__swsetup_r+0x30>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	0781      	lsls	r1, r0, #30
 80053b6:	bf58      	it	pl
 80053b8:	6963      	ldrpl	r3, [r4, #20]
 80053ba:	60a3      	str	r3, [r4, #8]
 80053bc:	e7f4      	b.n	80053a8 <__swsetup_r+0xb0>
 80053be:	2000      	movs	r0, #0
 80053c0:	e7f7      	b.n	80053b2 <__swsetup_r+0xba>
 80053c2:	bf00      	nop
 80053c4:	2000002c 	.word	0x2000002c
 80053c8:	08007064 	.word	0x08007064
 80053cc:	08007084 	.word	0x08007084
 80053d0:	08007044 	.word	0x08007044

080053d4 <abort>:
 80053d4:	2006      	movs	r0, #6
 80053d6:	b508      	push	{r3, lr}
 80053d8:	f000 fc0e 	bl	8005bf8 <raise>
 80053dc:	2001      	movs	r0, #1
 80053de:	f7fd f96e 	bl	80026be <_exit>
	...

080053e4 <__sflush_r>:
 80053e4:	898a      	ldrh	r2, [r1, #12]
 80053e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ea:	4605      	mov	r5, r0
 80053ec:	0710      	lsls	r0, r2, #28
 80053ee:	460c      	mov	r4, r1
 80053f0:	d458      	bmi.n	80054a4 <__sflush_r+0xc0>
 80053f2:	684b      	ldr	r3, [r1, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dc05      	bgt.n	8005404 <__sflush_r+0x20>
 80053f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dc02      	bgt.n	8005404 <__sflush_r+0x20>
 80053fe:	2000      	movs	r0, #0
 8005400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005406:	2e00      	cmp	r6, #0
 8005408:	d0f9      	beq.n	80053fe <__sflush_r+0x1a>
 800540a:	2300      	movs	r3, #0
 800540c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005410:	682f      	ldr	r7, [r5, #0]
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	d032      	beq.n	800547c <__sflush_r+0x98>
 8005416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	075a      	lsls	r2, r3, #29
 800541c:	d505      	bpl.n	800542a <__sflush_r+0x46>
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	1ac0      	subs	r0, r0, r3
 8005422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005424:	b10b      	cbz	r3, 800542a <__sflush_r+0x46>
 8005426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005428:	1ac0      	subs	r0, r0, r3
 800542a:	2300      	movs	r3, #0
 800542c:	4602      	mov	r2, r0
 800542e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005430:	4628      	mov	r0, r5
 8005432:	6a21      	ldr	r1, [r4, #32]
 8005434:	47b0      	blx	r6
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	d106      	bne.n	800544a <__sflush_r+0x66>
 800543c:	6829      	ldr	r1, [r5, #0]
 800543e:	291d      	cmp	r1, #29
 8005440:	d82c      	bhi.n	800549c <__sflush_r+0xb8>
 8005442:	4a2a      	ldr	r2, [pc, #168]	; (80054ec <__sflush_r+0x108>)
 8005444:	40ca      	lsrs	r2, r1
 8005446:	07d6      	lsls	r6, r2, #31
 8005448:	d528      	bpl.n	800549c <__sflush_r+0xb8>
 800544a:	2200      	movs	r2, #0
 800544c:	6062      	str	r2, [r4, #4]
 800544e:	6922      	ldr	r2, [r4, #16]
 8005450:	04d9      	lsls	r1, r3, #19
 8005452:	6022      	str	r2, [r4, #0]
 8005454:	d504      	bpl.n	8005460 <__sflush_r+0x7c>
 8005456:	1c42      	adds	r2, r0, #1
 8005458:	d101      	bne.n	800545e <__sflush_r+0x7a>
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	b903      	cbnz	r3, 8005460 <__sflush_r+0x7c>
 800545e:	6560      	str	r0, [r4, #84]	; 0x54
 8005460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005462:	602f      	str	r7, [r5, #0]
 8005464:	2900      	cmp	r1, #0
 8005466:	d0ca      	beq.n	80053fe <__sflush_r+0x1a>
 8005468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800546c:	4299      	cmp	r1, r3
 800546e:	d002      	beq.n	8005476 <__sflush_r+0x92>
 8005470:	4628      	mov	r0, r5
 8005472:	f7ff f973 	bl	800475c <_free_r>
 8005476:	2000      	movs	r0, #0
 8005478:	6360      	str	r0, [r4, #52]	; 0x34
 800547a:	e7c1      	b.n	8005400 <__sflush_r+0x1c>
 800547c:	6a21      	ldr	r1, [r4, #32]
 800547e:	2301      	movs	r3, #1
 8005480:	4628      	mov	r0, r5
 8005482:	47b0      	blx	r6
 8005484:	1c41      	adds	r1, r0, #1
 8005486:	d1c7      	bne.n	8005418 <__sflush_r+0x34>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0c4      	beq.n	8005418 <__sflush_r+0x34>
 800548e:	2b1d      	cmp	r3, #29
 8005490:	d001      	beq.n	8005496 <__sflush_r+0xb2>
 8005492:	2b16      	cmp	r3, #22
 8005494:	d101      	bne.n	800549a <__sflush_r+0xb6>
 8005496:	602f      	str	r7, [r5, #0]
 8005498:	e7b1      	b.n	80053fe <__sflush_r+0x1a>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	e7ad      	b.n	8005400 <__sflush_r+0x1c>
 80054a4:	690f      	ldr	r7, [r1, #16]
 80054a6:	2f00      	cmp	r7, #0
 80054a8:	d0a9      	beq.n	80053fe <__sflush_r+0x1a>
 80054aa:	0793      	lsls	r3, r2, #30
 80054ac:	bf18      	it	ne
 80054ae:	2300      	movne	r3, #0
 80054b0:	680e      	ldr	r6, [r1, #0]
 80054b2:	bf08      	it	eq
 80054b4:	694b      	ldreq	r3, [r1, #20]
 80054b6:	eba6 0807 	sub.w	r8, r6, r7
 80054ba:	600f      	str	r7, [r1, #0]
 80054bc:	608b      	str	r3, [r1, #8]
 80054be:	f1b8 0f00 	cmp.w	r8, #0
 80054c2:	dd9c      	ble.n	80053fe <__sflush_r+0x1a>
 80054c4:	4643      	mov	r3, r8
 80054c6:	463a      	mov	r2, r7
 80054c8:	4628      	mov	r0, r5
 80054ca:	6a21      	ldr	r1, [r4, #32]
 80054cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054ce:	47b0      	blx	r6
 80054d0:	2800      	cmp	r0, #0
 80054d2:	dc06      	bgt.n	80054e2 <__sflush_r+0xfe>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	e78e      	b.n	8005400 <__sflush_r+0x1c>
 80054e2:	4407      	add	r7, r0
 80054e4:	eba8 0800 	sub.w	r8, r8, r0
 80054e8:	e7e9      	b.n	80054be <__sflush_r+0xda>
 80054ea:	bf00      	nop
 80054ec:	20400001 	.word	0x20400001

080054f0 <_fflush_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	690b      	ldr	r3, [r1, #16]
 80054f4:	4605      	mov	r5, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	b913      	cbnz	r3, 8005500 <_fflush_r+0x10>
 80054fa:	2500      	movs	r5, #0
 80054fc:	4628      	mov	r0, r5
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	b118      	cbz	r0, 800550a <_fflush_r+0x1a>
 8005502:	6983      	ldr	r3, [r0, #24]
 8005504:	b90b      	cbnz	r3, 800550a <_fflush_r+0x1a>
 8005506:	f000 f887 	bl	8005618 <__sinit>
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <_fflush_r+0x6c>)
 800550c:	429c      	cmp	r4, r3
 800550e:	d11b      	bne.n	8005548 <_fflush_r+0x58>
 8005510:	686c      	ldr	r4, [r5, #4]
 8005512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ef      	beq.n	80054fa <_fflush_r+0xa>
 800551a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800551c:	07d0      	lsls	r0, r2, #31
 800551e:	d404      	bmi.n	800552a <_fflush_r+0x3a>
 8005520:	0599      	lsls	r1, r3, #22
 8005522:	d402      	bmi.n	800552a <_fflush_r+0x3a>
 8005524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005526:	f000 f915 	bl	8005754 <__retarget_lock_acquire_recursive>
 800552a:	4628      	mov	r0, r5
 800552c:	4621      	mov	r1, r4
 800552e:	f7ff ff59 	bl	80053e4 <__sflush_r>
 8005532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005534:	4605      	mov	r5, r0
 8005536:	07da      	lsls	r2, r3, #31
 8005538:	d4e0      	bmi.n	80054fc <_fflush_r+0xc>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	059b      	lsls	r3, r3, #22
 800553e:	d4dd      	bmi.n	80054fc <_fflush_r+0xc>
 8005540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005542:	f000 f908 	bl	8005756 <__retarget_lock_release_recursive>
 8005546:	e7d9      	b.n	80054fc <_fflush_r+0xc>
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <_fflush_r+0x70>)
 800554a:	429c      	cmp	r4, r3
 800554c:	d101      	bne.n	8005552 <_fflush_r+0x62>
 800554e:	68ac      	ldr	r4, [r5, #8]
 8005550:	e7df      	b.n	8005512 <_fflush_r+0x22>
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <_fflush_r+0x74>)
 8005554:	429c      	cmp	r4, r3
 8005556:	bf08      	it	eq
 8005558:	68ec      	ldreq	r4, [r5, #12]
 800555a:	e7da      	b.n	8005512 <_fflush_r+0x22>
 800555c:	08007064 	.word	0x08007064
 8005560:	08007084 	.word	0x08007084
 8005564:	08007044 	.word	0x08007044

08005568 <std>:
 8005568:	2300      	movs	r3, #0
 800556a:	b510      	push	{r4, lr}
 800556c:	4604      	mov	r4, r0
 800556e:	e9c0 3300 	strd	r3, r3, [r0]
 8005572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005576:	6083      	str	r3, [r0, #8]
 8005578:	8181      	strh	r1, [r0, #12]
 800557a:	6643      	str	r3, [r0, #100]	; 0x64
 800557c:	81c2      	strh	r2, [r0, #14]
 800557e:	6183      	str	r3, [r0, #24]
 8005580:	4619      	mov	r1, r3
 8005582:	2208      	movs	r2, #8
 8005584:	305c      	adds	r0, #92	; 0x5c
 8005586:	f7ff f8e1 	bl	800474c <memset>
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <std+0x38>)
 800558c:	6224      	str	r4, [r4, #32]
 800558e:	6263      	str	r3, [r4, #36]	; 0x24
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <std+0x3c>)
 8005592:	62a3      	str	r3, [r4, #40]	; 0x28
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <std+0x40>)
 8005596:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <std+0x44>)
 800559a:	6323      	str	r3, [r4, #48]	; 0x30
 800559c:	bd10      	pop	{r4, pc}
 800559e:	bf00      	nop
 80055a0:	08005c31 	.word	0x08005c31
 80055a4:	08005c53 	.word	0x08005c53
 80055a8:	08005c8b 	.word	0x08005c8b
 80055ac:	08005caf 	.word	0x08005caf

080055b0 <_cleanup_r>:
 80055b0:	4901      	ldr	r1, [pc, #4]	; (80055b8 <_cleanup_r+0x8>)
 80055b2:	f000 b8af 	b.w	8005714 <_fwalk_reent>
 80055b6:	bf00      	nop
 80055b8:	080054f1 	.word	0x080054f1

080055bc <__sfmoreglue>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	2568      	movs	r5, #104	; 0x68
 80055c0:	1e4a      	subs	r2, r1, #1
 80055c2:	4355      	muls	r5, r2
 80055c4:	460e      	mov	r6, r1
 80055c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055ca:	f7ff f913 	bl	80047f4 <_malloc_r>
 80055ce:	4604      	mov	r4, r0
 80055d0:	b140      	cbz	r0, 80055e4 <__sfmoreglue+0x28>
 80055d2:	2100      	movs	r1, #0
 80055d4:	e9c0 1600 	strd	r1, r6, [r0]
 80055d8:	300c      	adds	r0, #12
 80055da:	60a0      	str	r0, [r4, #8]
 80055dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055e0:	f7ff f8b4 	bl	800474c <memset>
 80055e4:	4620      	mov	r0, r4
 80055e6:	bd70      	pop	{r4, r5, r6, pc}

080055e8 <__sfp_lock_acquire>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__sfp_lock_acquire+0x8>)
 80055ea:	f000 b8b3 	b.w	8005754 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	20000254 	.word	0x20000254

080055f4 <__sfp_lock_release>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__sfp_lock_release+0x8>)
 80055f6:	f000 b8ae 	b.w	8005756 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	20000254 	.word	0x20000254

08005600 <__sinit_lock_acquire>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__sinit_lock_acquire+0x8>)
 8005602:	f000 b8a7 	b.w	8005754 <__retarget_lock_acquire_recursive>
 8005606:	bf00      	nop
 8005608:	2000024f 	.word	0x2000024f

0800560c <__sinit_lock_release>:
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <__sinit_lock_release+0x8>)
 800560e:	f000 b8a2 	b.w	8005756 <__retarget_lock_release_recursive>
 8005612:	bf00      	nop
 8005614:	2000024f 	.word	0x2000024f

08005618 <__sinit>:
 8005618:	b510      	push	{r4, lr}
 800561a:	4604      	mov	r4, r0
 800561c:	f7ff fff0 	bl	8005600 <__sinit_lock_acquire>
 8005620:	69a3      	ldr	r3, [r4, #24]
 8005622:	b11b      	cbz	r3, 800562c <__sinit+0x14>
 8005624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005628:	f7ff bff0 	b.w	800560c <__sinit_lock_release>
 800562c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005630:	6523      	str	r3, [r4, #80]	; 0x50
 8005632:	4b13      	ldr	r3, [pc, #76]	; (8005680 <__sinit+0x68>)
 8005634:	4a13      	ldr	r2, [pc, #76]	; (8005684 <__sinit+0x6c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	62a2      	str	r2, [r4, #40]	; 0x28
 800563a:	42a3      	cmp	r3, r4
 800563c:	bf08      	it	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	4620      	mov	r0, r4
 8005642:	bf08      	it	eq
 8005644:	61a3      	streq	r3, [r4, #24]
 8005646:	f000 f81f 	bl	8005688 <__sfp>
 800564a:	6060      	str	r0, [r4, #4]
 800564c:	4620      	mov	r0, r4
 800564e:	f000 f81b 	bl	8005688 <__sfp>
 8005652:	60a0      	str	r0, [r4, #8]
 8005654:	4620      	mov	r0, r4
 8005656:	f000 f817 	bl	8005688 <__sfp>
 800565a:	2200      	movs	r2, #0
 800565c:	2104      	movs	r1, #4
 800565e:	60e0      	str	r0, [r4, #12]
 8005660:	6860      	ldr	r0, [r4, #4]
 8005662:	f7ff ff81 	bl	8005568 <std>
 8005666:	2201      	movs	r2, #1
 8005668:	2109      	movs	r1, #9
 800566a:	68a0      	ldr	r0, [r4, #8]
 800566c:	f7ff ff7c 	bl	8005568 <std>
 8005670:	2202      	movs	r2, #2
 8005672:	2112      	movs	r1, #18
 8005674:	68e0      	ldr	r0, [r4, #12]
 8005676:	f7ff ff77 	bl	8005568 <std>
 800567a:	2301      	movs	r3, #1
 800567c:	61a3      	str	r3, [r4, #24]
 800567e:	e7d1      	b.n	8005624 <__sinit+0xc>
 8005680:	08006e94 	.word	0x08006e94
 8005684:	080055b1 	.word	0x080055b1

08005688 <__sfp>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	4607      	mov	r7, r0
 800568c:	f7ff ffac 	bl	80055e8 <__sfp_lock_acquire>
 8005690:	4b1e      	ldr	r3, [pc, #120]	; (800570c <__sfp+0x84>)
 8005692:	681e      	ldr	r6, [r3, #0]
 8005694:	69b3      	ldr	r3, [r6, #24]
 8005696:	b913      	cbnz	r3, 800569e <__sfp+0x16>
 8005698:	4630      	mov	r0, r6
 800569a:	f7ff ffbd 	bl	8005618 <__sinit>
 800569e:	3648      	adds	r6, #72	; 0x48
 80056a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	d503      	bpl.n	80056b0 <__sfp+0x28>
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	b30b      	cbz	r3, 80056f0 <__sfp+0x68>
 80056ac:	6836      	ldr	r6, [r6, #0]
 80056ae:	e7f7      	b.n	80056a0 <__sfp+0x18>
 80056b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056b4:	b9d5      	cbnz	r5, 80056ec <__sfp+0x64>
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <__sfp+0x88>)
 80056b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056bc:	60e3      	str	r3, [r4, #12]
 80056be:	6665      	str	r5, [r4, #100]	; 0x64
 80056c0:	f000 f847 	bl	8005752 <__retarget_lock_init_recursive>
 80056c4:	f7ff ff96 	bl	80055f4 <__sfp_lock_release>
 80056c8:	2208      	movs	r2, #8
 80056ca:	4629      	mov	r1, r5
 80056cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056d4:	6025      	str	r5, [r4, #0]
 80056d6:	61a5      	str	r5, [r4, #24]
 80056d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056dc:	f7ff f836 	bl	800474c <memset>
 80056e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056e8:	4620      	mov	r0, r4
 80056ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ec:	3468      	adds	r4, #104	; 0x68
 80056ee:	e7d9      	b.n	80056a4 <__sfp+0x1c>
 80056f0:	2104      	movs	r1, #4
 80056f2:	4638      	mov	r0, r7
 80056f4:	f7ff ff62 	bl	80055bc <__sfmoreglue>
 80056f8:	4604      	mov	r4, r0
 80056fa:	6030      	str	r0, [r6, #0]
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d1d5      	bne.n	80056ac <__sfp+0x24>
 8005700:	f7ff ff78 	bl	80055f4 <__sfp_lock_release>
 8005704:	230c      	movs	r3, #12
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	e7ee      	b.n	80056e8 <__sfp+0x60>
 800570a:	bf00      	nop
 800570c:	08006e94 	.word	0x08006e94
 8005710:	ffff0001 	.word	0xffff0001

08005714 <_fwalk_reent>:
 8005714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005718:	4606      	mov	r6, r0
 800571a:	4688      	mov	r8, r1
 800571c:	2700      	movs	r7, #0
 800571e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005726:	f1b9 0901 	subs.w	r9, r9, #1
 800572a:	d505      	bpl.n	8005738 <_fwalk_reent+0x24>
 800572c:	6824      	ldr	r4, [r4, #0]
 800572e:	2c00      	cmp	r4, #0
 8005730:	d1f7      	bne.n	8005722 <_fwalk_reent+0xe>
 8005732:	4638      	mov	r0, r7
 8005734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005738:	89ab      	ldrh	r3, [r5, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d907      	bls.n	800574e <_fwalk_reent+0x3a>
 800573e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005742:	3301      	adds	r3, #1
 8005744:	d003      	beq.n	800574e <_fwalk_reent+0x3a>
 8005746:	4629      	mov	r1, r5
 8005748:	4630      	mov	r0, r6
 800574a:	47c0      	blx	r8
 800574c:	4307      	orrs	r7, r0
 800574e:	3568      	adds	r5, #104	; 0x68
 8005750:	e7e9      	b.n	8005726 <_fwalk_reent+0x12>

08005752 <__retarget_lock_init_recursive>:
 8005752:	4770      	bx	lr

08005754 <__retarget_lock_acquire_recursive>:
 8005754:	4770      	bx	lr

08005756 <__retarget_lock_release_recursive>:
 8005756:	4770      	bx	lr

08005758 <__swhatbuf_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	460e      	mov	r6, r1
 800575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005760:	4614      	mov	r4, r2
 8005762:	2900      	cmp	r1, #0
 8005764:	461d      	mov	r5, r3
 8005766:	b096      	sub	sp, #88	; 0x58
 8005768:	da07      	bge.n	800577a <__swhatbuf_r+0x22>
 800576a:	2300      	movs	r3, #0
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	89b3      	ldrh	r3, [r6, #12]
 8005770:	061a      	lsls	r2, r3, #24
 8005772:	d410      	bmi.n	8005796 <__swhatbuf_r+0x3e>
 8005774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005778:	e00e      	b.n	8005798 <__swhatbuf_r+0x40>
 800577a:	466a      	mov	r2, sp
 800577c:	f000 faca 	bl	8005d14 <_fstat_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	dbf2      	blt.n	800576a <__swhatbuf_r+0x12>
 8005784:	9a01      	ldr	r2, [sp, #4]
 8005786:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800578a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800578e:	425a      	negs	r2, r3
 8005790:	415a      	adcs	r2, r3
 8005792:	602a      	str	r2, [r5, #0]
 8005794:	e7ee      	b.n	8005774 <__swhatbuf_r+0x1c>
 8005796:	2340      	movs	r3, #64	; 0x40
 8005798:	2000      	movs	r0, #0
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	b016      	add	sp, #88	; 0x58
 800579e:	bd70      	pop	{r4, r5, r6, pc}

080057a0 <__smakebuf_r>:
 80057a0:	898b      	ldrh	r3, [r1, #12]
 80057a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057a4:	079d      	lsls	r5, r3, #30
 80057a6:	4606      	mov	r6, r0
 80057a8:	460c      	mov	r4, r1
 80057aa:	d507      	bpl.n	80057bc <__smakebuf_r+0x1c>
 80057ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	2301      	movs	r3, #1
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	b002      	add	sp, #8
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	466a      	mov	r2, sp
 80057be:	ab01      	add	r3, sp, #4
 80057c0:	f7ff ffca 	bl	8005758 <__swhatbuf_r>
 80057c4:	9900      	ldr	r1, [sp, #0]
 80057c6:	4605      	mov	r5, r0
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff f813 	bl	80047f4 <_malloc_r>
 80057ce:	b948      	cbnz	r0, 80057e4 <__smakebuf_r+0x44>
 80057d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d4:	059a      	lsls	r2, r3, #22
 80057d6:	d4ef      	bmi.n	80057b8 <__smakebuf_r+0x18>
 80057d8:	f023 0303 	bic.w	r3, r3, #3
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	e7e3      	b.n	80057ac <__smakebuf_r+0xc>
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <__smakebuf_r+0x7c>)
 80057e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	6120      	str	r0, [r4, #16]
 80057f6:	6163      	str	r3, [r4, #20]
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	b15b      	cbz	r3, 8005814 <__smakebuf_r+0x74>
 80057fc:	4630      	mov	r0, r6
 80057fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005802:	f000 fa99 	bl	8005d38 <_isatty_r>
 8005806:	b128      	cbz	r0, 8005814 <__smakebuf_r+0x74>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	89a0      	ldrh	r0, [r4, #12]
 8005816:	4305      	orrs	r5, r0
 8005818:	81a5      	strh	r5, [r4, #12]
 800581a:	e7cd      	b.n	80057b8 <__smakebuf_r+0x18>
 800581c:	080055b1 	.word	0x080055b1

08005820 <memchr>:
 8005820:	4603      	mov	r3, r0
 8005822:	b510      	push	{r4, lr}
 8005824:	b2c9      	uxtb	r1, r1
 8005826:	4402      	add	r2, r0
 8005828:	4293      	cmp	r3, r2
 800582a:	4618      	mov	r0, r3
 800582c:	d101      	bne.n	8005832 <memchr+0x12>
 800582e:	2000      	movs	r0, #0
 8005830:	e003      	b.n	800583a <memchr+0x1a>
 8005832:	7804      	ldrb	r4, [r0, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	428c      	cmp	r4, r1
 8005838:	d1f6      	bne.n	8005828 <memchr+0x8>
 800583a:	bd10      	pop	{r4, pc}

0800583c <memcpy>:
 800583c:	440a      	add	r2, r1
 800583e:	4291      	cmp	r1, r2
 8005840:	f100 33ff 	add.w	r3, r0, #4294967295
 8005844:	d100      	bne.n	8005848 <memcpy+0xc>
 8005846:	4770      	bx	lr
 8005848:	b510      	push	{r4, lr}
 800584a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800584e:	4291      	cmp	r1, r2
 8005850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005854:	d1f9      	bne.n	800584a <memcpy+0xe>
 8005856:	bd10      	pop	{r4, pc}

08005858 <memmove>:
 8005858:	4288      	cmp	r0, r1
 800585a:	b510      	push	{r4, lr}
 800585c:	eb01 0402 	add.w	r4, r1, r2
 8005860:	d902      	bls.n	8005868 <memmove+0x10>
 8005862:	4284      	cmp	r4, r0
 8005864:	4623      	mov	r3, r4
 8005866:	d807      	bhi.n	8005878 <memmove+0x20>
 8005868:	1e43      	subs	r3, r0, #1
 800586a:	42a1      	cmp	r1, r4
 800586c:	d008      	beq.n	8005880 <memmove+0x28>
 800586e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005876:	e7f8      	b.n	800586a <memmove+0x12>
 8005878:	4601      	mov	r1, r0
 800587a:	4402      	add	r2, r0
 800587c:	428a      	cmp	r2, r1
 800587e:	d100      	bne.n	8005882 <memmove+0x2a>
 8005880:	bd10      	pop	{r4, pc}
 8005882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800588a:	e7f7      	b.n	800587c <memmove+0x24>

0800588c <__malloc_lock>:
 800588c:	4801      	ldr	r0, [pc, #4]	; (8005894 <__malloc_lock+0x8>)
 800588e:	f7ff bf61 	b.w	8005754 <__retarget_lock_acquire_recursive>
 8005892:	bf00      	nop
 8005894:	20000250 	.word	0x20000250

08005898 <__malloc_unlock>:
 8005898:	4801      	ldr	r0, [pc, #4]	; (80058a0 <__malloc_unlock+0x8>)
 800589a:	f7ff bf5c 	b.w	8005756 <__retarget_lock_release_recursive>
 800589e:	bf00      	nop
 80058a0:	20000250 	.word	0x20000250

080058a4 <_realloc_r>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	4607      	mov	r7, r0
 80058a8:	4614      	mov	r4, r2
 80058aa:	460e      	mov	r6, r1
 80058ac:	b921      	cbnz	r1, 80058b8 <_realloc_r+0x14>
 80058ae:	4611      	mov	r1, r2
 80058b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058b4:	f7fe bf9e 	b.w	80047f4 <_malloc_r>
 80058b8:	b922      	cbnz	r2, 80058c4 <_realloc_r+0x20>
 80058ba:	f7fe ff4f 	bl	800475c <_free_r>
 80058be:	4625      	mov	r5, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c4:	f000 fa5a 	bl	8005d7c <_malloc_usable_size_r>
 80058c8:	42a0      	cmp	r0, r4
 80058ca:	d20f      	bcs.n	80058ec <_realloc_r+0x48>
 80058cc:	4621      	mov	r1, r4
 80058ce:	4638      	mov	r0, r7
 80058d0:	f7fe ff90 	bl	80047f4 <_malloc_r>
 80058d4:	4605      	mov	r5, r0
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d0f2      	beq.n	80058c0 <_realloc_r+0x1c>
 80058da:	4631      	mov	r1, r6
 80058dc:	4622      	mov	r2, r4
 80058de:	f7ff ffad 	bl	800583c <memcpy>
 80058e2:	4631      	mov	r1, r6
 80058e4:	4638      	mov	r0, r7
 80058e6:	f7fe ff39 	bl	800475c <_free_r>
 80058ea:	e7e9      	b.n	80058c0 <_realloc_r+0x1c>
 80058ec:	4635      	mov	r5, r6
 80058ee:	e7e7      	b.n	80058c0 <_realloc_r+0x1c>

080058f0 <__ssputs_r>:
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	688e      	ldr	r6, [r1, #8]
 80058f6:	4682      	mov	sl, r0
 80058f8:	429e      	cmp	r6, r3
 80058fa:	460c      	mov	r4, r1
 80058fc:	4690      	mov	r8, r2
 80058fe:	461f      	mov	r7, r3
 8005900:	d838      	bhi.n	8005974 <__ssputs_r+0x84>
 8005902:	898a      	ldrh	r2, [r1, #12]
 8005904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005908:	d032      	beq.n	8005970 <__ssputs_r+0x80>
 800590a:	6825      	ldr	r5, [r4, #0]
 800590c:	6909      	ldr	r1, [r1, #16]
 800590e:	3301      	adds	r3, #1
 8005910:	eba5 0901 	sub.w	r9, r5, r1
 8005914:	6965      	ldr	r5, [r4, #20]
 8005916:	444b      	add	r3, r9
 8005918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800591c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005920:	106d      	asrs	r5, r5, #1
 8005922:	429d      	cmp	r5, r3
 8005924:	bf38      	it	cc
 8005926:	461d      	movcc	r5, r3
 8005928:	0553      	lsls	r3, r2, #21
 800592a:	d531      	bpl.n	8005990 <__ssputs_r+0xa0>
 800592c:	4629      	mov	r1, r5
 800592e:	f7fe ff61 	bl	80047f4 <_malloc_r>
 8005932:	4606      	mov	r6, r0
 8005934:	b950      	cbnz	r0, 800594c <__ssputs_r+0x5c>
 8005936:	230c      	movs	r3, #12
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	f8ca 3000 	str.w	r3, [sl]
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594c:	464a      	mov	r2, r9
 800594e:	6921      	ldr	r1, [r4, #16]
 8005950:	f7ff ff74 	bl	800583c <memcpy>
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	81a3      	strh	r3, [r4, #12]
 8005960:	6126      	str	r6, [r4, #16]
 8005962:	444e      	add	r6, r9
 8005964:	6026      	str	r6, [r4, #0]
 8005966:	463e      	mov	r6, r7
 8005968:	6165      	str	r5, [r4, #20]
 800596a:	eba5 0509 	sub.w	r5, r5, r9
 800596e:	60a5      	str	r5, [r4, #8]
 8005970:	42be      	cmp	r6, r7
 8005972:	d900      	bls.n	8005976 <__ssputs_r+0x86>
 8005974:	463e      	mov	r6, r7
 8005976:	4632      	mov	r2, r6
 8005978:	4641      	mov	r1, r8
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	f7ff ff6c 	bl	8005858 <memmove>
 8005980:	68a3      	ldr	r3, [r4, #8]
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	1b9b      	subs	r3, r3, r6
 8005986:	4432      	add	r2, r6
 8005988:	2000      	movs	r0, #0
 800598a:	60a3      	str	r3, [r4, #8]
 800598c:	6022      	str	r2, [r4, #0]
 800598e:	e7db      	b.n	8005948 <__ssputs_r+0x58>
 8005990:	462a      	mov	r2, r5
 8005992:	f7ff ff87 	bl	80058a4 <_realloc_r>
 8005996:	4606      	mov	r6, r0
 8005998:	2800      	cmp	r0, #0
 800599a:	d1e1      	bne.n	8005960 <__ssputs_r+0x70>
 800599c:	4650      	mov	r0, sl
 800599e:	6921      	ldr	r1, [r4, #16]
 80059a0:	f7fe fedc 	bl	800475c <_free_r>
 80059a4:	e7c7      	b.n	8005936 <__ssputs_r+0x46>
	...

080059a8 <_svfiprintf_r>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	4698      	mov	r8, r3
 80059ae:	898b      	ldrh	r3, [r1, #12]
 80059b0:	4607      	mov	r7, r0
 80059b2:	061b      	lsls	r3, r3, #24
 80059b4:	460d      	mov	r5, r1
 80059b6:	4614      	mov	r4, r2
 80059b8:	b09d      	sub	sp, #116	; 0x74
 80059ba:	d50e      	bpl.n	80059da <_svfiprintf_r+0x32>
 80059bc:	690b      	ldr	r3, [r1, #16]
 80059be:	b963      	cbnz	r3, 80059da <_svfiprintf_r+0x32>
 80059c0:	2140      	movs	r1, #64	; 0x40
 80059c2:	f7fe ff17 	bl	80047f4 <_malloc_r>
 80059c6:	6028      	str	r0, [r5, #0]
 80059c8:	6128      	str	r0, [r5, #16]
 80059ca:	b920      	cbnz	r0, 80059d6 <_svfiprintf_r+0x2e>
 80059cc:	230c      	movs	r3, #12
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295
 80059d4:	e0d1      	b.n	8005b7a <_svfiprintf_r+0x1d2>
 80059d6:	2340      	movs	r3, #64	; 0x40
 80059d8:	616b      	str	r3, [r5, #20]
 80059da:	2300      	movs	r3, #0
 80059dc:	9309      	str	r3, [sp, #36]	; 0x24
 80059de:	2320      	movs	r3, #32
 80059e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059e4:	2330      	movs	r3, #48	; 0x30
 80059e6:	f04f 0901 	mov.w	r9, #1
 80059ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b94 <_svfiprintf_r+0x1ec>
 80059f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059f6:	4623      	mov	r3, r4
 80059f8:	469a      	mov	sl, r3
 80059fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059fe:	b10a      	cbz	r2, 8005a04 <_svfiprintf_r+0x5c>
 8005a00:	2a25      	cmp	r2, #37	; 0x25
 8005a02:	d1f9      	bne.n	80059f8 <_svfiprintf_r+0x50>
 8005a04:	ebba 0b04 	subs.w	fp, sl, r4
 8005a08:	d00b      	beq.n	8005a22 <_svfiprintf_r+0x7a>
 8005a0a:	465b      	mov	r3, fp
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4638      	mov	r0, r7
 8005a12:	f7ff ff6d 	bl	80058f0 <__ssputs_r>
 8005a16:	3001      	adds	r0, #1
 8005a18:	f000 80aa 	beq.w	8005b70 <_svfiprintf_r+0x1c8>
 8005a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a1e:	445a      	add	r2, fp
 8005a20:	9209      	str	r2, [sp, #36]	; 0x24
 8005a22:	f89a 3000 	ldrb.w	r3, [sl]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80a2 	beq.w	8005b70 <_svfiprintf_r+0x1c8>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a36:	f10a 0a01 	add.w	sl, sl, #1
 8005a3a:	9304      	str	r3, [sp, #16]
 8005a3c:	9307      	str	r3, [sp, #28]
 8005a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a42:	931a      	str	r3, [sp, #104]	; 0x68
 8005a44:	4654      	mov	r4, sl
 8005a46:	2205      	movs	r2, #5
 8005a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a4c:	4851      	ldr	r0, [pc, #324]	; (8005b94 <_svfiprintf_r+0x1ec>)
 8005a4e:	f7ff fee7 	bl	8005820 <memchr>
 8005a52:	9a04      	ldr	r2, [sp, #16]
 8005a54:	b9d8      	cbnz	r0, 8005a8e <_svfiprintf_r+0xe6>
 8005a56:	06d0      	lsls	r0, r2, #27
 8005a58:	bf44      	itt	mi
 8005a5a:	2320      	movmi	r3, #32
 8005a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a60:	0711      	lsls	r1, r2, #28
 8005a62:	bf44      	itt	mi
 8005a64:	232b      	movmi	r3, #43	; 0x2b
 8005a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a70:	d015      	beq.n	8005a9e <_svfiprintf_r+0xf6>
 8005a72:	4654      	mov	r4, sl
 8005a74:	2000      	movs	r0, #0
 8005a76:	f04f 0c0a 	mov.w	ip, #10
 8005a7a:	9a07      	ldr	r2, [sp, #28]
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a82:	3b30      	subs	r3, #48	; 0x30
 8005a84:	2b09      	cmp	r3, #9
 8005a86:	d94e      	bls.n	8005b26 <_svfiprintf_r+0x17e>
 8005a88:	b1b0      	cbz	r0, 8005ab8 <_svfiprintf_r+0x110>
 8005a8a:	9207      	str	r2, [sp, #28]
 8005a8c:	e014      	b.n	8005ab8 <_svfiprintf_r+0x110>
 8005a8e:	eba0 0308 	sub.w	r3, r0, r8
 8005a92:	fa09 f303 	lsl.w	r3, r9, r3
 8005a96:	4313      	orrs	r3, r2
 8005a98:	46a2      	mov	sl, r4
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	e7d2      	b.n	8005a44 <_svfiprintf_r+0x9c>
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	1d19      	adds	r1, r3, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	9103      	str	r1, [sp, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfbb      	ittet	lt
 8005aaa:	425b      	neglt	r3, r3
 8005aac:	f042 0202 	orrlt.w	r2, r2, #2
 8005ab0:	9307      	strge	r3, [sp, #28]
 8005ab2:	9307      	strlt	r3, [sp, #28]
 8005ab4:	bfb8      	it	lt
 8005ab6:	9204      	strlt	r2, [sp, #16]
 8005ab8:	7823      	ldrb	r3, [r4, #0]
 8005aba:	2b2e      	cmp	r3, #46	; 0x2e
 8005abc:	d10c      	bne.n	8005ad8 <_svfiprintf_r+0x130>
 8005abe:	7863      	ldrb	r3, [r4, #1]
 8005ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac2:	d135      	bne.n	8005b30 <_svfiprintf_r+0x188>
 8005ac4:	9b03      	ldr	r3, [sp, #12]
 8005ac6:	3402      	adds	r4, #2
 8005ac8:	1d1a      	adds	r2, r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	9203      	str	r2, [sp, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfb8      	it	lt
 8005ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ad6:	9305      	str	r3, [sp, #20]
 8005ad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ba4 <_svfiprintf_r+0x1fc>
 8005adc:	2203      	movs	r2, #3
 8005ade:	4650      	mov	r0, sl
 8005ae0:	7821      	ldrb	r1, [r4, #0]
 8005ae2:	f7ff fe9d 	bl	8005820 <memchr>
 8005ae6:	b140      	cbz	r0, 8005afa <_svfiprintf_r+0x152>
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	eba0 000a 	sub.w	r0, r0, sl
 8005aee:	fa03 f000 	lsl.w	r0, r3, r0
 8005af2:	9b04      	ldr	r3, [sp, #16]
 8005af4:	3401      	adds	r4, #1
 8005af6:	4303      	orrs	r3, r0
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afe:	2206      	movs	r2, #6
 8005b00:	4825      	ldr	r0, [pc, #148]	; (8005b98 <_svfiprintf_r+0x1f0>)
 8005b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b06:	f7ff fe8b 	bl	8005820 <memchr>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d038      	beq.n	8005b80 <_svfiprintf_r+0x1d8>
 8005b0e:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <_svfiprintf_r+0x1f4>)
 8005b10:	bb1b      	cbnz	r3, 8005b5a <_svfiprintf_r+0x1b2>
 8005b12:	9b03      	ldr	r3, [sp, #12]
 8005b14:	3307      	adds	r3, #7
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	9303      	str	r3, [sp, #12]
 8005b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b20:	4433      	add	r3, r6
 8005b22:	9309      	str	r3, [sp, #36]	; 0x24
 8005b24:	e767      	b.n	80059f6 <_svfiprintf_r+0x4e>
 8005b26:	460c      	mov	r4, r1
 8005b28:	2001      	movs	r0, #1
 8005b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b2e:	e7a5      	b.n	8005a7c <_svfiprintf_r+0xd4>
 8005b30:	2300      	movs	r3, #0
 8005b32:	f04f 0c0a 	mov.w	ip, #10
 8005b36:	4619      	mov	r1, r3
 8005b38:	3401      	adds	r4, #1
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b42:	3a30      	subs	r2, #48	; 0x30
 8005b44:	2a09      	cmp	r2, #9
 8005b46:	d903      	bls.n	8005b50 <_svfiprintf_r+0x1a8>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0c5      	beq.n	8005ad8 <_svfiprintf_r+0x130>
 8005b4c:	9105      	str	r1, [sp, #20]
 8005b4e:	e7c3      	b.n	8005ad8 <_svfiprintf_r+0x130>
 8005b50:	4604      	mov	r4, r0
 8005b52:	2301      	movs	r3, #1
 8005b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b58:	e7f0      	b.n	8005b3c <_svfiprintf_r+0x194>
 8005b5a:	ab03      	add	r3, sp, #12
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	462a      	mov	r2, r5
 8005b60:	4638      	mov	r0, r7
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <_svfiprintf_r+0x1f8>)
 8005b64:	a904      	add	r1, sp, #16
 8005b66:	f3af 8000 	nop.w
 8005b6a:	1c42      	adds	r2, r0, #1
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	d1d6      	bne.n	8005b1e <_svfiprintf_r+0x176>
 8005b70:	89ab      	ldrh	r3, [r5, #12]
 8005b72:	065b      	lsls	r3, r3, #25
 8005b74:	f53f af2c 	bmi.w	80059d0 <_svfiprintf_r+0x28>
 8005b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b7a:	b01d      	add	sp, #116	; 0x74
 8005b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b80:	ab03      	add	r3, sp, #12
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	462a      	mov	r2, r5
 8005b86:	4638      	mov	r0, r7
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <_svfiprintf_r+0x1f8>)
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	f7ff f854 	bl	8004c38 <_printf_i>
 8005b90:	e7eb      	b.n	8005b6a <_svfiprintf_r+0x1c2>
 8005b92:	bf00      	nop
 8005b94:	08006e98 	.word	0x08006e98
 8005b98:	08006ea2 	.word	0x08006ea2
 8005b9c:	00000000 	.word	0x00000000
 8005ba0:	080058f1 	.word	0x080058f1
 8005ba4:	08006e9e 	.word	0x08006e9e

08005ba8 <_raise_r>:
 8005ba8:	291f      	cmp	r1, #31
 8005baa:	b538      	push	{r3, r4, r5, lr}
 8005bac:	4604      	mov	r4, r0
 8005bae:	460d      	mov	r5, r1
 8005bb0:	d904      	bls.n	8005bbc <_raise_r+0x14>
 8005bb2:	2316      	movs	r3, #22
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bbe:	b112      	cbz	r2, 8005bc6 <_raise_r+0x1e>
 8005bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bc4:	b94b      	cbnz	r3, 8005bda <_raise_r+0x32>
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 f830 	bl	8005c2c <_getpid_r>
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4601      	mov	r1, r0
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd6:	f000 b817 	b.w	8005c08 <_kill_r>
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d00a      	beq.n	8005bf4 <_raise_r+0x4c>
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	d103      	bne.n	8005bea <_raise_r+0x42>
 8005be2:	2316      	movs	r3, #22
 8005be4:	6003      	str	r3, [r0, #0]
 8005be6:	2001      	movs	r0, #1
 8005be8:	e7e7      	b.n	8005bba <_raise_r+0x12>
 8005bea:	2400      	movs	r4, #0
 8005bec:	4628      	mov	r0, r5
 8005bee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bf2:	4798      	blx	r3
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	e7e0      	b.n	8005bba <_raise_r+0x12>

08005bf8 <raise>:
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <raise+0xc>)
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	f7ff bfd3 	b.w	8005ba8 <_raise_r>
 8005c02:	bf00      	nop
 8005c04:	2000002c 	.word	0x2000002c

08005c08 <_kill_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4d06      	ldr	r5, [pc, #24]	; (8005c28 <_kill_r+0x20>)
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	f7fc fd42 	bl	800269e <_kill>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d102      	bne.n	8005c24 <_kill_r+0x1c>
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	b103      	cbz	r3, 8005c24 <_kill_r+0x1c>
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20000258 	.word	0x20000258

08005c2c <_getpid_r>:
 8005c2c:	f7fc bd30 	b.w	8002690 <_getpid>

08005c30 <__sread>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	460c      	mov	r4, r1
 8005c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c38:	f000 f8a8 	bl	8005d8c <_read_r>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	bfab      	itete	ge
 8005c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c42:	89a3      	ldrhlt	r3, [r4, #12]
 8005c44:	181b      	addge	r3, r3, r0
 8005c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c4a:	bfac      	ite	ge
 8005c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c4e:	81a3      	strhlt	r3, [r4, #12]
 8005c50:	bd10      	pop	{r4, pc}

08005c52 <__swrite>:
 8005c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c56:	461f      	mov	r7, r3
 8005c58:	898b      	ldrh	r3, [r1, #12]
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	05db      	lsls	r3, r3, #23
 8005c5e:	460c      	mov	r4, r1
 8005c60:	4616      	mov	r6, r2
 8005c62:	d505      	bpl.n	8005c70 <__swrite+0x1e>
 8005c64:	2302      	movs	r3, #2
 8005c66:	2200      	movs	r2, #0
 8005c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6c:	f000 f874 	bl	8005d58 <_lseek_r>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	4632      	mov	r2, r6
 8005c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	f000 b823 	b.w	8005cd0 <_write_r>

08005c8a <__sseek>:
 8005c8a:	b510      	push	{r4, lr}
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c92:	f000 f861 	bl	8005d58 <_lseek_r>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	bf15      	itete	ne
 8005c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ca6:	81a3      	strheq	r3, [r4, #12]
 8005ca8:	bf18      	it	ne
 8005caa:	81a3      	strhne	r3, [r4, #12]
 8005cac:	bd10      	pop	{r4, pc}

08005cae <__sclose>:
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 b81f 	b.w	8005cf4 <_close_r>

08005cb6 <strchr>:
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	b2c9      	uxtb	r1, r1
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc0:	b112      	cbz	r2, 8005cc8 <strchr+0x12>
 8005cc2:	428a      	cmp	r2, r1
 8005cc4:	d1f9      	bne.n	8005cba <strchr+0x4>
 8005cc6:	4770      	bx	lr
 8005cc8:	2900      	cmp	r1, #0
 8005cca:	bf18      	it	ne
 8005ccc:	2000      	movne	r0, #0
 8005cce:	4770      	bx	lr

08005cd0 <_write_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	2200      	movs	r2, #0
 8005cda:	4d05      	ldr	r5, [pc, #20]	; (8005cf0 <_write_r+0x20>)
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f7fc fd14 	bl	800270c <_write>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_write_r+0x1e>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_write_r+0x1e>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	20000258 	.word	0x20000258

08005cf4 <_close_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4d05      	ldr	r5, [pc, #20]	; (8005d10 <_close_r+0x1c>)
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	f7fc fd4c 	bl	800279c <_close>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_close_r+0x1a>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_close_r+0x1a>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	20000258 	.word	0x20000258

08005d14 <_fstat_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	2300      	movs	r3, #0
 8005d18:	4d06      	ldr	r5, [pc, #24]	; (8005d34 <_fstat_r+0x20>)
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	4611      	mov	r1, r2
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	f7fc fd46 	bl	80027b2 <_fstat>
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	d102      	bne.n	8005d30 <_fstat_r+0x1c>
 8005d2a:	682b      	ldr	r3, [r5, #0]
 8005d2c:	b103      	cbz	r3, 8005d30 <_fstat_r+0x1c>
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	bd38      	pop	{r3, r4, r5, pc}
 8005d32:	bf00      	nop
 8005d34:	20000258 	.word	0x20000258

08005d38 <_isatty_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	4d05      	ldr	r5, [pc, #20]	; (8005d54 <_isatty_r+0x1c>)
 8005d3e:	4604      	mov	r4, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	f7fc fd44 	bl	80027d0 <_isatty>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_isatty_r+0x1a>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_isatty_r+0x1a>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	20000258 	.word	0x20000258

08005d58 <_lseek_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	2200      	movs	r2, #0
 8005d62:	4d05      	ldr	r5, [pc, #20]	; (8005d78 <_lseek_r+0x20>)
 8005d64:	602a      	str	r2, [r5, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f7fc fd3c 	bl	80027e4 <_lseek>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_lseek_r+0x1e>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_lseek_r+0x1e>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	20000258 	.word	0x20000258

08005d7c <_malloc_usable_size_r>:
 8005d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d80:	1f18      	subs	r0, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bfbc      	itt	lt
 8005d86:	580b      	ldrlt	r3, [r1, r0]
 8005d88:	18c0      	addlt	r0, r0, r3
 8005d8a:	4770      	bx	lr

08005d8c <_read_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	2200      	movs	r2, #0
 8005d96:	4d05      	ldr	r5, [pc, #20]	; (8005dac <_read_r+0x20>)
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f7fc fc99 	bl	80026d2 <_read>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_read_r+0x1e>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_read_r+0x1e>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	20000258 	.word	0x20000258

08005db0 <pow>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	461f      	mov	r7, r3
 8005db6:	4680      	mov	r8, r0
 8005db8:	4689      	mov	r9, r1
 8005dba:	4616      	mov	r6, r2
 8005dbc:	f000 f8a4 	bl	8005f08 <__ieee754_pow>
 8005dc0:	4b4d      	ldr	r3, [pc, #308]	; (8005ef8 <pow+0x148>)
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8005dc8:	460d      	mov	r5, r1
 8005dca:	3301      	adds	r3, #1
 8005dcc:	d015      	beq.n	8005dfa <pow+0x4a>
 8005dce:	4632      	mov	r2, r6
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	f7fa fe19 	bl	8000a0c <__aeabi_dcmpun>
 8005dda:	b970      	cbnz	r0, 8005dfa <pow+0x4a>
 8005ddc:	4642      	mov	r2, r8
 8005dde:	464b      	mov	r3, r9
 8005de0:	4640      	mov	r0, r8
 8005de2:	4649      	mov	r1, r9
 8005de4:	f7fa fe12 	bl	8000a0c <__aeabi_dcmpun>
 8005de8:	2200      	movs	r2, #0
 8005dea:	2300      	movs	r3, #0
 8005dec:	b148      	cbz	r0, 8005e02 <pow+0x52>
 8005dee:	4630      	mov	r0, r6
 8005df0:	4639      	mov	r1, r7
 8005df2:	f7fa fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d17b      	bne.n	8005ef2 <pow+0x142>
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e02:	4640      	mov	r0, r8
 8005e04:	4649      	mov	r1, r9
 8005e06:	f7fa fdcf 	bl	80009a8 <__aeabi_dcmpeq>
 8005e0a:	b1e0      	cbz	r0, 8005e46 <pow+0x96>
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	f7fa fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d16a      	bne.n	8005ef2 <pow+0x142>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f000 fe37 	bl	8006a92 <finite>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d0e8      	beq.n	8005dfa <pow+0x4a>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	4639      	mov	r1, r7
 8005e30:	f7fa fdc4 	bl	80009bc <__aeabi_dcmplt>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d0e0      	beq.n	8005dfa <pow+0x4a>
 8005e38:	f7fe fc3c 	bl	80046b4 <__errno>
 8005e3c:	2321      	movs	r3, #33	; 0x21
 8005e3e:	2400      	movs	r4, #0
 8005e40:	6003      	str	r3, [r0, #0]
 8005e42:	4d2e      	ldr	r5, [pc, #184]	; (8005efc <pow+0x14c>)
 8005e44:	e7d9      	b.n	8005dfa <pow+0x4a>
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f000 fe22 	bl	8006a92 <finite>
 8005e4e:	bba8      	cbnz	r0, 8005ebc <pow+0x10c>
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f000 fe1d 	bl	8006a92 <finite>
 8005e58:	b380      	cbz	r0, 8005ebc <pow+0x10c>
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	f000 fe18 	bl	8006a92 <finite>
 8005e62:	b358      	cbz	r0, 8005ebc <pow+0x10c>
 8005e64:	4622      	mov	r2, r4
 8005e66:	462b      	mov	r3, r5
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa fdce 	bl	8000a0c <__aeabi_dcmpun>
 8005e70:	b160      	cbz	r0, 8005e8c <pow+0xdc>
 8005e72:	f7fe fc1f 	bl	80046b4 <__errno>
 8005e76:	2321      	movs	r3, #33	; 0x21
 8005e78:	2200      	movs	r2, #0
 8005e7a:	6003      	str	r3, [r0, #0]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	f7fa fc53 	bl	800072c <__aeabi_ddiv>
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	e7b6      	b.n	8005dfa <pow+0x4a>
 8005e8c:	f7fe fc12 	bl	80046b4 <__errno>
 8005e90:	2322      	movs	r3, #34	; 0x22
 8005e92:	2200      	movs	r2, #0
 8005e94:	6003      	str	r3, [r0, #0]
 8005e96:	4649      	mov	r1, r9
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f7fa fd8e 	bl	80009bc <__aeabi_dcmplt>
 8005ea0:	2400      	movs	r4, #0
 8005ea2:	b148      	cbz	r0, 8005eb8 <pow+0x108>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	f000 fe00 	bl	8006aac <rint>
 8005eac:	4632      	mov	r2, r6
 8005eae:	463b      	mov	r3, r7
 8005eb0:	f7fa fd7a 	bl	80009a8 <__aeabi_dcmpeq>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d0c4      	beq.n	8005e42 <pow+0x92>
 8005eb8:	4d11      	ldr	r5, [pc, #68]	; (8005f00 <pow+0x150>)
 8005eba:	e79e      	b.n	8005dfa <pow+0x4a>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	f7fa fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d096      	beq.n	8005dfa <pow+0x4a>
 8005ecc:	4640      	mov	r0, r8
 8005ece:	4649      	mov	r1, r9
 8005ed0:	f000 fddf 	bl	8006a92 <finite>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d090      	beq.n	8005dfa <pow+0x4a>
 8005ed8:	4630      	mov	r0, r6
 8005eda:	4639      	mov	r1, r7
 8005edc:	f000 fdd9 	bl	8006a92 <finite>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d08a      	beq.n	8005dfa <pow+0x4a>
 8005ee4:	f7fe fbe6 	bl	80046b4 <__errno>
 8005ee8:	2322      	movs	r3, #34	; 0x22
 8005eea:	2400      	movs	r4, #0
 8005eec:	2500      	movs	r5, #0
 8005eee:	6003      	str	r3, [r0, #0]
 8005ef0:	e783      	b.n	8005dfa <pow+0x4a>
 8005ef2:	2400      	movs	r4, #0
 8005ef4:	4d03      	ldr	r5, [pc, #12]	; (8005f04 <pow+0x154>)
 8005ef6:	e780      	b.n	8005dfa <pow+0x4a>
 8005ef8:	20000090 	.word	0x20000090
 8005efc:	fff00000 	.word	0xfff00000
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	3ff00000 	.word	0x3ff00000

08005f08 <__ieee754_pow>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	b093      	sub	sp, #76	; 0x4c
 8005f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f12:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005f16:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005f1a:	ea55 0302 	orrs.w	r3, r5, r2
 8005f1e:	4607      	mov	r7, r0
 8005f20:	4688      	mov	r8, r1
 8005f22:	f000 84bf 	beq.w	80068a4 <__ieee754_pow+0x99c>
 8005f26:	4b7e      	ldr	r3, [pc, #504]	; (8006120 <__ieee754_pow+0x218>)
 8005f28:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	4689      	mov	r9, r1
 8005f30:	4682      	mov	sl, r0
 8005f32:	dc09      	bgt.n	8005f48 <__ieee754_pow+0x40>
 8005f34:	d103      	bne.n	8005f3e <__ieee754_pow+0x36>
 8005f36:	b978      	cbnz	r0, 8005f58 <__ieee754_pow+0x50>
 8005f38:	42a5      	cmp	r5, r4
 8005f3a:	dd02      	ble.n	8005f42 <__ieee754_pow+0x3a>
 8005f3c:	e00c      	b.n	8005f58 <__ieee754_pow+0x50>
 8005f3e:	429d      	cmp	r5, r3
 8005f40:	dc02      	bgt.n	8005f48 <__ieee754_pow+0x40>
 8005f42:	429d      	cmp	r5, r3
 8005f44:	d10e      	bne.n	8005f64 <__ieee754_pow+0x5c>
 8005f46:	b16a      	cbz	r2, 8005f64 <__ieee754_pow+0x5c>
 8005f48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005f4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f50:	ea54 030a 	orrs.w	r3, r4, sl
 8005f54:	f000 84a6 	beq.w	80068a4 <__ieee754_pow+0x99c>
 8005f58:	4872      	ldr	r0, [pc, #456]	; (8006124 <__ieee754_pow+0x21c>)
 8005f5a:	b013      	add	sp, #76	; 0x4c
 8005f5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	f000 bd9e 	b.w	8006aa0 <nan>
 8005f64:	f1b9 0f00 	cmp.w	r9, #0
 8005f68:	da39      	bge.n	8005fde <__ieee754_pow+0xd6>
 8005f6a:	4b6f      	ldr	r3, [pc, #444]	; (8006128 <__ieee754_pow+0x220>)
 8005f6c:	429d      	cmp	r5, r3
 8005f6e:	dc54      	bgt.n	800601a <__ieee754_pow+0x112>
 8005f70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005f74:	429d      	cmp	r5, r3
 8005f76:	f340 84a6 	ble.w	80068c6 <__ieee754_pow+0x9be>
 8005f7a:	152b      	asrs	r3, r5, #20
 8005f7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f80:	2b14      	cmp	r3, #20
 8005f82:	dd0f      	ble.n	8005fa4 <__ieee754_pow+0x9c>
 8005f84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005f88:	fa22 f103 	lsr.w	r1, r2, r3
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	4293      	cmp	r3, r2
 8005f92:	f040 8498 	bne.w	80068c6 <__ieee754_pow+0x9be>
 8005f96:	f001 0101 	and.w	r1, r1, #1
 8005f9a:	f1c1 0302 	rsb	r3, r1, #2
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	b182      	cbz	r2, 8005fc4 <__ieee754_pow+0xbc>
 8005fa2:	e05e      	b.n	8006062 <__ieee754_pow+0x15a>
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d15a      	bne.n	800605e <__ieee754_pow+0x156>
 8005fa8:	f1c3 0314 	rsb	r3, r3, #20
 8005fac:	fa45 f103 	asr.w	r1, r5, r3
 8005fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb4:	42ab      	cmp	r3, r5
 8005fb6:	f040 8483 	bne.w	80068c0 <__ieee754_pow+0x9b8>
 8005fba:	f001 0101 	and.w	r1, r1, #1
 8005fbe:	f1c1 0302 	rsb	r3, r1, #2
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4b59      	ldr	r3, [pc, #356]	; (800612c <__ieee754_pow+0x224>)
 8005fc6:	429d      	cmp	r5, r3
 8005fc8:	d130      	bne.n	800602c <__ieee754_pow+0x124>
 8005fca:	2e00      	cmp	r6, #0
 8005fcc:	f280 8474 	bge.w	80068b8 <__ieee754_pow+0x9b0>
 8005fd0:	463a      	mov	r2, r7
 8005fd2:	4643      	mov	r3, r8
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	4955      	ldr	r1, [pc, #340]	; (800612c <__ieee754_pow+0x224>)
 8005fd8:	f7fa fba8 	bl	800072c <__aeabi_ddiv>
 8005fdc:	e02f      	b.n	800603e <__ieee754_pow+0x136>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	2a00      	cmp	r2, #0
 8005fe4:	d13d      	bne.n	8006062 <__ieee754_pow+0x15a>
 8005fe6:	4b4e      	ldr	r3, [pc, #312]	; (8006120 <__ieee754_pow+0x218>)
 8005fe8:	429d      	cmp	r5, r3
 8005fea:	d1eb      	bne.n	8005fc4 <__ieee754_pow+0xbc>
 8005fec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005ff0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005ff4:	ea53 030a 	orrs.w	r3, r3, sl
 8005ff8:	f000 8454 	beq.w	80068a4 <__ieee754_pow+0x99c>
 8005ffc:	4b4c      	ldr	r3, [pc, #304]	; (8006130 <__ieee754_pow+0x228>)
 8005ffe:	429c      	cmp	r4, r3
 8006000:	dd0d      	ble.n	800601e <__ieee754_pow+0x116>
 8006002:	2e00      	cmp	r6, #0
 8006004:	f280 8454 	bge.w	80068b0 <__ieee754_pow+0x9a8>
 8006008:	f04f 0b00 	mov.w	fp, #0
 800600c:	f04f 0c00 	mov.w	ip, #0
 8006010:	4658      	mov	r0, fp
 8006012:	4661      	mov	r1, ip
 8006014:	b013      	add	sp, #76	; 0x4c
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	2302      	movs	r3, #2
 800601c:	e7e0      	b.n	8005fe0 <__ieee754_pow+0xd8>
 800601e:	2e00      	cmp	r6, #0
 8006020:	daf2      	bge.n	8006008 <__ieee754_pow+0x100>
 8006022:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006026:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800602a:	e7f1      	b.n	8006010 <__ieee754_pow+0x108>
 800602c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006030:	d108      	bne.n	8006044 <__ieee754_pow+0x13c>
 8006032:	463a      	mov	r2, r7
 8006034:	4643      	mov	r3, r8
 8006036:	4638      	mov	r0, r7
 8006038:	4641      	mov	r1, r8
 800603a:	f7fa fa4d 	bl	80004d8 <__aeabi_dmul>
 800603e:	4683      	mov	fp, r0
 8006040:	468c      	mov	ip, r1
 8006042:	e7e5      	b.n	8006010 <__ieee754_pow+0x108>
 8006044:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <__ieee754_pow+0x22c>)
 8006046:	429e      	cmp	r6, r3
 8006048:	d10b      	bne.n	8006062 <__ieee754_pow+0x15a>
 800604a:	f1b9 0f00 	cmp.w	r9, #0
 800604e:	db08      	blt.n	8006062 <__ieee754_pow+0x15a>
 8006050:	4638      	mov	r0, r7
 8006052:	4641      	mov	r1, r8
 8006054:	b013      	add	sp, #76	; 0x4c
 8006056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	f000 bc6b 	b.w	8006934 <__ieee754_sqrt>
 800605e:	2300      	movs	r3, #0
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4638      	mov	r0, r7
 8006064:	4641      	mov	r1, r8
 8006066:	f000 fd11 	bl	8006a8c <fabs>
 800606a:	4683      	mov	fp, r0
 800606c:	468c      	mov	ip, r1
 800606e:	f1ba 0f00 	cmp.w	sl, #0
 8006072:	d129      	bne.n	80060c8 <__ieee754_pow+0x1c0>
 8006074:	b124      	cbz	r4, 8006080 <__ieee754_pow+0x178>
 8006076:	4b2d      	ldr	r3, [pc, #180]	; (800612c <__ieee754_pow+0x224>)
 8006078:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800607c:	429a      	cmp	r2, r3
 800607e:	d123      	bne.n	80060c8 <__ieee754_pow+0x1c0>
 8006080:	2e00      	cmp	r6, #0
 8006082:	da07      	bge.n	8006094 <__ieee754_pow+0x18c>
 8006084:	465a      	mov	r2, fp
 8006086:	4663      	mov	r3, ip
 8006088:	2000      	movs	r0, #0
 800608a:	4928      	ldr	r1, [pc, #160]	; (800612c <__ieee754_pow+0x224>)
 800608c:	f7fa fb4e 	bl	800072c <__aeabi_ddiv>
 8006090:	4683      	mov	fp, r0
 8006092:	468c      	mov	ip, r1
 8006094:	f1b9 0f00 	cmp.w	r9, #0
 8006098:	daba      	bge.n	8006010 <__ieee754_pow+0x108>
 800609a:	9b00      	ldr	r3, [sp, #0]
 800609c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80060a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80060a4:	4323      	orrs	r3, r4
 80060a6:	d108      	bne.n	80060ba <__ieee754_pow+0x1b2>
 80060a8:	465a      	mov	r2, fp
 80060aa:	4663      	mov	r3, ip
 80060ac:	4658      	mov	r0, fp
 80060ae:	4661      	mov	r1, ip
 80060b0:	f7fa f85a 	bl	8000168 <__aeabi_dsub>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	e78e      	b.n	8005fd8 <__ieee754_pow+0xd0>
 80060ba:	9b00      	ldr	r3, [sp, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d1a7      	bne.n	8006010 <__ieee754_pow+0x108>
 80060c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80060c4:	469c      	mov	ip, r3
 80060c6:	e7a3      	b.n	8006010 <__ieee754_pow+0x108>
 80060c8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80060cc:	3b01      	subs	r3, #1
 80060ce:	930c      	str	r3, [sp, #48]	; 0x30
 80060d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d104      	bne.n	80060e2 <__ieee754_pow+0x1da>
 80060d8:	463a      	mov	r2, r7
 80060da:	4643      	mov	r3, r8
 80060dc:	4638      	mov	r0, r7
 80060de:	4641      	mov	r1, r8
 80060e0:	e7e6      	b.n	80060b0 <__ieee754_pow+0x1a8>
 80060e2:	4b15      	ldr	r3, [pc, #84]	; (8006138 <__ieee754_pow+0x230>)
 80060e4:	429d      	cmp	r5, r3
 80060e6:	f340 80f9 	ble.w	80062dc <__ieee754_pow+0x3d4>
 80060ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80060ee:	429d      	cmp	r5, r3
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <__ieee754_pow+0x228>)
 80060f2:	dd09      	ble.n	8006108 <__ieee754_pow+0x200>
 80060f4:	429c      	cmp	r4, r3
 80060f6:	dc0c      	bgt.n	8006112 <__ieee754_pow+0x20a>
 80060f8:	2e00      	cmp	r6, #0
 80060fa:	da85      	bge.n	8006008 <__ieee754_pow+0x100>
 80060fc:	a306      	add	r3, pc, #24	; (adr r3, 8006118 <__ieee754_pow+0x210>)
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	e798      	b.n	800603a <__ieee754_pow+0x132>
 8006108:	429c      	cmp	r4, r3
 800610a:	dbf5      	blt.n	80060f8 <__ieee754_pow+0x1f0>
 800610c:	4b07      	ldr	r3, [pc, #28]	; (800612c <__ieee754_pow+0x224>)
 800610e:	429c      	cmp	r4, r3
 8006110:	dd14      	ble.n	800613c <__ieee754_pow+0x234>
 8006112:	2e00      	cmp	r6, #0
 8006114:	dcf2      	bgt.n	80060fc <__ieee754_pow+0x1f4>
 8006116:	e777      	b.n	8006008 <__ieee754_pow+0x100>
 8006118:	8800759c 	.word	0x8800759c
 800611c:	7e37e43c 	.word	0x7e37e43c
 8006120:	7ff00000 	.word	0x7ff00000
 8006124:	08006e93 	.word	0x08006e93
 8006128:	433fffff 	.word	0x433fffff
 800612c:	3ff00000 	.word	0x3ff00000
 8006130:	3fefffff 	.word	0x3fefffff
 8006134:	3fe00000 	.word	0x3fe00000
 8006138:	41e00000 	.word	0x41e00000
 800613c:	4661      	mov	r1, ip
 800613e:	2200      	movs	r2, #0
 8006140:	4658      	mov	r0, fp
 8006142:	4b61      	ldr	r3, [pc, #388]	; (80062c8 <__ieee754_pow+0x3c0>)
 8006144:	f7fa f810 	bl	8000168 <__aeabi_dsub>
 8006148:	a355      	add	r3, pc, #340	; (adr r3, 80062a0 <__ieee754_pow+0x398>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	4604      	mov	r4, r0
 8006150:	460d      	mov	r5, r1
 8006152:	f7fa f9c1 	bl	80004d8 <__aeabi_dmul>
 8006156:	a354      	add	r3, pc, #336	; (adr r3, 80062a8 <__ieee754_pow+0x3a0>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	4606      	mov	r6, r0
 800615e:	460f      	mov	r7, r1
 8006160:	4620      	mov	r0, r4
 8006162:	4629      	mov	r1, r5
 8006164:	f7fa f9b8 	bl	80004d8 <__aeabi_dmul>
 8006168:	2200      	movs	r2, #0
 800616a:	4682      	mov	sl, r0
 800616c:	468b      	mov	fp, r1
 800616e:	4620      	mov	r0, r4
 8006170:	4629      	mov	r1, r5
 8006172:	4b56      	ldr	r3, [pc, #344]	; (80062cc <__ieee754_pow+0x3c4>)
 8006174:	f7fa f9b0 	bl	80004d8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	a14c      	add	r1, pc, #304	; (adr r1, 80062b0 <__ieee754_pow+0x3a8>)
 800617e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006182:	f7f9 fff1 	bl	8000168 <__aeabi_dsub>
 8006186:	4622      	mov	r2, r4
 8006188:	462b      	mov	r3, r5
 800618a:	f7fa f9a5 	bl	80004d8 <__aeabi_dmul>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	2000      	movs	r0, #0
 8006194:	494e      	ldr	r1, [pc, #312]	; (80062d0 <__ieee754_pow+0x3c8>)
 8006196:	f7f9 ffe7 	bl	8000168 <__aeabi_dsub>
 800619a:	4622      	mov	r2, r4
 800619c:	462b      	mov	r3, r5
 800619e:	4680      	mov	r8, r0
 80061a0:	4689      	mov	r9, r1
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7fa f997 	bl	80004d8 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4640      	mov	r0, r8
 80061b0:	4649      	mov	r1, r9
 80061b2:	f7fa f991 	bl	80004d8 <__aeabi_dmul>
 80061b6:	a340      	add	r3, pc, #256	; (adr r3, 80062b8 <__ieee754_pow+0x3b0>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f7fa f98c 	bl	80004d8 <__aeabi_dmul>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4650      	mov	r0, sl
 80061c6:	4659      	mov	r1, fp
 80061c8:	f7f9 ffce 	bl	8000168 <__aeabi_dsub>
 80061cc:	f04f 0a00 	mov.w	sl, #0
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4604      	mov	r4, r0
 80061d6:	460d      	mov	r5, r1
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	f7f9 ffc6 	bl	800016c <__adddf3>
 80061e0:	4632      	mov	r2, r6
 80061e2:	463b      	mov	r3, r7
 80061e4:	4650      	mov	r0, sl
 80061e6:	468b      	mov	fp, r1
 80061e8:	f7f9 ffbe 	bl	8000168 <__aeabi_dsub>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4620      	mov	r0, r4
 80061f2:	4629      	mov	r1, r5
 80061f4:	f7f9 ffb8 	bl	8000168 <__aeabi_dsub>
 80061f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006200:	3b01      	subs	r3, #1
 8006202:	4313      	orrs	r3, r2
 8006204:	f04f 0600 	mov.w	r6, #0
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	bf0c      	ite	eq
 800620e:	4b31      	ldreq	r3, [pc, #196]	; (80062d4 <__ieee754_pow+0x3cc>)
 8006210:	4b2d      	ldrne	r3, [pc, #180]	; (80062c8 <__ieee754_pow+0x3c0>)
 8006212:	4604      	mov	r4, r0
 8006214:	460d      	mov	r5, r1
 8006216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800621a:	e9cd 2300 	strd	r2, r3, [sp]
 800621e:	4632      	mov	r2, r6
 8006220:	463b      	mov	r3, r7
 8006222:	f7f9 ffa1 	bl	8000168 <__aeabi_dsub>
 8006226:	4652      	mov	r2, sl
 8006228:	465b      	mov	r3, fp
 800622a:	f7fa f955 	bl	80004d8 <__aeabi_dmul>
 800622e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006232:	4680      	mov	r8, r0
 8006234:	4689      	mov	r9, r1
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	f7fa f94d 	bl	80004d8 <__aeabi_dmul>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7f9 ff91 	bl	800016c <__adddf3>
 800624a:	4632      	mov	r2, r6
 800624c:	463b      	mov	r3, r7
 800624e:	4680      	mov	r8, r0
 8006250:	4689      	mov	r9, r1
 8006252:	4650      	mov	r0, sl
 8006254:	4659      	mov	r1, fp
 8006256:	f7fa f93f 	bl	80004d8 <__aeabi_dmul>
 800625a:	4604      	mov	r4, r0
 800625c:	460d      	mov	r5, r1
 800625e:	460b      	mov	r3, r1
 8006260:	4602      	mov	r2, r0
 8006262:	4649      	mov	r1, r9
 8006264:	4640      	mov	r0, r8
 8006266:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800626a:	f7f9 ff7f 	bl	800016c <__adddf3>
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <__ieee754_pow+0x3d0>)
 8006270:	4682      	mov	sl, r0
 8006272:	4299      	cmp	r1, r3
 8006274:	460f      	mov	r7, r1
 8006276:	460e      	mov	r6, r1
 8006278:	f340 82ed 	ble.w	8006856 <__ieee754_pow+0x94e>
 800627c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006280:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006284:	4303      	orrs	r3, r0
 8006286:	f000 81e7 	beq.w	8006658 <__ieee754_pow+0x750>
 800628a:	a30d      	add	r3, pc, #52	; (adr r3, 80062c0 <__ieee754_pow+0x3b8>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006294:	f7fa f920 	bl	80004d8 <__aeabi_dmul>
 8006298:	a309      	add	r3, pc, #36	; (adr r3, 80062c0 <__ieee754_pow+0x3b8>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	e6cc      	b.n	800603a <__ieee754_pow+0x132>
 80062a0:	60000000 	.word	0x60000000
 80062a4:	3ff71547 	.word	0x3ff71547
 80062a8:	f85ddf44 	.word	0xf85ddf44
 80062ac:	3e54ae0b 	.word	0x3e54ae0b
 80062b0:	55555555 	.word	0x55555555
 80062b4:	3fd55555 	.word	0x3fd55555
 80062b8:	652b82fe 	.word	0x652b82fe
 80062bc:	3ff71547 	.word	0x3ff71547
 80062c0:	8800759c 	.word	0x8800759c
 80062c4:	7e37e43c 	.word	0x7e37e43c
 80062c8:	3ff00000 	.word	0x3ff00000
 80062cc:	3fd00000 	.word	0x3fd00000
 80062d0:	3fe00000 	.word	0x3fe00000
 80062d4:	bff00000 	.word	0xbff00000
 80062d8:	408fffff 	.word	0x408fffff
 80062dc:	4bd4      	ldr	r3, [pc, #848]	; (8006630 <__ieee754_pow+0x728>)
 80062de:	2200      	movs	r2, #0
 80062e0:	ea09 0303 	and.w	r3, r9, r3
 80062e4:	b943      	cbnz	r3, 80062f8 <__ieee754_pow+0x3f0>
 80062e6:	4658      	mov	r0, fp
 80062e8:	4661      	mov	r1, ip
 80062ea:	4bd2      	ldr	r3, [pc, #840]	; (8006634 <__ieee754_pow+0x72c>)
 80062ec:	f7fa f8f4 	bl	80004d8 <__aeabi_dmul>
 80062f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80062f4:	4683      	mov	fp, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	1523      	asrs	r3, r4, #20
 80062fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062fe:	4413      	add	r3, r2
 8006300:	930b      	str	r3, [sp, #44]	; 0x2c
 8006302:	4bcd      	ldr	r3, [pc, #820]	; (8006638 <__ieee754_pow+0x730>)
 8006304:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006308:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800630c:	429c      	cmp	r4, r3
 800630e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006312:	dd08      	ble.n	8006326 <__ieee754_pow+0x41e>
 8006314:	4bc9      	ldr	r3, [pc, #804]	; (800663c <__ieee754_pow+0x734>)
 8006316:	429c      	cmp	r4, r3
 8006318:	f340 819c 	ble.w	8006654 <__ieee754_pow+0x74c>
 800631c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800631e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006322:	3301      	adds	r3, #1
 8006324:	930b      	str	r3, [sp, #44]	; 0x2c
 8006326:	2600      	movs	r6, #0
 8006328:	00f3      	lsls	r3, r6, #3
 800632a:	930d      	str	r3, [sp, #52]	; 0x34
 800632c:	4bc4      	ldr	r3, [pc, #784]	; (8006640 <__ieee754_pow+0x738>)
 800632e:	4658      	mov	r0, fp
 8006330:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006334:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006338:	4629      	mov	r1, r5
 800633a:	461a      	mov	r2, r3
 800633c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006340:	4623      	mov	r3, r4
 8006342:	f7f9 ff11 	bl	8000168 <__aeabi_dsub>
 8006346:	46da      	mov	sl, fp
 8006348:	462b      	mov	r3, r5
 800634a:	4652      	mov	r2, sl
 800634c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006354:	f7f9 ff0a 	bl	800016c <__adddf3>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	2000      	movs	r0, #0
 800635e:	49b9      	ldr	r1, [pc, #740]	; (8006644 <__ieee754_pow+0x73c>)
 8006360:	f7fa f9e4 	bl	800072c <__aeabi_ddiv>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800636c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006378:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800637c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006380:	2300      	movs	r3, #0
 8006382:	2200      	movs	r2, #0
 8006384:	46ab      	mov	fp, r5
 8006386:	106d      	asrs	r5, r5, #1
 8006388:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006392:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006396:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	4614      	mov	r4, r2
 80063a0:	461d      	mov	r5, r3
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063ae:	f7f9 fedb 	bl	8000168 <__aeabi_dsub>
 80063b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063b6:	4606      	mov	r6, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7f9 fed3 	bl	8000168 <__aeabi_dsub>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4650      	mov	r0, sl
 80063c8:	4659      	mov	r1, fp
 80063ca:	f7f9 fecd 	bl	8000168 <__aeabi_dsub>
 80063ce:	4642      	mov	r2, r8
 80063d0:	464b      	mov	r3, r9
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	f7f9 fec3 	bl	8000168 <__aeabi_dsub>
 80063e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063e6:	f7fa f877 	bl	80004d8 <__aeabi_dmul>
 80063ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fa f86f 	bl	80004d8 <__aeabi_dmul>
 80063fa:	a37b      	add	r3, pc, #492	; (adr r3, 80065e8 <__ieee754_pow+0x6e0>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	4604      	mov	r4, r0
 8006402:	460d      	mov	r5, r1
 8006404:	f7fa f868 	bl	80004d8 <__aeabi_dmul>
 8006408:	a379      	add	r3, pc, #484	; (adr r3, 80065f0 <__ieee754_pow+0x6e8>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7f9 fead 	bl	800016c <__adddf3>
 8006412:	4622      	mov	r2, r4
 8006414:	462b      	mov	r3, r5
 8006416:	f7fa f85f 	bl	80004d8 <__aeabi_dmul>
 800641a:	a377      	add	r3, pc, #476	; (adr r3, 80065f8 <__ieee754_pow+0x6f0>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7f9 fea4 	bl	800016c <__adddf3>
 8006424:	4622      	mov	r2, r4
 8006426:	462b      	mov	r3, r5
 8006428:	f7fa f856 	bl	80004d8 <__aeabi_dmul>
 800642c:	a374      	add	r3, pc, #464	; (adr r3, 8006600 <__ieee754_pow+0x6f8>)
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f7f9 fe9b 	bl	800016c <__adddf3>
 8006436:	4622      	mov	r2, r4
 8006438:	462b      	mov	r3, r5
 800643a:	f7fa f84d 	bl	80004d8 <__aeabi_dmul>
 800643e:	a372      	add	r3, pc, #456	; (adr r3, 8006608 <__ieee754_pow+0x700>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7f9 fe92 	bl	800016c <__adddf3>
 8006448:	4622      	mov	r2, r4
 800644a:	462b      	mov	r3, r5
 800644c:	f7fa f844 	bl	80004d8 <__aeabi_dmul>
 8006450:	a36f      	add	r3, pc, #444	; (adr r3, 8006610 <__ieee754_pow+0x708>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7f9 fe89 	bl	800016c <__adddf3>
 800645a:	4622      	mov	r2, r4
 800645c:	4606      	mov	r6, r0
 800645e:	460f      	mov	r7, r1
 8006460:	462b      	mov	r3, r5
 8006462:	4620      	mov	r0, r4
 8006464:	4629      	mov	r1, r5
 8006466:	f7fa f837 	bl	80004d8 <__aeabi_dmul>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4630      	mov	r0, r6
 8006470:	4639      	mov	r1, r7
 8006472:	f7fa f831 	bl	80004d8 <__aeabi_dmul>
 8006476:	4604      	mov	r4, r0
 8006478:	460d      	mov	r5, r1
 800647a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647e:	4642      	mov	r2, r8
 8006480:	464b      	mov	r3, r9
 8006482:	f7f9 fe73 	bl	800016c <__adddf3>
 8006486:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800648a:	f7fa f825 	bl	80004d8 <__aeabi_dmul>
 800648e:	4622      	mov	r2, r4
 8006490:	462b      	mov	r3, r5
 8006492:	f7f9 fe6b 	bl	800016c <__adddf3>
 8006496:	4642      	mov	r2, r8
 8006498:	4606      	mov	r6, r0
 800649a:	460f      	mov	r7, r1
 800649c:	464b      	mov	r3, r9
 800649e:	4640      	mov	r0, r8
 80064a0:	4649      	mov	r1, r9
 80064a2:	f7fa f819 	bl	80004d8 <__aeabi_dmul>
 80064a6:	2200      	movs	r2, #0
 80064a8:	4b67      	ldr	r3, [pc, #412]	; (8006648 <__ieee754_pow+0x740>)
 80064aa:	4682      	mov	sl, r0
 80064ac:	468b      	mov	fp, r1
 80064ae:	f7f9 fe5d 	bl	800016c <__adddf3>
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	f7f9 fe59 	bl	800016c <__adddf3>
 80064ba:	9c04      	ldr	r4, [sp, #16]
 80064bc:	460d      	mov	r5, r1
 80064be:	4622      	mov	r2, r4
 80064c0:	460b      	mov	r3, r1
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fa f807 	bl	80004d8 <__aeabi_dmul>
 80064ca:	2200      	movs	r2, #0
 80064cc:	4680      	mov	r8, r0
 80064ce:	4689      	mov	r9, r1
 80064d0:	4620      	mov	r0, r4
 80064d2:	4629      	mov	r1, r5
 80064d4:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <__ieee754_pow+0x740>)
 80064d6:	f7f9 fe47 	bl	8000168 <__aeabi_dsub>
 80064da:	4652      	mov	r2, sl
 80064dc:	465b      	mov	r3, fp
 80064de:	f7f9 fe43 	bl	8000168 <__aeabi_dsub>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4630      	mov	r0, r6
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7f9 fe3d 	bl	8000168 <__aeabi_dsub>
 80064ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064f2:	f7f9 fff1 	bl	80004d8 <__aeabi_dmul>
 80064f6:	4622      	mov	r2, r4
 80064f8:	4606      	mov	r6, r0
 80064fa:	460f      	mov	r7, r1
 80064fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006500:	462b      	mov	r3, r5
 8006502:	f7f9 ffe9 	bl	80004d8 <__aeabi_dmul>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4630      	mov	r0, r6
 800650c:	4639      	mov	r1, r7
 800650e:	f7f9 fe2d 	bl	800016c <__adddf3>
 8006512:	4606      	mov	r6, r0
 8006514:	460f      	mov	r7, r1
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	f7f9 fe25 	bl	800016c <__adddf3>
 8006522:	a33d      	add	r3, pc, #244	; (adr r3, 8006618 <__ieee754_pow+0x710>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	9c04      	ldr	r4, [sp, #16]
 800652a:	460d      	mov	r5, r1
 800652c:	4620      	mov	r0, r4
 800652e:	f7f9 ffd3 	bl	80004d8 <__aeabi_dmul>
 8006532:	4642      	mov	r2, r8
 8006534:	464b      	mov	r3, r9
 8006536:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7f9 fe13 	bl	8000168 <__aeabi_dsub>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	f7f9 fe0d 	bl	8000168 <__aeabi_dsub>
 800654e:	a334      	add	r3, pc, #208	; (adr r3, 8006620 <__ieee754_pow+0x718>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 ffc0 	bl	80004d8 <__aeabi_dmul>
 8006558:	a333      	add	r3, pc, #204	; (adr r3, 8006628 <__ieee754_pow+0x720>)
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	4606      	mov	r6, r0
 8006560:	460f      	mov	r7, r1
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7f9 ffb7 	bl	80004d8 <__aeabi_dmul>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4630      	mov	r0, r6
 8006570:	4639      	mov	r1, r7
 8006572:	f7f9 fdfb 	bl	800016c <__adddf3>
 8006576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006578:	4b34      	ldr	r3, [pc, #208]	; (800664c <__ieee754_pow+0x744>)
 800657a:	4413      	add	r3, r2
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7f9 fdf4 	bl	800016c <__adddf3>
 8006584:	4680      	mov	r8, r0
 8006586:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006588:	4689      	mov	r9, r1
 800658a:	f7f9 ff3b 	bl	8000404 <__aeabi_i2d>
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
 8006592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006594:	4b2e      	ldr	r3, [pc, #184]	; (8006650 <__ieee754_pow+0x748>)
 8006596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800659a:	4413      	add	r3, r2
 800659c:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	f7f9 fde2 	bl	800016c <__adddf3>
 80065a8:	4632      	mov	r2, r6
 80065aa:	463b      	mov	r3, r7
 80065ac:	f7f9 fdde 	bl	800016c <__adddf3>
 80065b0:	4622      	mov	r2, r4
 80065b2:	462b      	mov	r3, r5
 80065b4:	f7f9 fdda 	bl	800016c <__adddf3>
 80065b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80065bc:	4622      	mov	r2, r4
 80065be:	462b      	mov	r3, r5
 80065c0:	4650      	mov	r0, sl
 80065c2:	468b      	mov	fp, r1
 80065c4:	f7f9 fdd0 	bl	8000168 <__aeabi_dsub>
 80065c8:	4632      	mov	r2, r6
 80065ca:	463b      	mov	r3, r7
 80065cc:	f7f9 fdcc 	bl	8000168 <__aeabi_dsub>
 80065d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4640      	mov	r0, r8
 80065de:	4649      	mov	r1, r9
 80065e0:	e608      	b.n	80061f4 <__ieee754_pow+0x2ec>
 80065e2:	bf00      	nop
 80065e4:	f3af 8000 	nop.w
 80065e8:	4a454eef 	.word	0x4a454eef
 80065ec:	3fca7e28 	.word	0x3fca7e28
 80065f0:	93c9db65 	.word	0x93c9db65
 80065f4:	3fcd864a 	.word	0x3fcd864a
 80065f8:	a91d4101 	.word	0xa91d4101
 80065fc:	3fd17460 	.word	0x3fd17460
 8006600:	518f264d 	.word	0x518f264d
 8006604:	3fd55555 	.word	0x3fd55555
 8006608:	db6fabff 	.word	0xdb6fabff
 800660c:	3fdb6db6 	.word	0x3fdb6db6
 8006610:	33333303 	.word	0x33333303
 8006614:	3fe33333 	.word	0x3fe33333
 8006618:	e0000000 	.word	0xe0000000
 800661c:	3feec709 	.word	0x3feec709
 8006620:	dc3a03fd 	.word	0xdc3a03fd
 8006624:	3feec709 	.word	0x3feec709
 8006628:	145b01f5 	.word	0x145b01f5
 800662c:	be3e2fe0 	.word	0xbe3e2fe0
 8006630:	7ff00000 	.word	0x7ff00000
 8006634:	43400000 	.word	0x43400000
 8006638:	0003988e 	.word	0x0003988e
 800663c:	000bb679 	.word	0x000bb679
 8006640:	080070a8 	.word	0x080070a8
 8006644:	3ff00000 	.word	0x3ff00000
 8006648:	40080000 	.word	0x40080000
 800664c:	080070c8 	.word	0x080070c8
 8006650:	080070b8 	.word	0x080070b8
 8006654:	2601      	movs	r6, #1
 8006656:	e667      	b.n	8006328 <__ieee754_pow+0x420>
 8006658:	a39d      	add	r3, pc, #628	; (adr r3, 80068d0 <__ieee754_pow+0x9c8>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	4640      	mov	r0, r8
 8006660:	4649      	mov	r1, r9
 8006662:	f7f9 fd83 	bl	800016c <__adddf3>
 8006666:	4622      	mov	r2, r4
 8006668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800666c:	462b      	mov	r3, r5
 800666e:	4650      	mov	r0, sl
 8006670:	4639      	mov	r1, r7
 8006672:	f7f9 fd79 	bl	8000168 <__aeabi_dsub>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800667e:	f7fa f9bb 	bl	80009f8 <__aeabi_dcmpgt>
 8006682:	2800      	cmp	r0, #0
 8006684:	f47f ae01 	bne.w	800628a <__ieee754_pow+0x382>
 8006688:	4aa5      	ldr	r2, [pc, #660]	; (8006920 <__ieee754_pow+0xa18>)
 800668a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800668e:	4293      	cmp	r3, r2
 8006690:	f340 8103 	ble.w	800689a <__ieee754_pow+0x992>
 8006694:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006698:	2000      	movs	r0, #0
 800669a:	151b      	asrs	r3, r3, #20
 800669c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80066a0:	fa4a f303 	asr.w	r3, sl, r3
 80066a4:	4433      	add	r3, r6
 80066a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80066aa:	4f9e      	ldr	r7, [pc, #632]	; (8006924 <__ieee754_pow+0xa1c>)
 80066ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80066b0:	4117      	asrs	r7, r2
 80066b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80066b6:	ea23 0107 	bic.w	r1, r3, r7
 80066ba:	f1c2 0214 	rsb	r2, r2, #20
 80066be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80066c2:	460b      	mov	r3, r1
 80066c4:	fa4a fa02 	asr.w	sl, sl, r2
 80066c8:	2e00      	cmp	r6, #0
 80066ca:	4602      	mov	r2, r0
 80066cc:	4629      	mov	r1, r5
 80066ce:	4620      	mov	r0, r4
 80066d0:	bfb8      	it	lt
 80066d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80066d6:	f7f9 fd47 	bl	8000168 <__aeabi_dsub>
 80066da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e2:	2400      	movs	r4, #0
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	f7f9 fd40 	bl	800016c <__adddf3>
 80066ec:	a37a      	add	r3, pc, #488	; (adr r3, 80068d8 <__ieee754_pow+0x9d0>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	4620      	mov	r0, r4
 80066f4:	460d      	mov	r5, r1
 80066f6:	f7f9 feef 	bl	80004d8 <__aeabi_dmul>
 80066fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	4620      	mov	r0, r4
 8006704:	4629      	mov	r1, r5
 8006706:	f7f9 fd2f 	bl	8000168 <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 fd29 	bl	8000168 <__aeabi_dsub>
 8006716:	a372      	add	r3, pc, #456	; (adr r3, 80068e0 <__ieee754_pow+0x9d8>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 fedc 	bl	80004d8 <__aeabi_dmul>
 8006720:	a371      	add	r3, pc, #452	; (adr r3, 80068e8 <__ieee754_pow+0x9e0>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	4620      	mov	r0, r4
 800672c:	4629      	mov	r1, r5
 800672e:	f7f9 fed3 	bl	80004d8 <__aeabi_dmul>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4640      	mov	r0, r8
 8006738:	4649      	mov	r1, r9
 800673a:	f7f9 fd17 	bl	800016c <__adddf3>
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7f9 fd0f 	bl	800016c <__adddf3>
 800674e:	4632      	mov	r2, r6
 8006750:	463b      	mov	r3, r7
 8006752:	4680      	mov	r8, r0
 8006754:	4689      	mov	r9, r1
 8006756:	f7f9 fd07 	bl	8000168 <__aeabi_dsub>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7f9 fd01 	bl	8000168 <__aeabi_dsub>
 8006766:	4642      	mov	r2, r8
 8006768:	4606      	mov	r6, r0
 800676a:	460f      	mov	r7, r1
 800676c:	464b      	mov	r3, r9
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	f7f9 feb1 	bl	80004d8 <__aeabi_dmul>
 8006776:	a35e      	add	r3, pc, #376	; (adr r3, 80068f0 <__ieee754_pow+0x9e8>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	4604      	mov	r4, r0
 800677e:	460d      	mov	r5, r1
 8006780:	f7f9 feaa 	bl	80004d8 <__aeabi_dmul>
 8006784:	a35c      	add	r3, pc, #368	; (adr r3, 80068f8 <__ieee754_pow+0x9f0>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fced 	bl	8000168 <__aeabi_dsub>
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	f7f9 fea1 	bl	80004d8 <__aeabi_dmul>
 8006796:	a35a      	add	r3, pc, #360	; (adr r3, 8006900 <__ieee754_pow+0x9f8>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 fce6 	bl	800016c <__adddf3>
 80067a0:	4622      	mov	r2, r4
 80067a2:	462b      	mov	r3, r5
 80067a4:	f7f9 fe98 	bl	80004d8 <__aeabi_dmul>
 80067a8:	a357      	add	r3, pc, #348	; (adr r3, 8006908 <__ieee754_pow+0xa00>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fcdb 	bl	8000168 <__aeabi_dsub>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 fe8f 	bl	80004d8 <__aeabi_dmul>
 80067ba:	a355      	add	r3, pc, #340	; (adr r3, 8006910 <__ieee754_pow+0xa08>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fcd4 	bl	800016c <__adddf3>
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	f7f9 fe86 	bl	80004d8 <__aeabi_dmul>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7f9 fcc8 	bl	8000168 <__aeabi_dsub>
 80067d8:	4604      	mov	r4, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7f9 fe78 	bl	80004d8 <__aeabi_dmul>
 80067e8:	2200      	movs	r2, #0
 80067ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7f9 fcb7 	bl	8000168 <__aeabi_dsub>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006802:	f7f9 ff93 	bl	800072c <__aeabi_ddiv>
 8006806:	4632      	mov	r2, r6
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	463b      	mov	r3, r7
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7f9 fe61 	bl	80004d8 <__aeabi_dmul>
 8006816:	4632      	mov	r2, r6
 8006818:	463b      	mov	r3, r7
 800681a:	f7f9 fca7 	bl	800016c <__adddf3>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7f9 fc9f 	bl	8000168 <__aeabi_dsub>
 800682a:	4642      	mov	r2, r8
 800682c:	464b      	mov	r3, r9
 800682e:	f7f9 fc9b 	bl	8000168 <__aeabi_dsub>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	2000      	movs	r0, #0
 8006838:	493b      	ldr	r1, [pc, #236]	; (8006928 <__ieee754_pow+0xa20>)
 800683a:	f7f9 fc95 	bl	8000168 <__aeabi_dsub>
 800683e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006842:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006846:	da2b      	bge.n	80068a0 <__ieee754_pow+0x998>
 8006848:	4652      	mov	r2, sl
 800684a:	f000 f9b9 	bl	8006bc0 <scalbn>
 800684e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006852:	f7ff bbf2 	b.w	800603a <__ieee754_pow+0x132>
 8006856:	4b35      	ldr	r3, [pc, #212]	; (800692c <__ieee754_pow+0xa24>)
 8006858:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800685c:	429f      	cmp	r7, r3
 800685e:	f77f af13 	ble.w	8006688 <__ieee754_pow+0x780>
 8006862:	4b33      	ldr	r3, [pc, #204]	; (8006930 <__ieee754_pow+0xa28>)
 8006864:	440b      	add	r3, r1
 8006866:	4303      	orrs	r3, r0
 8006868:	d00b      	beq.n	8006882 <__ieee754_pow+0x97a>
 800686a:	a32b      	add	r3, pc, #172	; (adr r3, 8006918 <__ieee754_pow+0xa10>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006874:	f7f9 fe30 	bl	80004d8 <__aeabi_dmul>
 8006878:	a327      	add	r3, pc, #156	; (adr r3, 8006918 <__ieee754_pow+0xa10>)
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f7ff bbdc 	b.w	800603a <__ieee754_pow+0x132>
 8006882:	4622      	mov	r2, r4
 8006884:	462b      	mov	r3, r5
 8006886:	f7f9 fc6f 	bl	8000168 <__aeabi_dsub>
 800688a:	4642      	mov	r2, r8
 800688c:	464b      	mov	r3, r9
 800688e:	f7fa f8a9 	bl	80009e4 <__aeabi_dcmpge>
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f aef8 	beq.w	8006688 <__ieee754_pow+0x780>
 8006898:	e7e7      	b.n	800686a <__ieee754_pow+0x962>
 800689a:	f04f 0a00 	mov.w	sl, #0
 800689e:	e71e      	b.n	80066de <__ieee754_pow+0x7d6>
 80068a0:	4621      	mov	r1, r4
 80068a2:	e7d4      	b.n	800684e <__ieee754_pow+0x946>
 80068a4:	f04f 0b00 	mov.w	fp, #0
 80068a8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006928 <__ieee754_pow+0xa20>
 80068ac:	f7ff bbb0 	b.w	8006010 <__ieee754_pow+0x108>
 80068b0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80068b4:	f7ff bbac 	b.w	8006010 <__ieee754_pow+0x108>
 80068b8:	4638      	mov	r0, r7
 80068ba:	4641      	mov	r1, r8
 80068bc:	f7ff bbbf 	b.w	800603e <__ieee754_pow+0x136>
 80068c0:	9200      	str	r2, [sp, #0]
 80068c2:	f7ff bb7f 	b.w	8005fc4 <__ieee754_pow+0xbc>
 80068c6:	2300      	movs	r3, #0
 80068c8:	f7ff bb69 	b.w	8005f9e <__ieee754_pow+0x96>
 80068cc:	f3af 8000 	nop.w
 80068d0:	652b82fe 	.word	0x652b82fe
 80068d4:	3c971547 	.word	0x3c971547
 80068d8:	00000000 	.word	0x00000000
 80068dc:	3fe62e43 	.word	0x3fe62e43
 80068e0:	fefa39ef 	.word	0xfefa39ef
 80068e4:	3fe62e42 	.word	0x3fe62e42
 80068e8:	0ca86c39 	.word	0x0ca86c39
 80068ec:	be205c61 	.word	0xbe205c61
 80068f0:	72bea4d0 	.word	0x72bea4d0
 80068f4:	3e663769 	.word	0x3e663769
 80068f8:	c5d26bf1 	.word	0xc5d26bf1
 80068fc:	3ebbbd41 	.word	0x3ebbbd41
 8006900:	af25de2c 	.word	0xaf25de2c
 8006904:	3f11566a 	.word	0x3f11566a
 8006908:	16bebd93 	.word	0x16bebd93
 800690c:	3f66c16c 	.word	0x3f66c16c
 8006910:	5555553e 	.word	0x5555553e
 8006914:	3fc55555 	.word	0x3fc55555
 8006918:	c2f8f359 	.word	0xc2f8f359
 800691c:	01a56e1f 	.word	0x01a56e1f
 8006920:	3fe00000 	.word	0x3fe00000
 8006924:	000fffff 	.word	0x000fffff
 8006928:	3ff00000 	.word	0x3ff00000
 800692c:	4090cbff 	.word	0x4090cbff
 8006930:	3f6f3400 	.word	0x3f6f3400

08006934 <__ieee754_sqrt>:
 8006934:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006a88 <__ieee754_sqrt+0x154>
 8006938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006940:	460b      	mov	r3, r1
 8006942:	4606      	mov	r6, r0
 8006944:	460d      	mov	r5, r1
 8006946:	460a      	mov	r2, r1
 8006948:	4607      	mov	r7, r0
 800694a:	4604      	mov	r4, r0
 800694c:	d10e      	bne.n	800696c <__ieee754_sqrt+0x38>
 800694e:	4602      	mov	r2, r0
 8006950:	f7f9 fdc2 	bl	80004d8 <__aeabi_dmul>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4630      	mov	r0, r6
 800695a:	4629      	mov	r1, r5
 800695c:	f7f9 fc06 	bl	800016c <__adddf3>
 8006960:	4606      	mov	r6, r0
 8006962:	460d      	mov	r5, r1
 8006964:	4630      	mov	r0, r6
 8006966:	4629      	mov	r1, r5
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	2900      	cmp	r1, #0
 800696e:	dc0d      	bgt.n	800698c <__ieee754_sqrt+0x58>
 8006970:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006974:	ea5c 0707 	orrs.w	r7, ip, r7
 8006978:	d0f4      	beq.n	8006964 <__ieee754_sqrt+0x30>
 800697a:	b139      	cbz	r1, 800698c <__ieee754_sqrt+0x58>
 800697c:	4602      	mov	r2, r0
 800697e:	f7f9 fbf3 	bl	8000168 <__aeabi_dsub>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	f7f9 fed1 	bl	800072c <__aeabi_ddiv>
 800698a:	e7e9      	b.n	8006960 <__ieee754_sqrt+0x2c>
 800698c:	1512      	asrs	r2, r2, #20
 800698e:	d074      	beq.n	8006a7a <__ieee754_sqrt+0x146>
 8006990:	2000      	movs	r0, #0
 8006992:	07d5      	lsls	r5, r2, #31
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800699c:	bf5e      	ittt	pl
 800699e:	0fe3      	lsrpl	r3, r4, #31
 80069a0:	0064      	lslpl	r4, r4, #1
 80069a2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80069a6:	0fe3      	lsrs	r3, r4, #31
 80069a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80069ac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80069b0:	2516      	movs	r5, #22
 80069b2:	4601      	mov	r1, r0
 80069b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069b8:	1076      	asrs	r6, r6, #1
 80069ba:	0064      	lsls	r4, r4, #1
 80069bc:	188f      	adds	r7, r1, r2
 80069be:	429f      	cmp	r7, r3
 80069c0:	bfde      	ittt	le
 80069c2:	1bdb      	suble	r3, r3, r7
 80069c4:	18b9      	addle	r1, r7, r2
 80069c6:	1880      	addle	r0, r0, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	3d01      	subs	r5, #1
 80069cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80069d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80069d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80069d8:	d1f0      	bne.n	80069bc <__ieee754_sqrt+0x88>
 80069da:	462a      	mov	r2, r5
 80069dc:	f04f 0e20 	mov.w	lr, #32
 80069e0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80069e4:	428b      	cmp	r3, r1
 80069e6:	eb07 0c05 	add.w	ip, r7, r5
 80069ea:	dc02      	bgt.n	80069f2 <__ieee754_sqrt+0xbe>
 80069ec:	d113      	bne.n	8006a16 <__ieee754_sqrt+0xe2>
 80069ee:	45a4      	cmp	ip, r4
 80069f0:	d811      	bhi.n	8006a16 <__ieee754_sqrt+0xe2>
 80069f2:	f1bc 0f00 	cmp.w	ip, #0
 80069f6:	eb0c 0507 	add.w	r5, ip, r7
 80069fa:	da43      	bge.n	8006a84 <__ieee754_sqrt+0x150>
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	db41      	blt.n	8006a84 <__ieee754_sqrt+0x150>
 8006a00:	f101 0801 	add.w	r8, r1, #1
 8006a04:	1a5b      	subs	r3, r3, r1
 8006a06:	4641      	mov	r1, r8
 8006a08:	45a4      	cmp	ip, r4
 8006a0a:	bf88      	it	hi
 8006a0c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006a10:	eba4 040c 	sub.w	r4, r4, ip
 8006a14:	443a      	add	r2, r7
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	f1be 0e01 	subs.w	lr, lr, #1
 8006a1c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006a20:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8006a24:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a28:	d1dc      	bne.n	80069e4 <__ieee754_sqrt+0xb0>
 8006a2a:	4323      	orrs	r3, r4
 8006a2c:	d006      	beq.n	8006a3c <__ieee754_sqrt+0x108>
 8006a2e:	1c54      	adds	r4, r2, #1
 8006a30:	bf0b      	itete	eq
 8006a32:	4672      	moveq	r2, lr
 8006a34:	3201      	addne	r2, #1
 8006a36:	3001      	addeq	r0, #1
 8006a38:	f022 0201 	bicne.w	r2, r2, #1
 8006a3c:	1043      	asrs	r3, r0, #1
 8006a3e:	07c1      	lsls	r1, r0, #31
 8006a40:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006a44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006a48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006a4c:	bf48      	it	mi
 8006a4e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006a52:	4610      	mov	r0, r2
 8006a54:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006a58:	e782      	b.n	8006960 <__ieee754_sqrt+0x2c>
 8006a5a:	0ae3      	lsrs	r3, r4, #11
 8006a5c:	3915      	subs	r1, #21
 8006a5e:	0564      	lsls	r4, r4, #21
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0fa      	beq.n	8006a5a <__ieee754_sqrt+0x126>
 8006a64:	02de      	lsls	r6, r3, #11
 8006a66:	d50a      	bpl.n	8006a7e <__ieee754_sqrt+0x14a>
 8006a68:	f1c2 0020 	rsb	r0, r2, #32
 8006a6c:	fa24 f000 	lsr.w	r0, r4, r0
 8006a70:	1e55      	subs	r5, r2, #1
 8006a72:	4094      	lsls	r4, r2
 8006a74:	4303      	orrs	r3, r0
 8006a76:	1b4a      	subs	r2, r1, r5
 8006a78:	e78a      	b.n	8006990 <__ieee754_sqrt+0x5c>
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	e7f0      	b.n	8006a60 <__ieee754_sqrt+0x12c>
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	3201      	adds	r2, #1
 8006a82:	e7ef      	b.n	8006a64 <__ieee754_sqrt+0x130>
 8006a84:	4688      	mov	r8, r1
 8006a86:	e7bd      	b.n	8006a04 <__ieee754_sqrt+0xd0>
 8006a88:	7ff00000 	.word	0x7ff00000

08006a8c <fabs>:
 8006a8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006a90:	4770      	bx	lr

08006a92 <finite>:
 8006a92:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006a96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006a9a:	0fc0      	lsrs	r0, r0, #31
 8006a9c:	4770      	bx	lr
	...

08006aa0 <nan>:
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	4901      	ldr	r1, [pc, #4]	; (8006aa8 <nan+0x8>)
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	7ff80000 	.word	0x7ff80000

08006aac <rint>:
 8006aac:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8006ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8006ab6:	2f13      	cmp	r7, #19
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	460c      	mov	r4, r1
 8006abe:	4605      	mov	r5, r0
 8006ac0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8006ac4:	dc59      	bgt.n	8006b7a <rint+0xce>
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	da2a      	bge.n	8006b20 <rint+0x74>
 8006aca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ace:	4301      	orrs	r1, r0
 8006ad0:	d022      	beq.n	8006b18 <rint+0x6c>
 8006ad2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8006ad6:	4301      	orrs	r1, r0
 8006ad8:	424d      	negs	r5, r1
 8006ada:	430d      	orrs	r5, r1
 8006adc:	4936      	ldr	r1, [pc, #216]	; (8006bb8 <rint+0x10c>)
 8006ade:	0c5c      	lsrs	r4, r3, #17
 8006ae0:	0b2d      	lsrs	r5, r5, #12
 8006ae2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8006ae6:	0464      	lsls	r4, r4, #17
 8006ae8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006aec:	ea45 0304 	orr.w	r3, r5, r4
 8006af0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006af4:	4620      	mov	r0, r4
 8006af6:	4629      	mov	r1, r5
 8006af8:	f7f9 fb38 	bl	800016c <__adddf3>
 8006afc:	e9cd 0100 	strd	r0, r1, [sp]
 8006b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b04:	462b      	mov	r3, r5
 8006b06:	4622      	mov	r2, r4
 8006b08:	f7f9 fb2e 	bl	8000168 <__aeabi_dsub>
 8006b0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b10:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	b003      	add	sp, #12
 8006b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b20:	4926      	ldr	r1, [pc, #152]	; (8006bbc <rint+0x110>)
 8006b22:	4139      	asrs	r1, r7
 8006b24:	ea03 0001 	and.w	r0, r3, r1
 8006b28:	4310      	orrs	r0, r2
 8006b2a:	d0f5      	beq.n	8006b18 <rint+0x6c>
 8006b2c:	084b      	lsrs	r3, r1, #1
 8006b2e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8006b32:	ea52 0501 	orrs.w	r5, r2, r1
 8006b36:	d00c      	beq.n	8006b52 <rint+0xa6>
 8006b38:	ea24 0303 	bic.w	r3, r4, r3
 8006b3c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8006b40:	2f13      	cmp	r7, #19
 8006b42:	bf0c      	ite	eq
 8006b44:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8006b48:	2500      	movne	r5, #0
 8006b4a:	fa44 f707 	asr.w	r7, r4, r7
 8006b4e:	ea43 0407 	orr.w	r4, r3, r7
 8006b52:	4919      	ldr	r1, [pc, #100]	; (8006bb8 <rint+0x10c>)
 8006b54:	4623      	mov	r3, r4
 8006b56:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006b60:	4620      	mov	r0, r4
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7f9 fb02 	bl	800016c <__adddf3>
 8006b68:	e9cd 0100 	strd	r0, r1, [sp]
 8006b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b70:	4622      	mov	r2, r4
 8006b72:	462b      	mov	r3, r5
 8006b74:	f7f9 faf8 	bl	8000168 <__aeabi_dsub>
 8006b78:	e7cc      	b.n	8006b14 <rint+0x68>
 8006b7a:	2f33      	cmp	r7, #51	; 0x33
 8006b7c:	dd05      	ble.n	8006b8a <rint+0xde>
 8006b7e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006b82:	d1c9      	bne.n	8006b18 <rint+0x6c>
 8006b84:	f7f9 faf2 	bl	800016c <__adddf3>
 8006b88:	e7c4      	b.n	8006b14 <rint+0x68>
 8006b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b8e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8006b92:	fa21 f10c 	lsr.w	r1, r1, ip
 8006b96:	4208      	tst	r0, r1
 8006b98:	d0be      	beq.n	8006b18 <rint+0x6c>
 8006b9a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8006b9e:	bf18      	it	ne
 8006ba0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8006ba4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8006ba8:	bf1e      	ittt	ne
 8006baa:	ea20 0303 	bicne.w	r3, r0, r3
 8006bae:	fa45 fc0c 	asrne.w	ip, r5, ip
 8006bb2:	ea43 050c 	orrne.w	r5, r3, ip
 8006bb6:	e7cc      	b.n	8006b52 <rint+0xa6>
 8006bb8:	080070d8 	.word	0x080070d8
 8006bbc:	000fffff 	.word	0x000fffff

08006bc0 <scalbn>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	460d      	mov	r5, r1
 8006bca:	4617      	mov	r7, r2
 8006bcc:	460b      	mov	r3, r1
 8006bce:	b996      	cbnz	r6, 8006bf6 <scalbn+0x36>
 8006bd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bd4:	4303      	orrs	r3, r0
 8006bd6:	d039      	beq.n	8006c4c <scalbn+0x8c>
 8006bd8:	4b35      	ldr	r3, [pc, #212]	; (8006cb0 <scalbn+0xf0>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7f9 fc7c 	bl	80004d8 <__aeabi_dmul>
 8006be0:	4b34      	ldr	r3, [pc, #208]	; (8006cb4 <scalbn+0xf4>)
 8006be2:	4604      	mov	r4, r0
 8006be4:	429f      	cmp	r7, r3
 8006be6:	460d      	mov	r5, r1
 8006be8:	da0f      	bge.n	8006c0a <scalbn+0x4a>
 8006bea:	a32d      	add	r3, pc, #180	; (adr r3, 8006ca0 <scalbn+0xe0>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fc72 	bl	80004d8 <__aeabi_dmul>
 8006bf4:	e006      	b.n	8006c04 <scalbn+0x44>
 8006bf6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006bfa:	4296      	cmp	r6, r2
 8006bfc:	d10a      	bne.n	8006c14 <scalbn+0x54>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	f7f9 fab4 	bl	800016c <__adddf3>
 8006c04:	4604      	mov	r4, r0
 8006c06:	460d      	mov	r5, r1
 8006c08:	e020      	b.n	8006c4c <scalbn+0x8c>
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c10:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006c14:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006c18:	19b9      	adds	r1, r7, r6
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	dd0e      	ble.n	8006c3c <scalbn+0x7c>
 8006c1e:	a322      	add	r3, pc, #136	; (adr r3, 8006ca8 <scalbn+0xe8>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006c28:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006c2c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006c30:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006c34:	4820      	ldr	r0, [pc, #128]	; (8006cb8 <scalbn+0xf8>)
 8006c36:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006c3a:	e7d9      	b.n	8006bf0 <scalbn+0x30>
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	dd08      	ble.n	8006c52 <scalbn+0x92>
 8006c40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	4629      	mov	r1, r5
 8006c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c52:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006c56:	da16      	bge.n	8006c86 <scalbn+0xc6>
 8006c58:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c5c:	429f      	cmp	r7, r3
 8006c5e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006c62:	dd08      	ble.n	8006c76 <scalbn+0xb6>
 8006c64:	4c15      	ldr	r4, [pc, #84]	; (8006cbc <scalbn+0xfc>)
 8006c66:	4814      	ldr	r0, [pc, #80]	; (8006cb8 <scalbn+0xf8>)
 8006c68:	f363 74df 	bfi	r4, r3, #31, #1
 8006c6c:	a30e      	add	r3, pc, #56	; (adr r3, 8006ca8 <scalbn+0xe8>)
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	4621      	mov	r1, r4
 8006c74:	e7bc      	b.n	8006bf0 <scalbn+0x30>
 8006c76:	4c12      	ldr	r4, [pc, #72]	; (8006cc0 <scalbn+0x100>)
 8006c78:	4812      	ldr	r0, [pc, #72]	; (8006cc4 <scalbn+0x104>)
 8006c7a:	f363 74df 	bfi	r4, r3, #31, #1
 8006c7e:	a308      	add	r3, pc, #32	; (adr r3, 8006ca0 <scalbn+0xe0>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	e7f5      	b.n	8006c72 <scalbn+0xb2>
 8006c86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c8a:	3136      	adds	r1, #54	; 0x36
 8006c8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c90:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c94:	4620      	mov	r0, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <scalbn+0x108>)
 8006c9c:	e7a8      	b.n	8006bf0 <scalbn+0x30>
 8006c9e:	bf00      	nop
 8006ca0:	c2f8f359 	.word	0xc2f8f359
 8006ca4:	01a56e1f 	.word	0x01a56e1f
 8006ca8:	8800759c 	.word	0x8800759c
 8006cac:	7e37e43c 	.word	0x7e37e43c
 8006cb0:	43500000 	.word	0x43500000
 8006cb4:	ffff3cb0 	.word	0xffff3cb0
 8006cb8:	8800759c 	.word	0x8800759c
 8006cbc:	7e37e43c 	.word	0x7e37e43c
 8006cc0:	01a56e1f 	.word	0x01a56e1f
 8006cc4:	c2f8f359 	.word	0xc2f8f359
 8006cc8:	3c900000 	.word	0x3c900000

08006ccc <_init>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	bf00      	nop
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr

08006cd8 <_fini>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr
