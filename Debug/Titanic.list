
Titanic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08006cf0  08006cf0  00016cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f0  080070f0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080070f0  080070f0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070f0  080070f0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000094  0800718c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  0800718c  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ef  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ff  00000000  00000000  0002f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000315b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001935a  00000000  00000000  00032f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc0f  00000000  00000000  0004c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca2d  00000000  00000000  00059e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e689e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  000e68f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cd4 	.word	0x08006cd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	08006cd4 	.word	0x08006cd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2uiz>:
 8000fd4:	0042      	lsls	r2, r0, #1
 8000fd6:	d20e      	bcs.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30b      	bcc.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d409      	bmi.n	8000ffc <__aeabi_f2uiz+0x28>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4770      	bx	lr
 8000ffc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001000:	d101      	bne.n	8001006 <__aeabi_f2uiz+0x32>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	d102      	bne.n	800100c <__aeabi_f2uiz+0x38>
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setupBLE>:
void sendInstruction (AtInstruction_t instruction, char* parameter);
char** str_split (char* a_str, const char a_delim);
int getSubstring (char *source, char *target,int from, int to);
void sendToLogger (char *msg);

void setupBLE(UART_HandleTypeDef *huartInterface, UART_HandleTypeDef *loggingInterface) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	huart = huartInterface;
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <setupBLE+0x28>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6013      	str	r3, [r2, #0]
	loggingHuart = loggingInterface;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <setupBLE+0x2c>)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6013      	str	r3, [r2, #0]
	sendInstruction(SET_PERMISSIONS, "11111");
 800102a:	4906      	ldr	r1, [pc, #24]	; (8001044 <setupBLE+0x30>)
 800102c:	2007      	movs	r0, #7
 800102e:	f000 f80b 	bl	8001048 <sendInstruction>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000128 	.word	0x20000128
 8001040:	2000012c 	.word	0x2000012c
 8001044:	08006d34 	.word	0x08006d34

08001048 <sendInstruction>:

void sendInstruction (AtInstruction_t instruction, char* parameter) {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
	char *instructionPrefix = atInstructions[instruction];
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <sendInstruction+0x5c>)
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	60fb      	str	r3, [r7, #12]
	char *completeInstruction = (char*) malloc(30 * sizeof(char));
 800105e:	201e      	movs	r0, #30
 8001060:	f003 fb68 	bl	8004734 <malloc>
 8001064:	4603      	mov	r3, r0
 8001066:	60bb      	str	r3, [r7, #8]
	sprintf(completeInstruction, "%s%s\r\n", instructionPrefix, parameter);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	490e      	ldr	r1, [pc, #56]	; (80010a8 <sendInstruction+0x60>)
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f003 ff92 	bl	8004f98 <siprintf>
	sendToLogger(completeInstruction);
 8001074:	68b8      	ldr	r0, [r7, #8]
 8001076:	f000 f9f7 	bl	8001468 <sendToLogger>
	HAL_UART_Transmit(huart, (uint8_t *) completeInstruction, strlen(completeInstruction), HAL_MAX_DELAY);
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <sendInstruction+0x64>)
 800107c:	681c      	ldr	r4, [r3, #0]
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff f866 	bl	8000150 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	4620      	mov	r0, r4
 8001090:	f003 f974 	bl	800437c <HAL_UART_Transmit>
	free(completeInstruction);
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f003 fb55 	bl	8004744 <free>
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000000 	.word	0x20000000
 80010a8:	08006d3c 	.word	0x08006d3c
 80010ac:	20000128 	.word	0x20000128

080010b0 <masterScanForSlaves>:
	char powerString[5];
	gcvt(power, 2, powerString);
	sendInstruction(SET_TRANSMITTING_POWER, powerString);
}

ListDevices_t masterScanForSlaves () {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	char inputBuffer[1];
	char *allText = (char *) malloc(1000 * sizeof(char));
 80010b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010bc:	f003 fb3a 	bl	8004734 <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Send the scan request
	sendToLogger("About to inquire \r\n");
 80010c4:	4871      	ldr	r0, [pc, #452]	; (800128c <masterScanForSlaves+0x1dc>)
 80010c6:	f000 f9cf 	bl	8001468 <sendToLogger>
	sendInstruction(MASTER_SCAN_FOR_SLAVES, "");
 80010ca:	4971      	ldr	r1, [pc, #452]	; (8001290 <masterScanForSlaves+0x1e0>)
 80010cc:	2005      	movs	r0, #5
 80010ce:	f7ff ffbb 	bl	8001048 <sendInstruction>
	sendToLogger("Inquired \r\n");
 80010d2:	4870      	ldr	r0, [pc, #448]	; (8001294 <masterScanForSlaves+0x1e4>)
 80010d4:	f000 f9c8 	bl	8001468 <sendToLogger>
	// Receive the scan answer
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 80010d8:	e00e      	b.n	80010f8 <masterScanForSlaves+0x48>
		HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 1, HAL_MAX_DELAY);
 80010da:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <masterScanForSlaves+0x1e8>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f107 0110 	add.w	r1, r7, #16
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	2201      	movs	r2, #1
 80010e8:	f003 f9da 	bl	80044a0 <HAL_UART_Receive>
		strcat(allText, inputBuffer);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f4:	f003 ff70 	bl	8004fd8 <strcat>
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 80010f8:	4968      	ldr	r1, [pc, #416]	; (800129c <masterScanForSlaves+0x1ec>)
 80010fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010fc:	f003 ffab 	bl	8005056 <strstr>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0e9      	beq.n	80010da <masterScanForSlaves+0x2a>
	}
	sendToLogger("Received \r\n");
 8001106:	4866      	ldr	r0, [pc, #408]	; (80012a0 <masterScanForSlaves+0x1f0>)
 8001108:	f000 f9ae 	bl	8001468 <sendToLogger>
	sendToLogger(allText);
 800110c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800110e:	f000 f9ab 	bl	8001468 <sendToLogger>
	sendToLogger("\r\nRetransmitted \r\n");
 8001112:	4864      	ldr	r0, [pc, #400]	; (80012a4 <masterScanForSlaves+0x1f4>)
 8001114:	f000 f9a8 	bl	8001468 <sendToLogger>
	// Break the scan into lines:
	char** lines = str_split(allText, '\n');
 8001118:	210a      	movs	r1, #10
 800111a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111c:	f000 f8c6 	bl	80012ac <str_split>
 8001120:	62b8      	str	r0, [r7, #40]	; 0x28

	// Breaking the lines into tokens and creating the struct
	size_t nbOfEntries = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
	while (*(lines + nbOfEntries) != 0) nbOfEntries++;
 8001126:	e002      	b.n	800112e <masterScanForSlaves+0x7e>
 8001128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112a:	3301      	adds	r3, #1
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001134:	4413      	add	r3, r2
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f5      	bne.n	8001128 <masterScanForSlaves+0x78>
	nbOfEntries--;
 800113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113e:	3b01      	subs	r3, #1
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
	Device_t *entries = (Device_t *) malloc(nbOfEntries * sizeof(Device_t));
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f003 faf4 	bl	8004734 <malloc>
 800114c:	4603      	mov	r3, r0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < nbOfEntries; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
 8001154:	e081      	b.n	800125a <masterScanForSlaves+0x1aa>
		// Removing leading trash characters
		char *line = lines[i];
 8001156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	623b      	str	r3, [r7, #32]
		char *e = strrchr(line, '+');
 8001162:	212b      	movs	r1, #43	; 0x2b
 8001164:	6a38      	ldr	r0, [r7, #32]
 8001166:	f003 ff62 	bl	800502e <strrchr>
 800116a:	61f8      	str	r0, [r7, #28]
		int lastPlusIndex =  (int)(e - line);
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	61bb      	str	r3, [r7, #24]
		getSubstring(line, line, lastPlusIndex, strlen(line));
 8001174:	6a38      	ldr	r0, [r7, #32]
 8001176:	f7fe ffeb 	bl	8000150 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	6a39      	ldr	r1, [r7, #32]
 8001180:	6a38      	ldr	r0, [r7, #32]
 8001182:	f000 f91d 	bl	80013c0 <getSubstring>
		char **tokens = str_split(line, ',');
 8001186:	212c      	movs	r1, #44	; 0x2c
 8001188:	6a38      	ldr	r0, [r7, #32]
 800118a:	f000 f88f 	bl	80012ac <str_split>
 800118e:	6178      	str	r0, [r7, #20]
		// Checking if all the needed info is available.
		if (*(tokens + 2) != 0) {
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3308      	adds	r3, #8
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d043      	beq.n	8001222 <masterScanForSlaves+0x172>
			getSubstring(tokens[0], tokens[0], 7, strlen(tokens[0]));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	681c      	ldr	r4, [r3, #0]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	681d      	ldr	r5, [r3, #0]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7fe ffd2 	bl	8000150 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2207      	movs	r2, #7
 80011b0:	4629      	mov	r1, r5
 80011b2:	4620      	mov	r0, r4
 80011b4:	f000 f904 	bl	80013c0 <getSubstring>
			getSubstring(tokens[2], tokens[2], 0, strlen(tokens[2])-2);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3308      	adds	r3, #8
 80011bc:	681c      	ldr	r4, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3308      	adds	r3, #8
 80011c2:	681d      	ldr	r5, [r3, #0]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3308      	adds	r3, #8
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7fe ffc0 	bl	8000150 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	3b02      	subs	r3, #2
 80011d4:	2200      	movs	r2, #0
 80011d6:	4629      	mov	r1, r5
 80011d8:	4620      	mov	r0, r4
 80011da:	f000 f8f1 	bl	80013c0 <getSubstring>

			entries[i].index = i+1;
 80011de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	4413      	add	r3, r2
 80011e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e8:	3201      	adds	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
			entries[i].mac = tokens[0];
 80011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f2:	4413      	add	r3, r2
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	605a      	str	r2, [r3, #4]
			entries[i].signalStrength = atoi(tokens[1]);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3304      	adds	r3, #4
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001206:	18d4      	adds	r4, r2, r3
 8001208:	4608      	mov	r0, r1
 800120a:	f003 fa53 	bl	80046b4 <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	60a3      	str	r3, [r4, #8]
			entries[i].name = tokens[2];
 8001212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001218:	4413      	add	r3, r2
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	6892      	ldr	r2, [r2, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	e018      	b.n	8001254 <masterScanForSlaves+0x1a4>
		} else {
			entries[i].index = -1;
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001228:	4413      	add	r3, r2
 800122a:	f04f 32ff 	mov.w	r2, #4294967295
 800122e:	601a      	str	r2, [r3, #0]
			entries[i].mac = "INVALID";
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001236:	4413      	add	r3, r2
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <masterScanForSlaves+0x1f8>)
 800123a:	605a      	str	r2, [r3, #4]
			entries[i].signalStrength = 1;
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001242:	4413      	add	r3, r2
 8001244:	2201      	movs	r2, #1
 8001246:	609a      	str	r2, [r3, #8]
			entries[i].name = "INVALID";
 8001248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124e:	4413      	add	r3, r2
 8001250:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <masterScanForSlaves+0x1f8>)
 8001252:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < nbOfEntries; i++) {
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	3301      	adds	r3, #1
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125e:	429a      	cmp	r2, r3
 8001260:	f63f af79 	bhi.w	8001156 <masterScanForSlaves+0xa6>
		}
	}
	free(allText);
 8001264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001266:	f003 fa6d 	bl	8004744 <free>
//	return entries;
	ListDevices_t answer = {nbOfEntries, entries};
 800126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	60fb      	str	r3, [r7, #12]
	return answer;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	461a      	mov	r2, r3
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800127e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	3738      	adds	r7, #56	; 0x38
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	bf00      	nop
 800128c:	08006d44 	.word	0x08006d44
 8001290:	08006d58 	.word	0x08006d58
 8001294:	08006d5c 	.word	0x08006d5c
 8001298:	20000128 	.word	0x20000128
 800129c:	08006d68 	.word	0x08006d68
 80012a0:	08006d74 	.word	0x08006d74
 80012a4:	08006d80 	.word	0x08006d80
 80012a8:	08006d94 	.word	0x08006d94

080012ac <str_split>:
void connectMasterToSlaveFromMACAddress (char *mac) {
	sendInstruction(MASTER_CONNECT_SLAVE, mac);
}

char** str_split(char* a_str, const char a_delim)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 80012d0:	e00c      	b.n	80012ec <str_split+0x40>
    {
        if (a_delim == *tmp)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d104      	bne.n	80012e6 <str_split+0x3a>
        {
            count++;
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	3301      	adds	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	3301      	adds	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
    while (*tmp)
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ee      	bne.n	80012d2 <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7fe ff2b 	bl	8000150 <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	3b01      	subs	r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	429a      	cmp	r2, r3
 8001306:	bf34      	ite	cc
 8001308:	2301      	movcc	r3, #1
 800130a:	2300      	movcs	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	4413      	add	r3, r2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fa07 	bl	8004734 <malloc>
 8001326:	4603      	mov	r3, r0
 8001328:	613b      	str	r3, [r7, #16]

    if (result)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d039      	beq.n	80013a4 <str_split+0xf8>
    {
        size_t idx  = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f003 fea2 	bl	8005084 <strtok>
 8001340:	6178      	str	r0, [r7, #20]

        while (token)
 8001342:	e01b      	b.n	800137c <str_split+0xd0>
        {
            assert(idx < count);
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	429a      	cmp	r2, r3
 800134a:	d305      	bcc.n	8001358 <str_split+0xac>
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <str_split+0x104>)
 800134e:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <str_split+0x108>)
 8001350:	21bf      	movs	r1, #191	; 0xbf
 8001352:	4819      	ldr	r0, [pc, #100]	; (80013b8 <str_split+0x10c>)
 8001354:	f003 f990 	bl	8004678 <__assert_func>
            *(result + idx++) = strdup(token);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	61ba      	str	r2, [r7, #24]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	18d4      	adds	r4, r2, r3
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f003 fe47 	bl	8004ff8 <strdup>
 800136a:	4603      	mov	r3, r0
 800136c:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	2000      	movs	r0, #0
 8001376:	f003 fe85 	bl	8005084 <strtok>
 800137a:	6178      	str	r0, [r7, #20]
        while (token)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1e0      	bne.n	8001344 <str_split+0x98>
        }
        assert(idx == count - 1);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3b01      	subs	r3, #1
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	429a      	cmp	r2, r3
 800138a:	d005      	beq.n	8001398 <str_split+0xec>
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <str_split+0x110>)
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <str_split+0x108>)
 8001390:	21c3      	movs	r1, #195	; 0xc3
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <str_split+0x10c>)
 8001394:	f003 f970 	bl	8004678 <__assert_func>
        *(result + idx) = 0;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4413      	add	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    }

    return result;
 80013a4:	693b      	ldr	r3, [r7, #16]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	372c      	adds	r7, #44	; 0x2c
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08006d9c 	.word	0x08006d9c
 80013b4:	08006e2c 	.word	0x08006e2c
 80013b8:	08006da8 	.word	0x08006da8
 80013bc:	08006dd0 	.word	0x08006dd0

080013c0 <getSubstring>:

int  getSubstring(char *source, char *target,int from, int to)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
	int length=0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
	int i=0,j=0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]

	//get length
	while(source[i++]!='\0')
 80013da:	e002      	b.n	80013e2 <getSubstring+0x22>
		length++;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
	while(source[i++]!='\0')
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	61ba      	str	r2, [r7, #24]
 80013e8:	461a      	mov	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f3      	bne.n	80013dc <getSubstring+0x1c>

	if(from<0 || from>length){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db03      	blt.n	8001402 <getSubstring+0x42>
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dd04      	ble.n	800140c <getSubstring+0x4c>
		printf("Invalid \'from\' index\n");
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <getSubstring+0xa0>)
 8001404:	f003 fdb0 	bl	8004f68 <puts>
		return 1;
 8001408:	2301      	movs	r3, #1
 800140a:	e025      	b.n	8001458 <getSubstring+0x98>
	}
	if(to>length){
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	dd04      	ble.n	800141e <getSubstring+0x5e>
		printf("Invalid \'to\' index\n");
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <getSubstring+0xa4>)
 8001416:	f003 fda7 	bl	8004f68 <puts>
		return 1;
 800141a:	2301      	movs	r3, #1
 800141c:	e01c      	b.n	8001458 <getSubstring+0x98>
	}

	for(i=from,j=0;i<=to;i++,j++){
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e00d      	b.n	8001444 <getSubstring+0x84>
		target[j]=source[i];
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	441a      	add	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	440b      	add	r3, r1
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	701a      	strb	r2, [r3, #0]
	for(i=from,j=0;i<=to;i++,j++){
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	3301      	adds	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	dded      	ble.n	8001428 <getSubstring+0x68>
	}

	//assign NULL at the end of string
	target[j]='\0';
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]

	return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	08006de4 	.word	0x08006de4
 8001464:	08006dfc 	.word	0x08006dfc

08001468 <sendToLogger>:

void sendToLogger (char *msg) {
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(loggingHuart, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <sendToLogger+0x2c>)
 8001472:	681c      	ldr	r4, [r3, #0]
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7fe fe6b 	bl	8000150 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4620      	mov	r0, r4
 8001486:	f002 ff79 	bl	800437c <HAL_UART_Transmit>
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	2000012c 	.word	0x2000012c

08001498 <setupMotor>:
#include "main.h"
#include "DCMotor.h"

TIM_OC_InitTypeDef sConfigOC_DC_Motor = {0};

void setupMotor(TIM_HandleTypeDef *htimx){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htimx, TIM_CHANNEL_3);
 80014a0:	2108      	movs	r1, #8
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f002 f9e0 	bl	8003868 <HAL_TIM_PWM_Start>
	setMotorDirection(Forward);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f845 	bl	8001538 <setMotorDirection>
	setMotorSpeed(htimx,TIM_CHANNEL_3,1250,0);
 80014ae:	2300      	movs	r3, #0
 80014b0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80014b4:	2108      	movs	r1, #8
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f804 	bl	80014c4 <setMotorSpeed>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <setMotorSpeed>:

void setMotorSpeed(TIM_HandleTypeDef *htimx, uint32_t channel, uint16_t period, uint16_t speed){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80bb      	strh	r3, [r7, #4]

	sConfigOC_DC_Motor.Pulse = (speed*period)/100;
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	88fa      	ldrh	r2, [r7, #6]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <setMotorSpeed+0x6c>)
 80014e4:	fb82 1203 	smull	r1, r2, r2, r3
 80014e8:	1152      	asrs	r2, r2, #5
 80014ea:	17db      	asrs	r3, r3, #31
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <setMotorSpeed+0x70>)
 80014f2:	605a      	str	r2, [r3, #4]
	sConfigOC_DC_Motor.OCMode = TIM_OCMODE_PWM1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <setMotorSpeed+0x70>)
 80014f6:	2260      	movs	r2, #96	; 0x60
 80014f8:	601a      	str	r2, [r3, #0]
	sConfigOC_DC_Motor.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <setMotorSpeed+0x70>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	sConfigOC_DC_Motor.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <setMotorSpeed+0x70>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]

	HAL_TIM_PWM_Stop(htimx, channel);
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f002 fa4f 	bl	80039ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Init(htimx);
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f002 f95b 	bl	80037ca <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC_DC_Motor, channel);
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4907      	ldr	r1, [pc, #28]	; (8001534 <setMotorSpeed+0x70>)
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f002 faab 	bl	8003a74 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htimx, channel);
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f002 f9a1 	bl	8003868 <HAL_TIM_PWM_Start>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	51eb851f 	.word	0x51eb851f
 8001534:	200000b0 	.word	0x200000b0

08001538 <setMotorDirection>:
	uint16_t pulse = (speed*1.0/100)*period;
	setMotorPWM(timer,channel,period,pulse);
	return pulse;
}
*/
void setMotorDirection(Direction dir_code){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState bit_to_send = GPIO_PIN_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]

	//Enviar código de controle da direção:
	HAL_GPIO_WritePin(GPIOA, DIR_EN_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154c:	4828      	ldr	r0, [pc, #160]	; (80015f0 <setMotorDirection+0xb8>)
 800154e:	f001 fccb 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_LATCH_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	4826      	ldr	r0, [pc, #152]	; (80015f0 <setMotorDirection+0xb8>)
 8001558:	f001 fcc6 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIR_CLK_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2120      	movs	r1, #32
 8001560:	4824      	ldr	r0, [pc, #144]	; (80015f4 <setMotorDirection+0xbc>)
 8001562:	f001 fcc1 	bl	8002ee8 <HAL_GPIO_WritePin>

	unsigned char comparator = 0x80;
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	73bb      	strb	r3, [r7, #14]

	for (int i = 0; i<8; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	e02a      	b.n	80015c6 <setMotorDirection+0x8e>
		if (dir_code & comparator){
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	4013      	ands	r3, r2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <setMotorDirection+0x4a>
		  bit_to_send = GPIO_PIN_SET;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e001      	b.n	8001586 <setMotorDirection+0x4e>
		}
		else{
		  bit_to_send = GPIO_PIN_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
		}

		comparator = comparator >> 1;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]

		HAL_GPIO_WritePin(GPIOA, DIR_EN_Pin, bit_to_send);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4816      	ldr	r0, [pc, #88]	; (80015f0 <setMotorDirection+0xb8>)
 8001596:	f001 fca7 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f001 f9ee 	bl	800297c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, DIR_CLK_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2120      	movs	r1, #32
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <setMotorDirection+0xbc>)
 80015a6:	f001 fc9f 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f001 f9e6 	bl	800297c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, DIR_CLK_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2120      	movs	r1, #32
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <setMotorDirection+0xbc>)
 80015b6:	f001 fc97 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f001 f9de 	bl	800297c <HAL_Delay>
	for (int i = 0; i<8; i++){
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	ddd1      	ble.n	8001570 <setMotorDirection+0x38>
	}

	HAL_GPIO_WritePin(GPIOA, DIR_LATCH_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2140      	movs	r1, #64	; 0x40
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <setMotorDirection+0xb8>)
 80015d2:	f001 fc89 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f001 f9d0 	bl	800297c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, DIR_LATCH_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <setMotorDirection+0xb8>)
 80015e2:	f001 fc81 	bl	8002ee8 <HAL_GPIO_WritePin>
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40010c00 	.word	0x40010c00

080015f8 <setServoAngle>:

const float ANGLE_PERCENTAGE_90_NEG = 0.0256;
const float ANGLE_PERCENTAGE_90_POS = 0.1240;
const float ANGLE_PERCENTAGE_NEUTRAL = 0.0744;

void setServoAngle(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, int16_t angle){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	460b      	mov	r3, r1
 8001608:	80fb      	strh	r3, [r7, #6]
 800160a:	4613      	mov	r3, r2
 800160c:	80bb      	strh	r3, [r7, #4]
	uint16_t pulse = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	82fb      	strh	r3, [r7, #22]
	if((angle==0)||(angle<-90)||(angle>90)){
 8001612:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <setServoAngle+0x34>
 800161a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800161e:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001622:	db03      	blt.n	800162c <setServoAngle+0x34>
 8001624:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001628:	2b5a      	cmp	r3, #90	; 0x5a
 800162a:	dd0f      	ble.n	800164c <setServoAngle+0x54>
			pulse = ANGLE_PERCENTAGE_NEUTRAL*period;
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb2c 	bl	8000c8c <__aeabi_i2f>
 8001634:	4603      	mov	r3, r0
 8001636:	4a59      	ldr	r2, [pc, #356]	; (800179c <setServoAngle+0x1a4>)
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb7a 	bl	8000d34 <__aeabi_fmul>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fcc6 	bl	8000fd4 <__aeabi_f2uiz>
 8001648:	4603      	mov	r3, r0
 800164a:	82fb      	strh	r3, [r7, #22]
	}
	if((angle>=-90)&&(angle<0)){
 800164c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001650:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001654:	db4e      	blt.n	80016f4 <setServoAngle+0xfc>
 8001656:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da4a      	bge.n	80016f4 <setServoAngle+0xfc>
		pulse = (((angle+90.0)/90)*(ANGLE_PERCENTAGE_NEUTRAL-ANGLE_PERCENTAGE_90_NEG)+ANGLE_PERCENTAGE_90_NEG)*period;
 800165e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fece 	bl	8000404 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <setServoAngle+0x1a8>)
 800166e:	f7fe fd7d 	bl	800016c <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <setServoAngle+0x1a8>)
 8001680:	f7ff f854 	bl	800072c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	4b43      	ldr	r3, [pc, #268]	; (800179c <setServoAngle+0x1a4>)
 800168e:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <setServoAngle+0x1ac>)
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fa44 	bl	8000b20 <__aeabi_fsub>
 8001698:	4603      	mov	r3, r0
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fec4 	bl	8000428 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe ff16 	bl	80004d8 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4614      	mov	r4, r2
 80016b2:	461d      	mov	r5, r3
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <setServoAngle+0x1ac>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe feb6 	bl	8000428 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe fd52 	bl	800016c <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fe96 	bl	8000404 <__aeabi_i2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fefa 	bl	80004d8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f9a4 	bl	8000a38 <__aeabi_d2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	82fb      	strh	r3, [r7, #22]
	}
	if((angle>0)&&(angle<=90)){
 80016f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	dd45      	ble.n	8001788 <setServoAngle+0x190>
 80016fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001700:	2b5a      	cmp	r3, #90	; 0x5a
 8001702:	dc41      	bgt.n	8001788 <setServoAngle+0x190>
		pulse = (((angle)/90.0)*(ANGLE_PERCENTAGE_90_POS-ANGLE_PERCENTAGE_NEUTRAL)+ANGLE_PERCENTAGE_NEUTRAL)*period;
 8001704:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe7b 	bl	8000404 <__aeabi_i2d>
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <setServoAngle+0x1a8>)
 8001714:	f7ff f80a 	bl	800072c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4614      	mov	r4, r2
 800171e:	461d      	mov	r5, r3
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <setServoAngle+0x1b0>)
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <setServoAngle+0x1a4>)
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f9fa 	bl	8000b20 <__aeabi_fsub>
 800172c:	4603      	mov	r3, r0
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fe7a 	bl	8000428 <__aeabi_f2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4620      	mov	r0, r4
 800173a:	4629      	mov	r1, r5
 800173c:	f7fe fecc 	bl	80004d8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	461d      	mov	r5, r3
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <setServoAngle+0x1a4>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe6c 	bl	8000428 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7fe fd08 	bl	800016c <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fe4c 	bl	8000404 <__aeabi_i2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe feb0 	bl	80004d8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f95a 	bl	8000a38 <__aeabi_d2uiz>
 8001784:	4603      	mov	r3, r0
 8001786:	82fb      	strh	r3, [r7, #22]
	}
	setServoPWM(timer,channel,period,pulse);
 8001788:	8afb      	ldrh	r3, [r7, #22]
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f80c 	bl	80017ac <setServoPWM>
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bdb0      	pop	{r4, r5, r7, pc}
 800179c:	3d985f07 	.word	0x3d985f07
 80017a0:	40568000 	.word	0x40568000
 80017a4:	3cd1b717 	.word	0x3cd1b717
 80017a8:	3dfdf3b6 	.word	0x3dfdf3b6

080017ac <setServoPWM>:

void setServoPWM(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	; 0x30
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	460b      	mov	r3, r1
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	4613      	mov	r3, r2
 80017c0:	80bb      	strh	r3, [r7, #4]
	 HAL_TIM_PWM_Stop(timer, channel); // stop generation of pwm
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f002 f8f1 	bl	80039ac <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer->Init.Period = period; // set the period duration
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Init(timer); // reinititialise with new period value
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f001 fffa 	bl	80037ca <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d6:	2360      	movs	r3, #96	; 0x60
 80017d8:	617b      	str	r3, [r7, #20]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	4619      	mov	r1, r3
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f002 f940 	bl	8003a74 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(timer, channel); // start pwm generation
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f002 f836 	bl	8003868 <HAL_TIM_PWM_Start>
}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180a:	f001 f855 	bl	80028b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180e:	f000 f8bb 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001812:	f000 f9c7 	bl	8001ba4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001816:	f000 f94f 	bl	8001ab8 <MX_TIM3_Init>
  MX_TIM2_Init();
 800181a:	f000 f8f5 	bl	8001a08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setupBLE(&huart1, &huart3);
 800181e:	4951      	ldr	r1, [pc, #324]	; (8001964 <main+0x160>)
 8001820:	4851      	ldr	r0, [pc, #324]	; (8001968 <main+0x164>)
 8001822:	f7ff fbf7 	bl	8001014 <setupBLE>
  setMotorDirection(Forward);
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff fe86 	bl	8001538 <setMotorDirection>
  setupMotor(&htim2);
 800182c:	484f      	ldr	r0, [pc, #316]	; (800196c <main+0x168>)
 800182e:	f7ff fe33 	bl	8001498 <setupMotor>

  int8_t error = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	777b      	strb	r3, [r7, #29]
  int8_t past_error = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	77fb      	strb	r3, [r7, #31]
  int8_t P = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	773b      	strb	r3, [r7, #28]
  int8_t I = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	77bb      	strb	r3, [r7, #30]
  int8_t D = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	76fb      	strb	r3, [r7, #27]
  const int8_t Kp = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	76bb      	strb	r3, [r7, #26]
  const int8_t Ki = 0.1;
 800184a:	2300      	movs	r3, #0
 800184c:	767b      	strb	r3, [r7, #25]
  const int8_t Kd = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	763b      	strb	r3, [r7, #24]

  HAL_Delay(10000);
 8001852:	f242 7010 	movw	r0, #10000	; 0x2710
 8001856:	f001 f891 	bl	800297c <HAL_Delay>
  {
    /* USER CODE END WHILE */

	// LER SENSORES
	// LEITURA DA POSIÇÃO
	ListDevices_t listOfDevices = masterScanForSlaves();
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fc26 	bl	80010b0 <masterScanForSlaves>
	getPowersFromReading(listOfDevices);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800186c:	f000 fa20 	bl	8001cb0 <getPowersFromReading>
	Point myPosition = get_position(b1Power, b2Power, b3Power);
 8001870:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <main+0x16c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fa09 	bl	8000c8c <__aeabi_i2f>
 800187a:	4604      	mov	r4, r0
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <main+0x170>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa03 	bl	8000c8c <__aeabi_i2f>
 8001886:	4605      	mov	r5, r0
 8001888:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <main+0x174>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f9fd 	bl	8000c8c <__aeabi_i2f>
 8001892:	4603      	mov	r3, r0
 8001894:	1d38      	adds	r0, r7, #4
 8001896:	462a      	mov	r2, r5
 8001898:	4621      	mov	r1, r4
 800189a:	f000 fba1 	bl	8001fe0 <get_position>
	free(listOfDevices.devices);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 ff4f 	bl	8004744 <free>

	// CALCULAR ERRO

	// CALCULAR SINAL DE CONTROLE DE ANGULO

	if (error==0){
 80018a6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <main+0xae>
		I = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	77bb      	strb	r3, [r7, #30]
	}
	P = error;
 80018b2:	7f7b      	ldrb	r3, [r7, #29]
 80018b4:	773b      	strb	r3, [r7, #28]
	I = I + error;
 80018b6:	7fba      	ldrb	r2, [r7, #30]
 80018b8:	7f7b      	ldrb	r3, [r7, #29]
 80018ba:	4413      	add	r3, r2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	77bb      	strb	r3, [r7, #30]
	if (I > 90){
 80018c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018c4:	2b5a      	cmp	r3, #90	; 0x5a
 80018c6:	dd02      	ble.n	80018ce <main+0xca>
		I = 90;
 80018c8:	235a      	movs	r3, #90	; 0x5a
 80018ca:	77bb      	strb	r3, [r7, #30]
 80018cc:	e006      	b.n	80018dc <main+0xd8>
	}
	else if (I < -90){
 80018ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018d2:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 80018d6:	da01      	bge.n	80018dc <main+0xd8>
		I = -90;
 80018d8:	23a6      	movs	r3, #166	; 0xa6
 80018da:	77bb      	strb	r3, [r7, #30]
	}
	D = error - past_error;
 80018dc:	7f7a      	ldrb	r2, [r7, #29]
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	76fb      	strb	r3, [r7, #27]

	uint8_t PID = (Kp*P) + (Ki*I) + (Kd*D);
 80018e6:	7ebb      	ldrb	r3, [r7, #26]
 80018e8:	7f3a      	ldrb	r2, [r7, #28]
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	7e7b      	ldrb	r3, [r7, #25]
 80018f2:	7fb9      	ldrb	r1, [r7, #30]
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	7e3b      	ldrb	r3, [r7, #24]
 8001900:	7ef9      	ldrb	r1, [r7, #27]
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	75fb      	strb	r3, [r7, #23]

	past_error = error;
 800190c:	7f7b      	ldrb	r3, [r7, #29]
 800190e:	77fb      	strb	r3, [r7, #31]

	// CONTROLAR OS MOTORES

	if (PID >= 0){
		angle -= PID;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <main+0x178>)
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <main+0x178>)
 800191c:	701a      	strb	r2, [r3, #0]
	}
	else{
		angle += PID;
	}

	if(error<0)
 800191e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da05      	bge.n	8001932 <main+0x12e>
		speed = 100+error;
 8001926:	7f7b      	ldrb	r3, [r7, #29]
 8001928:	3364      	adds	r3, #100	; 0x64
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <main+0x17c>)
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e005      	b.n	800193e <main+0x13a>
	else
		speed = 100-error;
 8001932:	7f7b      	ldrb	r3, [r7, #29]
 8001934:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <main+0x17c>)
 800193c:	701a      	strb	r2, [r3, #0]

	setServoAngle(&htim3,TIM_CHANNEL_2,PERIOD,angle);
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <main+0x178>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b21b      	sxth	r3, r3
 8001944:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001948:	2104      	movs	r1, #4
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <main+0x180>)
 800194c:	f7ff fe54 	bl	80015f8 <setServoAngle>
	setMotorSpeed(&htim2,TIM_CHANNEL_2,PERIOD,speed);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <main+0x17c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800195a:	2104      	movs	r1, #4
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <main+0x168>)
 800195e:	f7ff fdb1 	bl	80014c4 <setMotorSpeed>
  {
 8001962:	e77a      	b.n	800185a <main+0x56>
 8001964:	20000130 	.word	0x20000130
 8001968:	200001bc 	.word	0x200001bc
 800196c:	20000200 	.word	0x20000200
 8001970:	200000d0 	.word	0x200000d0
 8001974:	200000d4 	.word	0x200000d4
 8001978:	200000d8 	.word	0x200000d8
 800197c:	200000cc 	.word	0x200000cc
 8001980:	200000cd 	.word	0x200000cd
 8001984:	20000174 	.word	0x20000174

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b090      	sub	sp, #64	; 0x40
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	2228      	movs	r2, #40	; 0x28
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fedc 	bl	8004754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ae:	2301      	movs	r3, #1
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b2:	2310      	movs	r3, #16
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	2302      	movs	r3, #2
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fac8 	bl	8002f5c <HAL_RCC_OscConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80019d2:	f000 fd43 	bl	800245c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d6:	230f      	movs	r3, #15
 80019d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019da:	2302      	movs	r3, #2
 80019dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80019de:	23b0      	movs	r3, #176	; 0xb0
 80019e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80019e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 fd33 	bl	800345c <HAL_RCC_ClockConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80019fc:	f000 fd2e 	bl	800245c <Error_Handler>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3740      	adds	r7, #64	; 0x40
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]
 8001a26:	615a      	str	r2, [r3, #20]
 8001a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a40:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a52:	4818      	ldr	r0, [pc, #96]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a54:	f001 feb9 	bl	80037ca <HAL_TIM_PWM_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a5e:	f000 fcfd 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a72:	f002 fc25 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a7c:	f000 fcee 	bl	800245c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a80:	2360      	movs	r3, #96	; 0x60
 8001a82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 94;
 8001a84:	235e      	movs	r3, #94	; 0x5e
 8001a86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2208      	movs	r2, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001a98:	f001 ffec 	bl	8003a74 <HAL_TIM_PWM_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001aa2:	f000 fcdb 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <MX_TIM2_Init+0xac>)
 8001aa8:	f000 fd4a 	bl	8002540 <HAL_TIM_MspPostInit>

}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000200 	.word	0x20000200

08001ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
 8001ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001aea:	4a2d      	ldr	r2, [pc, #180]	; (8001ba0 <MX_TIM3_Init+0xe8>)
 8001aec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001afc:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001b00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b0e:	4823      	ldr	r0, [pc, #140]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b10:	f001 fe0c 	bl	800372c <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b1a:	f000 fc9f 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481c      	ldr	r0, [pc, #112]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b2c:	f002 f860 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b36:	f000 fc91 	bl	800245c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b3a:	4818      	ldr	r0, [pc, #96]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b3c:	f001 fe45 	bl	80037ca <HAL_TIM_PWM_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b46:	f000 fc89 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b52:	f107 0320 	add.w	r3, r7, #32
 8001b56:	4619      	mov	r1, r3
 8001b58:	4810      	ldr	r0, [pc, #64]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b5a:	f002 fbb1 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b64:	f000 fc7a 	bl	800245c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b68:	2360      	movs	r3, #96	; 0x60
 8001b6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b80:	f001 ff78 	bl	8003a74 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b8a:	f000 fc67 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <MX_TIM3_Init+0xe4>)
 8001b90:	f000 fcd6 	bl	8002540 <HAL_TIM_MspPostInit>

}
 8001b94:	bf00      	nop
 8001b96:	3738      	adds	r7, #56	; 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000174 	.word	0x20000174
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a37      	ldr	r2, [pc, #220]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bd6:	f043 0320 	orr.w	r3, r3, #32
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <MX_GPIO_Init+0xf8>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_LATCH_Pin|DIR_EN_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001c1e:	4820      	ldr	r0, [pc, #128]	; (8001ca0 <MX_GPIO_Init+0xfc>)
 8001c20:	f001 f962 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2120      	movs	r1, #32
 8001c28:	481e      	ldr	r0, [pc, #120]	; (8001ca4 <MX_GPIO_Init+0x100>)
 8001c2a:	f001 f95d 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_GPIO_Init+0x104>)
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4619      	mov	r1, r3
 8001c42:	481a      	ldr	r0, [pc, #104]	; (8001cac <MX_GPIO_Init+0x108>)
 8001c44:	f000 ffcc 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_LATCH_Pin DIR_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_LATCH_Pin|DIR_EN_Pin;
 8001c48:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480f      	ldr	r0, [pc, #60]	; (8001ca0 <MX_GPIO_Init+0xfc>)
 8001c62:	f000 ffbd 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_CLK_Pin */
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
 8001c66:	2320      	movs	r3, #32
 8001c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <MX_GPIO_Init+0x100>)
 8001c7e:	f000 ffaf 	bl	8002be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2028      	movs	r0, #40	; 0x28
 8001c88:	f000 ff73 	bl	8002b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c8c:	2028      	movs	r0, #40	; 0x28
 8001c8e:	f000 ff8c 	bl	8002baa <HAL_NVIC_EnableIRQ>

}
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	10110000 	.word	0x10110000
 8001cac:	40011000 	.word	0x40011000

08001cb0 <getPowersFromReading>:

/* USER CODE BEGIN 4 */
void getPowersFromReading(ListDevices_t listOfDevices) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	e883 0003 	stmia.w	r3, {r0, r1}
	static int b1Powers[5] = {0,0,0,0,0};
	static int b2Powers[5] = {0,0,0,0,0};
	static int b3Powers[5] = {0,0,0,0,0};
	static uint8_t currentIndex = 0;

	uint8_t nbOfDevices = listOfDevices.nbOfDevices;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	74fb      	strb	r3, [r7, #19]
	Device_t* devices = listOfDevices.devices;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]
	uint8_t b1Changed = 0, b2Changed = 0, b3Changed = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	75bb      	strb	r3, [r7, #22]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	757b      	strb	r3, [r7, #21]

	// Get the powers from entries
	for (uint8_t i=0; i<nbOfDevices; i++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	753b      	strb	r3, [r7, #20]
 8001cd4:	e076      	b.n	8001dc4 <getPowersFromReading+0x114>
		if(strstr(devices[i].name, "B1") != NULL && !isOutlierInArray(5, b1Powers, devices[i].signalStrength)) {
 8001cd6:	7d3b      	ldrb	r3, [r7, #20]
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4966      	ldr	r1, [pc, #408]	; (8001e7c <getPowersFromReading+0x1cc>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 f9b7 	bl	8005056 <strstr>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <getPowersFromReading+0x74>
 8001cee:	7d3b      	ldrb	r3, [r7, #20]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4961      	ldr	r1, [pc, #388]	; (8001e80 <getPowersFromReading+0x1d0>)
 8001cfc:	2005      	movs	r0, #5
 8001cfe:	f000 f8ff 	bl	8001f00 <isOutlierInArray>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10d      	bne.n	8001d24 <getPowersFromReading+0x74>
			b1Powers[currentIndex] = devices[i].signalStrength;
 8001d08:	7d3b      	ldrb	r3, [r7, #20]
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	4611      	mov	r1, r2
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <getPowersFromReading+0x1d0>)
 8001d1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b1Changed = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
 8001d22:	e04c      	b.n	8001dbe <getPowersFromReading+0x10e>
		} else if (strstr(devices[i].name, "B2")!= NULL && !isOutlierInArray(5, b2Powers, devices[i].signalStrength)) {
 8001d24:	7d3b      	ldrb	r3, [r7, #20]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	4956      	ldr	r1, [pc, #344]	; (8001e88 <getPowersFromReading+0x1d8>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f990 	bl	8005056 <strstr>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01a      	beq.n	8001d72 <getPowersFromReading+0xc2>
 8001d3c:	7d3b      	ldrb	r3, [r7, #20]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4950      	ldr	r1, [pc, #320]	; (8001e8c <getPowersFromReading+0x1dc>)
 8001d4a:	2005      	movs	r0, #5
 8001d4c:	f000 f8d8 	bl	8001f00 <isOutlierInArray>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <getPowersFromReading+0xc2>
			b2Powers[currentIndex] = devices[i].signalStrength;
 8001d56:	7d3b      	ldrb	r3, [r7, #20]
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a49      	ldr	r2, [pc, #292]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001d60:	7812      	ldrb	r2, [r2, #0]
 8001d62:	4611      	mov	r1, r2
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <getPowersFromReading+0x1dc>)
 8001d68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b2Changed = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	75bb      	strb	r3, [r7, #22]
 8001d70:	e025      	b.n	8001dbe <getPowersFromReading+0x10e>
		} else if (strstr(devices[i].name, "B3")!= NULL && !isOutlierInArray(5, b3Powers, devices[i].signalStrength)) {
 8001d72:	7d3b      	ldrb	r3, [r7, #20]
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4944      	ldr	r1, [pc, #272]	; (8001e90 <getPowersFromReading+0x1e0>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 f969 	bl	8005056 <strstr>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <getPowersFromReading+0x10e>
 8001d8a:	7d3b      	ldrb	r3, [r7, #20]
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4413      	add	r3, r2
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	461a      	mov	r2, r3
 8001d96:	493f      	ldr	r1, [pc, #252]	; (8001e94 <getPowersFromReading+0x1e4>)
 8001d98:	2005      	movs	r0, #5
 8001d9a:	f000 f8b1 	bl	8001f00 <isOutlierInArray>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10c      	bne.n	8001dbe <getPowersFromReading+0x10e>
			b3Powers[currentIndex] = devices[i].signalStrength;
 8001da4:	7d3b      	ldrb	r3, [r7, #20]
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a35      	ldr	r2, [pc, #212]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	4611      	mov	r1, r2
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a37      	ldr	r2, [pc, #220]	; (8001e94 <getPowersFromReading+0x1e4>)
 8001db6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b3Changed = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	757b      	strb	r3, [r7, #21]
	for (uint8_t i=0; i<nbOfDevices; i++) {
 8001dbe:	7d3b      	ldrb	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	753b      	strb	r3, [r7, #20]
 8001dc4:	7d3a      	ldrb	r2, [r7, #20]
 8001dc6:	7cfb      	ldrb	r3, [r7, #19]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d384      	bcc.n	8001cd6 <getPowersFromReading+0x26>
		}
	}

	uint8_t prevIndex = (currentIndex > 0) ? currentIndex-1 : 4;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <getPowersFromReading+0x12e>
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	e000      	b.n	8001de0 <getPowersFromReading+0x130>
 8001dde:	2304      	movs	r3, #4
 8001de0:	72fb      	strb	r3, [r7, #11]
	if(!b1Changed) b1Powers[currentIndex] = b1Powers[prevIndex];
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <getPowersFromReading+0x14c>
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <getPowersFromReading+0x1d0>)
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <getPowersFromReading+0x1d0>)
 8001df8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(!b2Changed) b2Powers[currentIndex] = b2Powers[prevIndex];
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <getPowersFromReading+0x166>
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <getPowersFromReading+0x1dc>)
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <getPowersFromReading+0x1dc>)
 8001e12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(!b3Changed) b3Powers[currentIndex] = b3Powers[prevIndex];
 8001e16:	7d7b      	ldrb	r3, [r7, #21]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <getPowersFromReading+0x180>
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <getPowersFromReading+0x1e4>)
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <getPowersFromReading+0x1e4>)
 8001e2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	b1Power = getAverage(5, b1Powers);
 8001e30:	4913      	ldr	r1, [pc, #76]	; (8001e80 <getPowersFromReading+0x1d0>)
 8001e32:	2005      	movs	r0, #5
 8001e34:	f000 f836 	bl	8001ea4 <getAverage>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <getPowersFromReading+0x1e8>)
 8001e3c:	6013      	str	r3, [r2, #0]
	b2Power = getAverage(5, b2Powers);
 8001e3e:	4913      	ldr	r1, [pc, #76]	; (8001e8c <getPowersFromReading+0x1dc>)
 8001e40:	2005      	movs	r0, #5
 8001e42:	f000 f82f 	bl	8001ea4 <getAverage>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <getPowersFromReading+0x1ec>)
 8001e4a:	6013      	str	r3, [r2, #0]
	b3Power = getAverage(5, b3Powers);
 8001e4c:	4911      	ldr	r1, [pc, #68]	; (8001e94 <getPowersFromReading+0x1e4>)
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f000 f828 	bl	8001ea4 <getAverage>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <getPowersFromReading+0x1f0>)
 8001e58:	6013      	str	r3, [r2, #0]

	currentIndex = (currentIndex >= 4) ? 0 : currentIndex+1;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d804      	bhi.n	8001e6c <getPowersFromReading+0x1bc>
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e000      	b.n	8001e6e <getPowersFromReading+0x1be>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <getPowersFromReading+0x1d4>)
 8001e70:	7013      	strb	r3, [r2, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	08006e10 	.word	0x08006e10
 8001e80:	200000dc 	.word	0x200000dc
 8001e84:	200000f0 	.word	0x200000f0
 8001e88:	08006e14 	.word	0x08006e14
 8001e8c:	200000f4 	.word	0x200000f4
 8001e90:	08006e18 	.word	0x08006e18
 8001e94:	20000108 	.word	0x20000108
 8001e98:	200000d0 	.word	0x200000d0
 8001e9c:	200000d4 	.word	0x200000d4
 8001ea0:	200000d8 	.word	0x200000d8

08001ea4 <getAverage>:

int getAverage(int nbOfEntries, int entries[]) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	int nonNullEntries = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
	int sum = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
	for (int i=0; i<nbOfEntries; i++) {
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e014      	b.n	8001ee6 <getAverage+0x42>
		if(entries[i] != 0)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <getAverage+0x2c>
			nonNullEntries++;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
		sum += entries[i];
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
	for (int i=0; i<nbOfEntries; i++) {
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbe6      	blt.n	8001ebc <getAverage+0x18>
	}
	return sum/nonNullEntries;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <isOutlierInArray>:

uint8_t isOutlierInArray(int nbOfEntries, int array[], int value) {
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	int min = array[0], max = array[0];
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
	for (int i=1; i<nbOfEntries; i++) {
 8001f18:	2301      	movs	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e01e      	b.n	8001f5c <isOutlierInArray+0x5c>
		if (array[i] > max) max = array[i];
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	da05      	bge.n	8001f3a <isOutlierInArray+0x3a>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
		if (array[i] < min) min = array[i];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dd05      	ble.n	8001f56 <isOutlierInArray+0x56>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61fb      	str	r3, [r7, #28]
	for (int i=1; i<nbOfEntries; i++) {
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbdc      	blt.n	8001f1e <isOutlierInArray+0x1e>
	}
	return (value > 1.1*max || value < 0.9*min);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe fa4d 	bl	8000404 <__aeabi_i2d>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	69b8      	ldr	r0, [r7, #24]
 8001f70:	f7fe fa48 	bl	8000404 <__aeabi_i2d>
 8001f74:	a316      	add	r3, pc, #88	; (adr r3, 8001fd0 <isOutlierInArray+0xd0>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe faad 	bl	80004d8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe fd37 	bl	80009f8 <__aeabi_dcmpgt>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d115      	bne.n	8001fbc <isOutlierInArray+0xbc>
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7fe fa37 	bl	8000404 <__aeabi_i2d>
 8001f96:	4604      	mov	r4, r0
 8001f98:	460d      	mov	r5, r1
 8001f9a:	69f8      	ldr	r0, [r7, #28]
 8001f9c:	f7fe fa32 	bl	8000404 <__aeabi_i2d>
 8001fa0:	a30d      	add	r3, pc, #52	; (adr r3, 8001fd8 <isOutlierInArray+0xd8>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fa97 	bl	80004d8 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4620      	mov	r0, r4
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	f7fe fd03 	bl	80009bc <__aeabi_dcmplt>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <isOutlierInArray+0xc0>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <isOutlierInArray+0xc2>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	9999999a 	.word	0x9999999a
 8001fd4:	3ff19999 	.word	0x3ff19999
 8001fd8:	cccccccd 	.word	0xcccccccd
 8001fdc:	3feccccc 	.word	0x3feccccc

08001fe0 <get_position>:

Point get_position(float rss1, float rss2, float rss3) {
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	b090      	sub	sp, #64	; 0x40
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]

  int8_t P = -69; // Abstract Value, Must be measured
 8001fee:	23bb      	movs	r3, #187	; 0xbb
 8001ff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  int8_t N = 2;  // NI
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  // getting the distance in meters
  float d1 = pow(10,((P - rss1)/(10*N)));
 8001ffa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fe44 	bl	8000c8c <__aeabi_i2f>
 8002004:	4603      	mov	r3, r0
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fd89 	bl	8000b20 <__aeabi_fsub>
 800200e:	4603      	mov	r3, r0
 8002010:	461c      	mov	r4, r3
 8002012:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe34 	bl	8000c8c <__aeabi_i2f>
 8002024:	4603      	mov	r3, r0
 8002026:	4619      	mov	r1, r3
 8002028:	4620      	mov	r0, r4
 800202a:	f7fe ff37 	bl	8000e9c <__aeabi_fdiv>
 800202e:	4603      	mov	r3, r0
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f9f9 	bl	8000428 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	49c6      	ldr	r1, [pc, #792]	; (8002358 <get_position+0x378>)
 8002040:	f003 feba 	bl	8005db8 <pow>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fd14 	bl	8000a78 <__aeabi_d2f>
 8002050:	4603      	mov	r3, r0
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
  float d2 = pow(10,((P - rss2)/(10*N)));
 8002054:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fe17 	bl	8000c8c <__aeabi_i2f>
 800205e:	4603      	mov	r3, r0
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fd5c 	bl	8000b20 <__aeabi_fsub>
 8002068:	4603      	mov	r3, r0
 800206a:	461c      	mov	r4, r3
 800206c:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fe07 	bl	8000c8c <__aeabi_i2f>
 800207e:	4603      	mov	r3, r0
 8002080:	4619      	mov	r1, r3
 8002082:	4620      	mov	r0, r4
 8002084:	f7fe ff0a 	bl	8000e9c <__aeabi_fdiv>
 8002088:	4603      	mov	r3, r0
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe f9cc 	bl	8000428 <__aeabi_f2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	49af      	ldr	r1, [pc, #700]	; (8002358 <get_position+0x378>)
 800209a:	f003 fe8d 	bl	8005db8 <pow>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fce7 	bl	8000a78 <__aeabi_d2f>
 80020aa:	4603      	mov	r3, r0
 80020ac:	637b      	str	r3, [r7, #52]	; 0x34
  float d3 = pow(10,((P - rss3)/(10*N)));
 80020ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fdea 	bl	8000c8c <__aeabi_i2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fd2f 	bl	8000b20 <__aeabi_fsub>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461c      	mov	r4, r3
 80020c6:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fdda 	bl	8000c8c <__aeabi_i2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	4619      	mov	r1, r3
 80020dc:	4620      	mov	r0, r4
 80020de:	f7fe fedd 	bl	8000e9c <__aeabi_fdiv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f99f 	bl	8000428 <__aeabi_f2d>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	f04f 0000 	mov.w	r0, #0
 80020f2:	4999      	ldr	r1, [pc, #612]	; (8002358 <get_position+0x378>)
 80020f4:	f003 fe60 	bl	8005db8 <pow>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	f7fe fcba 	bl	8000a78 <__aeabi_d2f>
 8002104:	4603      	mov	r3, r0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  const Point B2 = {-19.866425, -43.964556 };
  const Point B3 = {-19.866572, -43.964556 };

  // Calculate the position of the unknown point.

  float A = (-2*B1.x+2*B2.x);
 8002108:	4b94      	ldr	r3, [pc, #592]	; (800235c <get_position+0x37c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fe0f 	bl	8000d34 <__aeabi_fmul>
 8002116:	4603      	mov	r3, r0
 8002118:	461c      	mov	r4, r3
 800211a:	4b91      	ldr	r3, [pc, #580]	; (8002360 <get_position+0x380>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fcff 	bl	8000b24 <__addsf3>
 8002126:	4603      	mov	r3, r0
 8002128:	4619      	mov	r1, r3
 800212a:	4620      	mov	r0, r4
 800212c:	f7fe fcfa 	bl	8000b24 <__addsf3>
 8002130:	4603      	mov	r3, r0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  float B = (-2*B1.y+2*B2.y);
 8002134:	4b89      	ldr	r3, [pc, #548]	; (800235c <get_position+0x37c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fdf9 	bl	8000d34 <__aeabi_fmul>
 8002142:	4603      	mov	r3, r0
 8002144:	461c      	mov	r4, r3
 8002146:	4b86      	ldr	r3, [pc, #536]	; (8002360 <get_position+0x380>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4619      	mov	r1, r3
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fce9 	bl	8000b24 <__addsf3>
 8002152:	4603      	mov	r3, r0
 8002154:	4619      	mov	r1, r3
 8002156:	4620      	mov	r0, r4
 8002158:	f7fe fce4 	bl	8000b24 <__addsf3>
 800215c:	4603      	mov	r3, r0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  float C = pow(d1,2)-pow(d2,2)-pow(B1.x,2)+pow(B2.x,2)-pow(B1.y,2)+pow(B2.y,2);
 8002160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002162:	f7fe f961 	bl	8000428 <__aeabi_f2d>
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800216e:	f003 fe23 	bl	8005db8 <pow>
 8002172:	4604      	mov	r4, r0
 8002174:	460d      	mov	r5, r1
 8002176:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002178:	f7fe f956 	bl	8000428 <__aeabi_f2d>
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002184:	f003 fe18 	bl	8005db8 <pow>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	f7fd ffea 	bl	8000168 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4614      	mov	r4, r2
 800219a:	461d      	mov	r5, r3
 800219c:	4b6f      	ldr	r3, [pc, #444]	; (800235c <get_position+0x37c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f941 	bl	8000428 <__aeabi_f2d>
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ae:	f003 fe03 	bl	8005db8 <pow>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fd ffd5 	bl	8000168 <__aeabi_dsub>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4614      	mov	r4, r2
 80021c4:	461d      	mov	r5, r3
 80021c6:	4b66      	ldr	r3, [pc, #408]	; (8002360 <get_position+0x380>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f92c 	bl	8000428 <__aeabi_f2d>
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021d8:	f003 fdee 	bl	8005db8 <pow>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fd ffc2 	bl	800016c <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4614      	mov	r4, r2
 80021ee:	461d      	mov	r5, r3
 80021f0:	4b5a      	ldr	r3, [pc, #360]	; (800235c <get_position+0x37c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f917 	bl	8000428 <__aeabi_f2d>
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002202:	f003 fdd9 	bl	8005db8 <pow>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4620      	mov	r0, r4
 800220c:	4629      	mov	r1, r5
 800220e:	f7fd ffab 	bl	8000168 <__aeabi_dsub>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4614      	mov	r4, r2
 8002218:	461d      	mov	r5, r3
 800221a:	4b51      	ldr	r3, [pc, #324]	; (8002360 <get_position+0x380>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f902 	bl	8000428 <__aeabi_f2d>
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222c:	f003 fdc4 	bl	8005db8 <pow>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fd ff98 	bl	800016c <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc18 	bl	8000a78 <__aeabi_d2f>
 8002248:	4603      	mov	r3, r0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  float D = (-2*B2.x+2*B3.x);
 800224c:	4b44      	ldr	r3, [pc, #272]	; (8002360 <get_position+0x380>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fd6d 	bl	8000d34 <__aeabi_fmul>
 800225a:	4603      	mov	r3, r0
 800225c:	461c      	mov	r4, r3
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <get_position+0x384>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fc5d 	bl	8000b24 <__addsf3>
 800226a:	4603      	mov	r3, r0
 800226c:	4619      	mov	r1, r3
 800226e:	4620      	mov	r0, r4
 8002270:	f7fe fc58 	bl	8000b24 <__addsf3>
 8002274:	4603      	mov	r3, r0
 8002276:	623b      	str	r3, [r7, #32]
  float E = (-2*B2.y+2*B3.y);
 8002278:	4b39      	ldr	r3, [pc, #228]	; (8002360 <get_position+0x380>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fd57 	bl	8000d34 <__aeabi_fmul>
 8002286:	4603      	mov	r3, r0
 8002288:	461c      	mov	r4, r3
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <get_position+0x384>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4619      	mov	r1, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fc47 	bl	8000b24 <__addsf3>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	4620      	mov	r0, r4
 800229c:	f7fe fc42 	bl	8000b24 <__addsf3>
 80022a0:	4603      	mov	r3, r0
 80022a2:	61fb      	str	r3, [r7, #28]
  float F = pow(d2,2)-pow(d3,2)-pow(B2.x,2)+pow(B3.x,2)-pow(B2.y,2)+pow(B2.y,2);
 80022a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022a6:	f7fe f8bf 	bl	8000428 <__aeabi_f2d>
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022b2:	f003 fd81 	bl	8005db8 <pow>
 80022b6:	4604      	mov	r4, r0
 80022b8:	460d      	mov	r5, r1
 80022ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022bc:	f7fe f8b4 	bl	8000428 <__aeabi_f2d>
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c8:	f003 fd76 	bl	8005db8 <pow>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fd ff48 	bl	8000168 <__aeabi_dsub>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4614      	mov	r4, r2
 80022de:	461d      	mov	r5, r3
 80022e0:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <get_position+0x380>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f89f 	bl	8000428 <__aeabi_f2d>
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022f2:	f003 fd61 	bl	8005db8 <pow>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ff33 	bl	8000168 <__aeabi_dsub>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	461d      	mov	r5, r3
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <get_position+0x384>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f88a 	bl	8000428 <__aeabi_f2d>
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800231c:	f003 fd4c 	bl	8005db8 <pow>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fd ff20 	bl	800016c <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <get_position+0x380>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f875 	bl	8000428 <__aeabi_f2d>
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002346:	f003 fd37 	bl	8005db8 <pow>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fd ff09 	bl	8000168 <__aeabi_dsub>
 8002356:	e007      	b.n	8002368 <get_position+0x388>
 8002358:	40240000 	.word	0x40240000
 800235c:	08006e38 	.word	0x08006e38
 8002360:	08006e40 	.word	0x08006e40
 8002364:	08006e48 	.word	0x08006e48
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	4b39      	ldr	r3, [pc, #228]	; (8002458 <get_position+0x478>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f857 	bl	8000428 <__aeabi_f2d>
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002382:	f003 fd19 	bl	8005db8 <pow>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fd feed 	bl	800016c <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fb6d 	bl	8000a78 <__aeabi_d2f>
 800239e:	4603      	mov	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]

  Point p = {
    .x = ((C*E) - (F*B)) / ((E*A) - (B*D)),
 80023a2:	69f9      	ldr	r1, [r7, #28]
 80023a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a6:	f7fe fcc5 	bl	8000d34 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461c      	mov	r4, r3
 80023ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023b0:	69b8      	ldr	r0, [r7, #24]
 80023b2:	f7fe fcbf 	bl	8000d34 <__aeabi_fmul>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4619      	mov	r1, r3
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7fe fbb0 	bl	8000b20 <__aeabi_fsub>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461c      	mov	r4, r3
 80023c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023c6:	69f8      	ldr	r0, [r7, #28]
 80023c8:	f7fe fcb4 	bl	8000d34 <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461d      	mov	r5, r3
 80023d0:	6a39      	ldr	r1, [r7, #32]
 80023d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d4:	f7fe fcae 	bl	8000d34 <__aeabi_fmul>
 80023d8:	4603      	mov	r3, r0
 80023da:	4619      	mov	r1, r3
 80023dc:	4628      	mov	r0, r5
 80023de:	f7fe fb9f 	bl	8000b20 <__aeabi_fsub>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4619      	mov	r1, r3
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7fe fd58 	bl	8000e9c <__aeabi_fdiv>
 80023ec:	4603      	mov	r3, r0
  Point p = {
 80023ee:	613b      	str	r3, [r7, #16]
    .y = ((C*D) - (F*A)) / ((B*D) - (A*E))
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f4:	f7fe fc9e 	bl	8000d34 <__aeabi_fmul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461c      	mov	r4, r3
 80023fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023fe:	69b8      	ldr	r0, [r7, #24]
 8002400:	f7fe fc98 	bl	8000d34 <__aeabi_fmul>
 8002404:	4603      	mov	r3, r0
 8002406:	4619      	mov	r1, r3
 8002408:	4620      	mov	r0, r4
 800240a:	f7fe fb89 	bl	8000b20 <__aeabi_fsub>
 800240e:	4603      	mov	r3, r0
 8002410:	461c      	mov	r4, r3
 8002412:	6a39      	ldr	r1, [r7, #32]
 8002414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002416:	f7fe fc8d 	bl	8000d34 <__aeabi_fmul>
 800241a:	4603      	mov	r3, r0
 800241c:	461d      	mov	r5, r3
 800241e:	69f9      	ldr	r1, [r7, #28]
 8002420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002422:	f7fe fc87 	bl	8000d34 <__aeabi_fmul>
 8002426:	4603      	mov	r3, r0
 8002428:	4619      	mov	r1, r3
 800242a:	4628      	mov	r0, r5
 800242c:	f7fe fb78 	bl	8000b20 <__aeabi_fsub>
 8002430:	4603      	mov	r3, r0
 8002432:	4619      	mov	r1, r3
 8002434:	4620      	mov	r0, r4
 8002436:	f7fe fd31 	bl	8000e9c <__aeabi_fdiv>
 800243a:	4603      	mov	r3, r0
  Point p = {
 800243c:	617b      	str	r3, [r7, #20]
  };

  return p;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	461a      	mov	r2, r3
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	e893 0003 	ldmia.w	r3, {r0, r1}
 800244a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	3740      	adds	r7, #64	; 0x40
 8002452:	46bd      	mov	sp, r7
 8002454:	bdb0      	pop	{r4, r5, r7, pc}
 8002456:	bf00      	nop
 8002458:	08006e40 	.word	0x08006e40

0800245c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_MspInit+0x5c>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <HAL_MspInit+0x5c>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6193      	str	r3, [r2, #24]
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_MspInit+0x5c>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_MspInit+0x5c>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_MspInit+0x5c>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_MspInit+0x5c>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_MspInit+0x60>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_MspInit+0x60>)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010000 	.word	0x40010000

080024cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024dc:	d10b      	bne.n	80024f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_TIM_PWM_MspInit+0x34>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_TIM_PWM_MspInit+0x34>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	61d3      	str	r3, [r2, #28]
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_TIM_PWM_MspInit+0x34>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	40021000 	.word	0x40021000

08002504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_TIM_Base_MspInit+0x34>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10b      	bne.n	800252e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_TIM_Base_MspInit+0x38>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_TIM_Base_MspInit+0x38>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_TIM_Base_MspInit+0x38>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40000400 	.word	0x40000400
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255e:	d12b      	bne.n	80025b8 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_TIM_MspPostInit+0xe0>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a2e      	ldr	r2, [pc, #184]	; (8002620 <HAL_TIM_MspPostInit+0xe0>)
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	6193      	str	r3, [r2, #24]
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_TIM_MspPostInit+0xe0>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2302      	movs	r3, #2
 8002584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	4619      	mov	r1, r3
 800258c:	4825      	ldr	r0, [pc, #148]	; (8002624 <HAL_TIM_MspPostInit+0xe4>)
 800258e:	f000 fb27 	bl	8002be0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_TIM_MspPostInit+0xe8>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <HAL_TIM_MspPostInit+0xe8>)
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025b6:	e02e      	b.n	8002616 <HAL_TIM_MspPostInit+0xd6>
  else if(htim->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1b      	ldr	r2, [pc, #108]	; (800262c <HAL_TIM_MspPostInit+0xec>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d129      	bne.n	8002616 <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_TIM_MspPostInit+0xe0>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_TIM_MspPostInit+0xe0>)
 80025c8:	f043 0310 	orr.w	r3, r3, #16
 80025cc:	6193      	str	r3, [r2, #24]
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_TIM_MspPostInit+0xe0>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	4810      	ldr	r0, [pc, #64]	; (8002630 <HAL_TIM_MspPostInit+0xf0>)
 80025ee:	f000 faf7 	bl	8002be0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_TIM_MspPostInit+0xe8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <HAL_TIM_MspPostInit+0xe8>)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	6053      	str	r3, [r2, #4]
}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	40010c00 	.word	0x40010c00
 8002628:	40010000 	.word	0x40010000
 800262c:	40000400 	.word	0x40000400
 8002630:	40011000 	.word	0x40011000

08002634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <HardFault_Handler+0x4>

08002646 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <MemManage_Handler+0x4>

0800264c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <BusFault_Handler+0x4>

08002652 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <UsageFault_Handler+0x4>

08002658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002680:	f000 f960 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800268c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002690:	f000 fc42 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}

08002698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	return 1;
 800269c:	2301      	movs	r3, #1
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <_kill>:

int _kill(int pid, int sig)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026b0:	f002 f804 	bl	80046bc <__errno>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2216      	movs	r2, #22
 80026b8:	601a      	str	r2, [r3, #0]
	return -1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_exit>:

void _exit (int status)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ce:	f04f 31ff 	mov.w	r1, #4294967295
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffe7 	bl	80026a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026d8:	e7fe      	b.n	80026d8 <_exit+0x12>

080026da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e00a      	b.n	8002702 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026ec:	f3af 8000 	nop.w
 80026f0:	4601      	mov	r1, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60ba      	str	r2, [r7, #8]
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	dbf0      	blt.n	80026ec <_read+0x12>
	}

return len;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e009      	b.n	800273a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60ba      	str	r2, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	dbf1      	blt.n	8002726 <_write+0x12>
	}
	return len;
 8002742:	687b      	ldr	r3, [r7, #4]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <_sbrk+0x50>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x16>
		heap_end = &end;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <_sbrk+0x50>)
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <_sbrk+0x54>)
 8002760:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <_sbrk+0x50>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <_sbrk+0x50>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	466a      	mov	r2, sp
 8002772:	4293      	cmp	r3, r2
 8002774:	d907      	bls.n	8002786 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002776:	f001 ffa1 	bl	80046bc <__errno>
 800277a:	4603      	mov	r3, r0
 800277c:	220c      	movs	r2, #12
 800277e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	e006      	b.n	8002794 <_sbrk+0x48>
	}

	heap_end += incr;
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <_sbrk+0x50>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a03      	ldr	r2, [pc, #12]	; (800279c <_sbrk+0x50>)
 8002790:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000011c 	.word	0x2000011c
 80027a0:	20000260 	.word	0x20000260

080027a4 <_close>:

int _close(int file)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ca:	605a      	str	r2, [r3, #4]
	return 0;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <_isatty>:

int _isatty(int file)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
	return 0;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <SystemInit+0x5c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <SystemInit+0x5c>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <SystemInit+0x5c>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4911      	ldr	r1, [pc, #68]	; (8002860 <SystemInit+0x5c>)
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <SystemInit+0x60>)
 800281c:	4013      	ands	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <SystemInit+0x5c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <SystemInit+0x5c>)
 8002826:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <SystemInit+0x5c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <SystemInit+0x5c>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <SystemInit+0x5c>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <SystemInit+0x5c>)
 8002842:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002846:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SystemInit+0x5c>)
 800284a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800284e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SystemInit+0x64>)
 8002852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002856:	609a      	str	r2, [r3, #8]
#endif 
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40021000 	.word	0x40021000
 8002864:	f8ff0000 	.word	0xf8ff0000
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800286e:	490d      	ldr	r1, [pc, #52]	; (80028a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002874:	e002      	b.n	800287c <LoopCopyDataInit>

08002876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287a:	3304      	adds	r3, #4

0800287c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800287c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002880:	d3f9      	bcc.n	8002876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002884:	4c0a      	ldr	r4, [pc, #40]	; (80028b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002888:	e001      	b.n	800288e <LoopFillZerobss>

0800288a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800288c:	3204      	adds	r2, #4

0800288e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002890:	d3fb      	bcc.n	800288a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002892:	f7ff ffb7 	bl	8002804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002896:	f001 ff29 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800289a:	f7fe ffb3 	bl	8001804 <main>
  bx lr
 800289e:	4770      	bx	lr
  ldr r0, =_sdata
 80028a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80028a8:	080070f8 	.word	0x080070f8
  ldr r2, =_sbss
 80028ac:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80028b0:	2000025c 	.word	0x2000025c

080028b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC1_2_IRQHandler>
	...

080028b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_Init+0x28>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_Init+0x28>)
 80028c2:	f043 0310 	orr.w	r3, r3, #16
 80028c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 f947 	bl	8002b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fdc8 	bl	8002468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f95f 	bl	8002bc6 <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f000 f927 	bl	8002b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000020 	.word	0x20000020
 800293c:	20000028 	.word	0x20000028
 8002940:	20000024 	.word	0x20000024

08002944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_IncTick+0x1c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_IncTick+0x20>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a03      	ldr	r2, [pc, #12]	; (8002964 <HAL_IncTick+0x20>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000028 	.word	0x20000028
 8002964:	20000248 	.word	0x20000248

08002968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b02      	ldr	r3, [pc, #8]	; (8002978 <HAL_GetTick+0x10>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000248 	.word	0x20000248

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fff0 	bl	8002968 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_Delay+0x44>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a2:	bf00      	nop
 80029a4:	f7ff ffe0 	bl	8002968 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d8f7      	bhi.n	80029a4 <HAL_Delay+0x28>
  {
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000028 	.word	0x20000028

080029c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <__NVIC_GetPriorityGrouping+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db0b      	blt.n	8002a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <__NVIC_EnableIRQ+0x34>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	; (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b28:	d301      	bcc.n	8002b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00f      	b.n	8002b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <SysTick_Config+0x40>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b36:	210f      	movs	r1, #15
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f7ff ff90 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <SysTick_Config+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <SysTick_Config+0x40>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff2d 	bl	80029c4 <__NVIC_SetPriorityGrouping>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b84:	f7ff ff42 	bl	8002a0c <__NVIC_GetPriorityGrouping>
 8002b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff ff90 	bl	8002ab4 <NVIC_EncodePriority>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff5f 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff35 	bl	8002a28 <__NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffa2 	bl	8002b18 <SysTick_Config>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf2:	e169      	b.n	8002ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 8158 	bne.w	8002ec2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a9a      	ldr	r2, [pc, #616]	; (8002e80 <HAL_GPIO_Init+0x2a0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d05e      	beq.n	8002cda <HAL_GPIO_Init+0xfa>
 8002c1c:	4a98      	ldr	r2, [pc, #608]	; (8002e80 <HAL_GPIO_Init+0x2a0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d875      	bhi.n	8002d0e <HAL_GPIO_Init+0x12e>
 8002c22:	4a98      	ldr	r2, [pc, #608]	; (8002e84 <HAL_GPIO_Init+0x2a4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d058      	beq.n	8002cda <HAL_GPIO_Init+0xfa>
 8002c28:	4a96      	ldr	r2, [pc, #600]	; (8002e84 <HAL_GPIO_Init+0x2a4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d86f      	bhi.n	8002d0e <HAL_GPIO_Init+0x12e>
 8002c2e:	4a96      	ldr	r2, [pc, #600]	; (8002e88 <HAL_GPIO_Init+0x2a8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d052      	beq.n	8002cda <HAL_GPIO_Init+0xfa>
 8002c34:	4a94      	ldr	r2, [pc, #592]	; (8002e88 <HAL_GPIO_Init+0x2a8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d869      	bhi.n	8002d0e <HAL_GPIO_Init+0x12e>
 8002c3a:	4a94      	ldr	r2, [pc, #592]	; (8002e8c <HAL_GPIO_Init+0x2ac>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d04c      	beq.n	8002cda <HAL_GPIO_Init+0xfa>
 8002c40:	4a92      	ldr	r2, [pc, #584]	; (8002e8c <HAL_GPIO_Init+0x2ac>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d863      	bhi.n	8002d0e <HAL_GPIO_Init+0x12e>
 8002c46:	4a92      	ldr	r2, [pc, #584]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d046      	beq.n	8002cda <HAL_GPIO_Init+0xfa>
 8002c4c:	4a90      	ldr	r2, [pc, #576]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d85d      	bhi.n	8002d0e <HAL_GPIO_Init+0x12e>
 8002c52:	2b12      	cmp	r3, #18
 8002c54:	d82a      	bhi.n	8002cac <HAL_GPIO_Init+0xcc>
 8002c56:	2b12      	cmp	r3, #18
 8002c58:	d859      	bhi.n	8002d0e <HAL_GPIO_Init+0x12e>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <HAL_GPIO_Init+0x80>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002cdb 	.word	0x08002cdb
 8002c64:	08002cb5 	.word	0x08002cb5
 8002c68:	08002cc7 	.word	0x08002cc7
 8002c6c:	08002d09 	.word	0x08002d09
 8002c70:	08002d0f 	.word	0x08002d0f
 8002c74:	08002d0f 	.word	0x08002d0f
 8002c78:	08002d0f 	.word	0x08002d0f
 8002c7c:	08002d0f 	.word	0x08002d0f
 8002c80:	08002d0f 	.word	0x08002d0f
 8002c84:	08002d0f 	.word	0x08002d0f
 8002c88:	08002d0f 	.word	0x08002d0f
 8002c8c:	08002d0f 	.word	0x08002d0f
 8002c90:	08002d0f 	.word	0x08002d0f
 8002c94:	08002d0f 	.word	0x08002d0f
 8002c98:	08002d0f 	.word	0x08002d0f
 8002c9c:	08002d0f 	.word	0x08002d0f
 8002ca0:	08002d0f 	.word	0x08002d0f
 8002ca4:	08002cbd 	.word	0x08002cbd
 8002ca8:	08002cd1 	.word	0x08002cd1
 8002cac:	4a79      	ldr	r2, [pc, #484]	; (8002e94 <HAL_GPIO_Init+0x2b4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cb2:	e02c      	b.n	8002d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	623b      	str	r3, [r7, #32]
          break;
 8002cba:	e029      	b.n	8002d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	623b      	str	r3, [r7, #32]
          break;
 8002cc4:	e024      	b.n	8002d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	623b      	str	r3, [r7, #32]
          break;
 8002cce:	e01f      	b.n	8002d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	623b      	str	r3, [r7, #32]
          break;
 8002cd8:	e01a      	b.n	8002d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	623b      	str	r3, [r7, #32]
          break;
 8002ce6:	e013      	b.n	8002d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	611a      	str	r2, [r3, #16]
          break;
 8002cfa:	e009      	b.n	8002d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	615a      	str	r2, [r3, #20]
          break;
 8002d06:	e003      	b.n	8002d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
          break;
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x130>
          break;
 8002d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2bff      	cmp	r3, #255	; 0xff
 8002d14:	d801      	bhi.n	8002d1a <HAL_GPIO_Init+0x13a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	e001      	b.n	8002d1e <HAL_GPIO_Init+0x13e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2bff      	cmp	r3, #255	; 0xff
 8002d24:	d802      	bhi.n	8002d2c <HAL_GPIO_Init+0x14c>
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	e002      	b.n	8002d32 <HAL_GPIO_Init+0x152>
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	3b08      	subs	r3, #8
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	210f      	movs	r1, #15
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	6a39      	ldr	r1, [r7, #32]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80b1 	beq.w	8002ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d60:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <HAL_GPIO_Init+0x2b8>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a4c      	ldr	r2, [pc, #304]	; (8002e98 <HAL_GPIO_Init+0x2b8>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_GPIO_Init+0x2b8>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d78:	4a48      	ldr	r2, [pc, #288]	; (8002e9c <HAL_GPIO_Init+0x2bc>)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <HAL_GPIO_Init+0x2c0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_GPIO_Init+0x1ec>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3f      	ldr	r2, [pc, #252]	; (8002ea4 <HAL_GPIO_Init+0x2c4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00d      	beq.n	8002dc8 <HAL_GPIO_Init+0x1e8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a3e      	ldr	r2, [pc, #248]	; (8002ea8 <HAL_GPIO_Init+0x2c8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <HAL_GPIO_Init+0x1e4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a3d      	ldr	r2, [pc, #244]	; (8002eac <HAL_GPIO_Init+0x2cc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_GPIO_Init+0x1e0>
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e006      	b.n	8002dce <HAL_GPIO_Init+0x1ee>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	e004      	b.n	8002dce <HAL_GPIO_Init+0x1ee>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e002      	b.n	8002dce <HAL_GPIO_Init+0x1ee>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_GPIO_Init+0x1ee>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd0:	f002 0203 	and.w	r2, r2, #3
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	4093      	lsls	r3, r2
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dde:	492f      	ldr	r1, [pc, #188]	; (8002e9c <HAL_GPIO_Init+0x2bc>)
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	492c      	ldr	r1, [pc, #176]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	4928      	ldr	r1, [pc, #160]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e20:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
 8002e2c:	e006      	b.n	8002e3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	491e      	ldr	r1, [pc, #120]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4918      	ldr	r1, [pc, #96]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	4914      	ldr	r1, [pc, #80]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d021      	beq.n	8002eb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60cb      	str	r3, [r1, #12]
 8002e7c:	e021      	b.n	8002ec2 <HAL_GPIO_Init+0x2e2>
 8002e7e:	bf00      	nop
 8002e80:	10320000 	.word	0x10320000
 8002e84:	10310000 	.word	0x10310000
 8002e88:	10220000 	.word	0x10220000
 8002e8c:	10210000 	.word	0x10210000
 8002e90:	10120000 	.word	0x10120000
 8002e94:	10110000 	.word	0x10110000
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40010800 	.word	0x40010800
 8002ea4:	40010c00 	.word	0x40010c00
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40011400 	.word	0x40011400
 8002eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	4909      	ldr	r1, [pc, #36]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f47f ae8e 	bne.w	8002bf4 <HAL_GPIO_Init+0x14>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	372c      	adds	r7, #44	; 0x2c
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40010400 	.word	0x40010400

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f2e:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f806 	bl	8002f48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e26c      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8087 	beq.w	800308a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f7c:	4b92      	ldr	r3, [pc, #584]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d00c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f88:	4b8f      	ldr	r3, [pc, #572]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d112      	bne.n	8002fba <HAL_RCC_OscConfig+0x5e>
 8002f94:	4b8c      	ldr	r3, [pc, #560]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d10b      	bne.n	8002fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa2:	4b89      	ldr	r3, [pc, #548]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d06c      	beq.n	8003088 <HAL_RCC_OscConfig+0x12c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d168      	bne.n	8003088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e246      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x76>
 8002fc4:	4b80      	ldr	r3, [pc, #512]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7f      	ldr	r2, [pc, #508]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	e02e      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x98>
 8002fda:	4b7b      	ldr	r3, [pc, #492]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7a      	ldr	r2, [pc, #488]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a77      	ldr	r2, [pc, #476]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e01d      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0xbc>
 8002ffe:	4b72      	ldr	r3, [pc, #456]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a71      	ldr	r2, [pc, #452]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 8003018:	4b6b      	ldr	r3, [pc, #428]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6a      	ldr	r2, [pc, #424]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a67      	ldr	r2, [pc, #412]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7ff fc96 	bl	8002968 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003040:	f7ff fc92 	bl	8002968 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1fa      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0xe4>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff fc82 	bl	8002968 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff fc7e 	bl	8002968 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1e6      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	4b53      	ldr	r3, [pc, #332]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x10c>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d063      	beq.n	800315e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030a2:	4b49      	ldr	r3, [pc, #292]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x18c>
 80030ae:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d116      	bne.n	80030e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x176>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e1ba      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4939      	ldr	r1, [pc, #228]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	e03a      	b.n	800315e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f0:	4b36      	ldr	r3, [pc, #216]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7ff fc37 	bl	8002968 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fe:	f7ff fc33 	bl	8002968 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e19b      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4927      	ldr	r1, [pc, #156]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e015      	b.n	800315e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff fc16 	bl	8002968 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003140:	f7ff fc12 	bl	8002968 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e17a      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03a      	beq.n	80031e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d019      	beq.n	80031a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003178:	f7ff fbf6 	bl	8002968 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003180:	f7ff fbf2 	bl	8002968 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e15a      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800319e:	2001      	movs	r0, #1
 80031a0:	f000 faa6 	bl	80036f0 <RCC_Delay>
 80031a4:	e01c      	b.n	80031e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7ff fbdc 	bl	8002968 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b2:	e00f      	b.n	80031d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b4:	f7ff fbd8 	bl	8002968 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d908      	bls.n	80031d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e140      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	42420000 	.word	0x42420000
 80031d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b9e      	ldr	r3, [pc, #632]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e9      	bne.n	80031b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80a6 	beq.w	800333a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b97      	ldr	r3, [pc, #604]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b94      	ldr	r3, [pc, #592]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4a93      	ldr	r2, [pc, #588]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	61d3      	str	r3, [r2, #28]
 800320a:	4b91      	ldr	r3, [pc, #580]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b8e      	ldr	r3, [pc, #568]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b8b      	ldr	r3, [pc, #556]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a8a      	ldr	r2, [pc, #552]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7ff fb99 	bl	8002968 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7ff fb95 	bl	8002968 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0fd      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b81      	ldr	r3, [pc, #516]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x312>
 8003260:	4b7b      	ldr	r3, [pc, #492]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4a7a      	ldr	r2, [pc, #488]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	e02d      	b.n	80032ca <HAL_RCC_OscConfig+0x36e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x334>
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a75      	ldr	r2, [pc, #468]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	4b73      	ldr	r3, [pc, #460]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a72      	ldr	r2, [pc, #456]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	e01c      	b.n	80032ca <HAL_RCC_OscConfig+0x36e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x356>
 8003298:	4b6d      	ldr	r3, [pc, #436]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4a6c      	ldr	r2, [pc, #432]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6213      	str	r3, [r2, #32]
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a69      	ldr	r2, [pc, #420]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	e00b      	b.n	80032ca <HAL_RCC_OscConfig+0x36e>
 80032b2:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4a66      	ldr	r2, [pc, #408]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6213      	str	r3, [r2, #32]
 80032be:	4b64      	ldr	r3, [pc, #400]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a63      	ldr	r2, [pc, #396]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d2:	f7ff fb49 	bl	8002968 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7ff fb45 	bl	8002968 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0ab      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCC_OscConfig+0x37e>
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7ff fb33 	bl	8002968 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7ff fb2f 	bl	8002968 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e095      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b48      	ldr	r3, [pc, #288]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4a47      	ldr	r2, [pc, #284]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8081 	beq.w	8003446 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003344:	4b42      	ldr	r3, [pc, #264]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d061      	beq.n	8003414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d146      	bne.n	80033e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x4fc>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7ff fb03 	bl	8002968 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7ff faff 	bl	8002968 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e067      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d108      	bne.n	80033a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800338e:	4b30      	ldr	r3, [pc, #192]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	492d      	ldr	r1, [pc, #180]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a19      	ldr	r1, [r3, #32]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	430b      	orrs	r3, r1
 80033b2:	4927      	ldr	r1, [pc, #156]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x4fc>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7ff fad3 	bl	8002968 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7ff facf 	bl	8002968 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e037      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x46a>
 80033e4:	e02f      	b.n	8003446 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_RCC_OscConfig+0x4fc>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7ff fabc 	bl	8002968 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7ff fab8 	bl	8002968 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e020      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x498>
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e013      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	429a      	cmp	r2, r3
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
 8003458:	42420060 	.word	0x42420060

0800345c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d0      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4965      	ldr	r1, [pc, #404]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d040      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e073      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06b      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4936      	ldr	r1, [pc, #216]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7ff fa0c 	bl	8002968 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7ff fa08 	bl	8002968 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e053      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d210      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1cc>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1d0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff f96a 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40022000 	.word	0x40022000
 8003620:	40021000 	.word	0x40021000
 8003624:	08006e50 	.word	0x08006e50
 8003628:	20000020 	.word	0x20000020
 800362c:	20000024 	.word	0x20000024

08003630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b490      	push	{r4, r7}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003638:	1d3c      	adds	r4, r7, #4
 800363a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800363c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003640:	f240 2301 	movw	r3, #513	; 0x201
 8003644:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d002      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x40>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x46>
 800366e:	e02d      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003672:	623b      	str	r3, [r7, #32]
      break;
 8003674:	e02d      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003682:	4413      	add	r3, r2
 8003684:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003688:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0c5b      	lsrs	r3, r3, #17
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036a2:	4413      	add	r3, r2
 80036a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ae:	fb02 f203 	mul.w	r2, r2, r3
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ba:	e004      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	623b      	str	r3, [r7, #32]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	623b      	str	r3, [r7, #32]
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6a3b      	ldr	r3, [r7, #32]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc90      	pop	{r4, r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	08006e1c 	.word	0x08006e1c
 80036e4:	40021000 	.word	0x40021000
 80036e8:	007a1200 	.word	0x007a1200
 80036ec:	003d0900 	.word	0x003d0900

080036f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <RCC_Delay+0x34>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <RCC_Delay+0x38>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	0a5b      	lsrs	r3, r3, #9
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800370c:	bf00      	nop
  }
  while (Delay --);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1e5a      	subs	r2, r3, #1
 8003712:	60fa      	str	r2, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f9      	bne.n	800370c <RCC_Delay+0x1c>
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	20000020 	.word	0x20000020
 8003728:	10624dd3 	.word	0x10624dd3

0800372c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fed6 	bl	8002504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fb04 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e041      	b.n	8003860 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fe fe6b 	bl	80024cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f000 fab5 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_TIM_PWM_Start+0x24>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e022      	b.n	80038d2 <HAL_TIM_PWM_Start+0x6a>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d109      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x3e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	e015      	b.n	80038d2 <HAL_TIM_PWM_Start+0x6a>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d109      	bne.n	80038c0 <HAL_TIM_PWM_Start+0x58>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e008      	b.n	80038d2 <HAL_TIM_PWM_Start+0x6a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e05e      	b.n	8003998 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0x82>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e8:	e013      	b.n	8003912 <HAL_TIM_PWM_Start+0xaa>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_PWM_Start+0x92>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_PWM_Start+0xaa>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d104      	bne.n	800390a <HAL_TIM_PWM_Start+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003908:	e003      	b.n	8003912 <HAL_TIM_PWM_Start+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fcac 	bl	8004278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_TIM_PWM_Start+0x138>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d107      	bne.n	800393a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <HAL_TIM_PWM_Start+0x138>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_TIM_PWM_Start+0xfa>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d009      	beq.n	8003962 <HAL_TIM_PWM_Start+0xfa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <HAL_TIM_PWM_Start+0x13c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_TIM_PWM_Start+0xfa>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <HAL_TIM_PWM_Start+0x140>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b06      	cmp	r3, #6
 8003972:	d010      	beq.n	8003996 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	e007      	b.n	8003996 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800

080039ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fc5a 	bl	8004278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <HAL_TIM_PWM_Stop+0xc4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d117      	bne.n	80039fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <HAL_TIM_PWM_Stop+0x52>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	f240 4344 	movw	r3, #1092	; 0x444
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_PWM_Stop+0x52>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <HAL_TIM_PWM_Stop+0x82>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	f240 4344 	movw	r3, #1092	; 0x444
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_PWM_Stop+0x82>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_PWM_Stop+0x92>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a3c:	e013      	b.n	8003a66 <HAL_TIM_PWM_Stop+0xba>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_PWM_Stop+0xa2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a4c:	e00b      	b.n	8003a66 <HAL_TIM_PWM_Stop+0xba>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_PWM_Stop+0xb2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5c:	e003      	b.n	8003a66 <HAL_TIM_PWM_Stop+0xba>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40012c00 	.word	0x40012c00

08003a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e0ac      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	f200 809f 	bhi.w	8003bdc <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a9e:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003bdd 	.word	0x08003bdd
 8003aac:	08003bdd 	.word	0x08003bdd
 8003ab0:	08003bdd 	.word	0x08003bdd
 8003ab4:	08003b19 	.word	0x08003b19
 8003ab8:	08003bdd 	.word	0x08003bdd
 8003abc:	08003bdd 	.word	0x08003bdd
 8003ac0:	08003bdd 	.word	0x08003bdd
 8003ac4:	08003b5b 	.word	0x08003b5b
 8003ac8:	08003bdd 	.word	0x08003bdd
 8003acc:	08003bdd 	.word	0x08003bdd
 8003ad0:	08003bdd 	.word	0x08003bdd
 8003ad4:	08003b9b 	.word	0x08003b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f9ac 	bl	8003e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0208 	orr.w	r2, r2, #8
 8003af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0204 	bic.w	r2, r2, #4
 8003b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6999      	ldr	r1, [r3, #24]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	619a      	str	r2, [r3, #24]
      break;
 8003b16:	e062      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f9f2 	bl	8003f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6999      	ldr	r1, [r3, #24]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	021a      	lsls	r2, r3, #8
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	619a      	str	r2, [r3, #24]
      break;
 8003b58:	e041      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa3b 	bl	8003fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0208 	orr.w	r2, r2, #8
 8003b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0204 	bic.w	r2, r2, #4
 8003b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69d9      	ldr	r1, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	61da      	str	r2, [r3, #28]
      break;
 8003b98:	e021      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fa85 	bl	80040b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69d9      	ldr	r1, [r3, #28]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	021a      	lsls	r2, r3, #8
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	61da      	str	r2, [r3, #28]
      break;
 8003bda:	e000      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_ConfigClockSource+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0b3      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x180>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c40:	d03e      	beq.n	8003cc0 <HAL_TIM_ConfigClockSource+0xd0>
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	f200 8087 	bhi.w	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	f000 8085 	beq.w	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d87f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c58:	2b70      	cmp	r3, #112	; 0x70
 8003c5a:	d01a      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0xa2>
 8003c5c:	2b70      	cmp	r3, #112	; 0x70
 8003c5e:	d87b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d050      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x116>
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d877      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c68:	2b50      	cmp	r3, #80	; 0x50
 8003c6a:	d03c      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0xf6>
 8003c6c:	2b50      	cmp	r3, #80	; 0x50
 8003c6e:	d873      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d058      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x136>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d86f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c78:	2b30      	cmp	r3, #48	; 0x30
 8003c7a:	d064      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x156>
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d86b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d060      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x156>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d867      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d05c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x156>
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d05a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c90:	e062      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6899      	ldr	r1, [r3, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f000 faca 	bl	800423a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	609a      	str	r2, [r3, #8]
      break;
 8003cbe:	e04e      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f000 fab3 	bl	800423a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce2:	609a      	str	r2, [r3, #8]
      break;
 8003ce4:	e03b      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f000 fa2a 	bl	800414c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2150      	movs	r1, #80	; 0x50
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fa81 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003d04:	e02b      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 fa48 	bl	80041a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2160      	movs	r1, #96	; 0x60
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fa71 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003d24:	e01b      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 fa0a 	bl	800414c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fa61 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003d44:	e00b      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f000 fa58 	bl	8004206 <TIM_ITRx_SetConfig>
        break;
 8003d56:	e002      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a29      	ldr	r2, [pc, #164]	; (8003e30 <TIM_Base_SetConfig+0xb8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d007      	beq.n	8003da8 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <TIM_Base_SetConfig+0xbc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0x30>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <TIM_Base_SetConfig+0xc0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d108      	bne.n	8003dba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <TIM_Base_SetConfig+0xb8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00b      	beq.n	8003dda <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc8:	d007      	beq.n	8003dda <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <TIM_Base_SetConfig+0xbc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_Base_SetConfig+0x62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <TIM_Base_SetConfig+0xc0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d108      	bne.n	8003dec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <TIM_Base_SetConfig+0xb8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d103      	bne.n	8003e20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	615a      	str	r2, [r3, #20]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800

08003e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0302 	bic.w	r3, r3, #2
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <TIM_OC1_SetConfig+0xc8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10c      	bne.n	8003eb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0308 	bic.w	r3, r3, #8
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <TIM_OC1_SetConfig+0xc8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40012c00 	.word	0x40012c00

08003f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0210 	bic.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0320 	bic.w	r3, r3, #32
 8003f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <TIM_OC2_SetConfig+0xd0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10d      	bne.n	8003f84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <TIM_OC2_SetConfig+0xd0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d113      	bne.n	8003fb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40012c00 	.word	0x40012c00

08003fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <TIM_OC3_SetConfig+0xd0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10d      	bne.n	8004056 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <TIM_OC3_SetConfig+0xd0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d113      	bne.n	8004086 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00

080040b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	031b      	lsls	r3, r3, #12
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0f      	ldr	r2, [pc, #60]	; (8004148 <TIM_OC4_SetConfig+0x98>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d109      	bne.n	8004124 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00

0800414c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 030a 	bic.w	r3, r3, #10
 8004188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f023 0210 	bic.w	r2, r3, #16
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	031b      	lsls	r3, r3, #12
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 0307 	orr.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423a:	b480      	push	{r7}
 800423c:	b087      	sub	sp, #28
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004254:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	021a      	lsls	r2, r3, #8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	431a      	orrs	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4313      	orrs	r3, r2
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	609a      	str	r2, [r3, #8]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2201      	movs	r2, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	43db      	mvns	r3, r3
 800429a:	401a      	ands	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e046      	b.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00e      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d009      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10c      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4313      	orrs	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800

0800437c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	d17c      	bne.n	8004496 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_UART_Transmit+0x2c>
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e075      	b.n	8004498 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Transmit+0x3e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e06e      	b.n	8004498 <HAL_UART_Transmit+0x11c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2221      	movs	r2, #33	; 0x21
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d0:	f7fe faca 	bl	8002968 <HAL_GetTick>
 80043d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	88fa      	ldrh	r2, [r7, #6]
 80043da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	d108      	bne.n	80043fe <HAL_UART_Transmit+0x82>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e003      	b.n	8004406 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800440e:	e02a      	b.n	8004466 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f8e2 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e036      	b.n	8004498 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	3302      	adds	r3, #2
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e007      	b.n	8004458 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3301      	adds	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1cf      	bne.n	8004410 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	2140      	movs	r1, #64	; 0x40
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f8b2 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e006      	b.n	8004498 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b20      	cmp	r3, #32
 80044be:	f040 808c 	bne.w	80045da <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_UART_Receive+0x2e>
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e084      	b.n	80045dc <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Receive+0x40>
 80044dc:	2302      	movs	r3, #2
 80044de:	e07d      	b.n	80045dc <HAL_UART_Receive+0x13c>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2222      	movs	r2, #34	; 0x22
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044fc:	f7fe fa34 	bl	8002968 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004516:	d108      	bne.n	800452a <HAL_UART_Receive+0x8a>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e003      	b.n	8004532 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800453a:	e043      	b.n	80045c4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2200      	movs	r2, #0
 8004544:	2120      	movs	r1, #32
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f84c 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e042      	b.n	80045dc <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004568:	b29a      	uxth	r2, r3
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	3302      	adds	r3, #2
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	e01f      	b.n	80045b6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457e:	d007      	beq.n	8004590 <HAL_UART_Receive+0xf0>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <HAL_UART_Receive+0xfe>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e008      	b.n	80045b0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1b6      	bne.n	800453c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f4:	e02c      	b.n	8004650 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d028      	beq.n	8004650 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <UART_WaitOnFlagUntilTimeout+0x30>
 8004604:	f7fe f9b0 	bl	8002968 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	429a      	cmp	r2, r3
 8004612:	d21d      	bcs.n	8004650 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004622:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e00f      	b.n	8004670 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4013      	ands	r3, r2
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	429a      	cmp	r2, r3
 800466c:	d0c3      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <__assert_func>:
 8004678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800467a:	4614      	mov	r4, r2
 800467c:	461a      	mov	r2, r3
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <__assert_func+0x2c>)
 8004680:	4605      	mov	r5, r0
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68d8      	ldr	r0, [r3, #12]
 8004686:	b14c      	cbz	r4, 800469c <__assert_func+0x24>
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <__assert_func+0x30>)
 800468a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800468e:	9100      	str	r1, [sp, #0]
 8004690:	462b      	mov	r3, r5
 8004692:	4906      	ldr	r1, [pc, #24]	; (80046ac <__assert_func+0x34>)
 8004694:	f000 f818 	bl	80046c8 <fiprintf>
 8004698:	f000 fea0 	bl	80053dc <abort>
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <__assert_func+0x38>)
 800469e:	461c      	mov	r4, r3
 80046a0:	e7f3      	b.n	800468a <__assert_func+0x12>
 80046a2:	bf00      	nop
 80046a4:	2000002c 	.word	0x2000002c
 80046a8:	08006e60 	.word	0x08006e60
 80046ac:	08006e6d 	.word	0x08006e6d
 80046b0:	08006e9b 	.word	0x08006e9b

080046b4 <atoi>:
 80046b4:	220a      	movs	r2, #10
 80046b6:	2100      	movs	r1, #0
 80046b8:	f000 bdc6 	b.w	8005248 <strtol>

080046bc <__errno>:
 80046bc:	4b01      	ldr	r3, [pc, #4]	; (80046c4 <__errno+0x8>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000002c 	.word	0x2000002c

080046c8 <fiprintf>:
 80046c8:	b40e      	push	{r1, r2, r3}
 80046ca:	b503      	push	{r0, r1, lr}
 80046cc:	4601      	mov	r1, r0
 80046ce:	ab03      	add	r3, sp, #12
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <fiprintf+0x20>)
 80046d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d6:	6800      	ldr	r0, [r0, #0]
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	f000 f911 	bl	8004900 <_vfiprintf_r>
 80046de:	b002      	add	sp, #8
 80046e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e4:	b003      	add	sp, #12
 80046e6:	4770      	bx	lr
 80046e8:	2000002c 	.word	0x2000002c

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	2600      	movs	r6, #0
 80046f0:	4d0c      	ldr	r5, [pc, #48]	; (8004724 <__libc_init_array+0x38>)
 80046f2:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	f002 faea 	bl	8006cd4 <_init>
 8004700:	2600      	movs	r6, #0
 8004702:	4d0a      	ldr	r5, [pc, #40]	; (800472c <__libc_init_array+0x40>)
 8004704:	4c0a      	ldr	r4, [pc, #40]	; (8004730 <__libc_init_array+0x44>)
 8004706:	1b64      	subs	r4, r4, r5
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	080070f0 	.word	0x080070f0
 8004728:	080070f0 	.word	0x080070f0
 800472c:	080070f0 	.word	0x080070f0
 8004730:	080070f4 	.word	0x080070f4

08004734 <malloc>:
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <malloc+0xc>)
 8004736:	4601      	mov	r1, r0
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	f000 b85f 	b.w	80047fc <_malloc_r>
 800473e:	bf00      	nop
 8004740:	2000002c 	.word	0x2000002c

08004744 <free>:
 8004744:	4b02      	ldr	r3, [pc, #8]	; (8004750 <free+0xc>)
 8004746:	4601      	mov	r1, r0
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	f000 b80b 	b.w	8004764 <_free_r>
 800474e:	bf00      	nop
 8004750:	2000002c 	.word	0x2000002c

08004754 <memset>:
 8004754:	4603      	mov	r3, r0
 8004756:	4402      	add	r2, r0
 8004758:	4293      	cmp	r3, r2
 800475a:	d100      	bne.n	800475e <memset+0xa>
 800475c:	4770      	bx	lr
 800475e:	f803 1b01 	strb.w	r1, [r3], #1
 8004762:	e7f9      	b.n	8004758 <memset+0x4>

08004764 <_free_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4605      	mov	r5, r0
 8004768:	2900      	cmp	r1, #0
 800476a:	d043      	beq.n	80047f4 <_free_r+0x90>
 800476c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004770:	1f0c      	subs	r4, r1, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	bfb8      	it	lt
 8004776:	18e4      	addlt	r4, r4, r3
 8004778:	f001 f88c 	bl	8005894 <__malloc_lock>
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <_free_r+0x94>)
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	4610      	mov	r0, r2
 8004782:	b933      	cbnz	r3, 8004792 <_free_r+0x2e>
 8004784:	6063      	str	r3, [r4, #4]
 8004786:	6014      	str	r4, [r2, #0]
 8004788:	4628      	mov	r0, r5
 800478a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800478e:	f001 b887 	b.w	80058a0 <__malloc_unlock>
 8004792:	42a3      	cmp	r3, r4
 8004794:	d90a      	bls.n	80047ac <_free_r+0x48>
 8004796:	6821      	ldr	r1, [r4, #0]
 8004798:	1862      	adds	r2, r4, r1
 800479a:	4293      	cmp	r3, r2
 800479c:	bf01      	itttt	eq
 800479e:	681a      	ldreq	r2, [r3, #0]
 80047a0:	685b      	ldreq	r3, [r3, #4]
 80047a2:	1852      	addeq	r2, r2, r1
 80047a4:	6022      	streq	r2, [r4, #0]
 80047a6:	6063      	str	r3, [r4, #4]
 80047a8:	6004      	str	r4, [r0, #0]
 80047aa:	e7ed      	b.n	8004788 <_free_r+0x24>
 80047ac:	461a      	mov	r2, r3
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b10b      	cbz	r3, 80047b6 <_free_r+0x52>
 80047b2:	42a3      	cmp	r3, r4
 80047b4:	d9fa      	bls.n	80047ac <_free_r+0x48>
 80047b6:	6811      	ldr	r1, [r2, #0]
 80047b8:	1850      	adds	r0, r2, r1
 80047ba:	42a0      	cmp	r0, r4
 80047bc:	d10b      	bne.n	80047d6 <_free_r+0x72>
 80047be:	6820      	ldr	r0, [r4, #0]
 80047c0:	4401      	add	r1, r0
 80047c2:	1850      	adds	r0, r2, r1
 80047c4:	4283      	cmp	r3, r0
 80047c6:	6011      	str	r1, [r2, #0]
 80047c8:	d1de      	bne.n	8004788 <_free_r+0x24>
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4401      	add	r1, r0
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	6053      	str	r3, [r2, #4]
 80047d4:	e7d8      	b.n	8004788 <_free_r+0x24>
 80047d6:	d902      	bls.n	80047de <_free_r+0x7a>
 80047d8:	230c      	movs	r3, #12
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	e7d4      	b.n	8004788 <_free_r+0x24>
 80047de:	6820      	ldr	r0, [r4, #0]
 80047e0:	1821      	adds	r1, r4, r0
 80047e2:	428b      	cmp	r3, r1
 80047e4:	bf01      	itttt	eq
 80047e6:	6819      	ldreq	r1, [r3, #0]
 80047e8:	685b      	ldreq	r3, [r3, #4]
 80047ea:	1809      	addeq	r1, r1, r0
 80047ec:	6021      	streq	r1, [r4, #0]
 80047ee:	6063      	str	r3, [r4, #4]
 80047f0:	6054      	str	r4, [r2, #4]
 80047f2:	e7c9      	b.n	8004788 <_free_r+0x24>
 80047f4:	bd38      	pop	{r3, r4, r5, pc}
 80047f6:	bf00      	nop
 80047f8:	20000120 	.word	0x20000120

080047fc <_malloc_r>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	1ccd      	adds	r5, r1, #3
 8004800:	f025 0503 	bic.w	r5, r5, #3
 8004804:	3508      	adds	r5, #8
 8004806:	2d0c      	cmp	r5, #12
 8004808:	bf38      	it	cc
 800480a:	250c      	movcc	r5, #12
 800480c:	2d00      	cmp	r5, #0
 800480e:	4606      	mov	r6, r0
 8004810:	db01      	blt.n	8004816 <_malloc_r+0x1a>
 8004812:	42a9      	cmp	r1, r5
 8004814:	d903      	bls.n	800481e <_malloc_r+0x22>
 8004816:	230c      	movs	r3, #12
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	2000      	movs	r0, #0
 800481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800481e:	f001 f839 	bl	8005894 <__malloc_lock>
 8004822:	4921      	ldr	r1, [pc, #132]	; (80048a8 <_malloc_r+0xac>)
 8004824:	680a      	ldr	r2, [r1, #0]
 8004826:	4614      	mov	r4, r2
 8004828:	b99c      	cbnz	r4, 8004852 <_malloc_r+0x56>
 800482a:	4f20      	ldr	r7, [pc, #128]	; (80048ac <_malloc_r+0xb0>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	b923      	cbnz	r3, 800483a <_malloc_r+0x3e>
 8004830:	4621      	mov	r1, r4
 8004832:	4630      	mov	r0, r6
 8004834:	f000 fba0 	bl	8004f78 <_sbrk_r>
 8004838:	6038      	str	r0, [r7, #0]
 800483a:	4629      	mov	r1, r5
 800483c:	4630      	mov	r0, r6
 800483e:	f000 fb9b 	bl	8004f78 <_sbrk_r>
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	d123      	bne.n	800488e <_malloc_r+0x92>
 8004846:	230c      	movs	r3, #12
 8004848:	4630      	mov	r0, r6
 800484a:	6033      	str	r3, [r6, #0]
 800484c:	f001 f828 	bl	80058a0 <__malloc_unlock>
 8004850:	e7e3      	b.n	800481a <_malloc_r+0x1e>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	1b5b      	subs	r3, r3, r5
 8004856:	d417      	bmi.n	8004888 <_malloc_r+0x8c>
 8004858:	2b0b      	cmp	r3, #11
 800485a:	d903      	bls.n	8004864 <_malloc_r+0x68>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	441c      	add	r4, r3
 8004860:	6025      	str	r5, [r4, #0]
 8004862:	e004      	b.n	800486e <_malloc_r+0x72>
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	42a2      	cmp	r2, r4
 8004868:	bf0c      	ite	eq
 800486a:	600b      	streq	r3, [r1, #0]
 800486c:	6053      	strne	r3, [r2, #4]
 800486e:	4630      	mov	r0, r6
 8004870:	f001 f816 	bl	80058a0 <__malloc_unlock>
 8004874:	f104 000b 	add.w	r0, r4, #11
 8004878:	1d23      	adds	r3, r4, #4
 800487a:	f020 0007 	bic.w	r0, r0, #7
 800487e:	1ac2      	subs	r2, r0, r3
 8004880:	d0cc      	beq.n	800481c <_malloc_r+0x20>
 8004882:	1a1b      	subs	r3, r3, r0
 8004884:	50a3      	str	r3, [r4, r2]
 8004886:	e7c9      	b.n	800481c <_malloc_r+0x20>
 8004888:	4622      	mov	r2, r4
 800488a:	6864      	ldr	r4, [r4, #4]
 800488c:	e7cc      	b.n	8004828 <_malloc_r+0x2c>
 800488e:	1cc4      	adds	r4, r0, #3
 8004890:	f024 0403 	bic.w	r4, r4, #3
 8004894:	42a0      	cmp	r0, r4
 8004896:	d0e3      	beq.n	8004860 <_malloc_r+0x64>
 8004898:	1a21      	subs	r1, r4, r0
 800489a:	4630      	mov	r0, r6
 800489c:	f000 fb6c 	bl	8004f78 <_sbrk_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d1dd      	bne.n	8004860 <_malloc_r+0x64>
 80048a4:	e7cf      	b.n	8004846 <_malloc_r+0x4a>
 80048a6:	bf00      	nop
 80048a8:	20000120 	.word	0x20000120
 80048ac:	20000124 	.word	0x20000124

080048b0 <__sfputc_r>:
 80048b0:	6893      	ldr	r3, [r2, #8]
 80048b2:	b410      	push	{r4}
 80048b4:	3b01      	subs	r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	6093      	str	r3, [r2, #8]
 80048ba:	da07      	bge.n	80048cc <__sfputc_r+0x1c>
 80048bc:	6994      	ldr	r4, [r2, #24]
 80048be:	42a3      	cmp	r3, r4
 80048c0:	db01      	blt.n	80048c6 <__sfputc_r+0x16>
 80048c2:	290a      	cmp	r1, #10
 80048c4:	d102      	bne.n	80048cc <__sfputc_r+0x1c>
 80048c6:	bc10      	pop	{r4}
 80048c8:	f000 bcc8 	b.w	800525c <__swbuf_r>
 80048cc:	6813      	ldr	r3, [r2, #0]
 80048ce:	1c58      	adds	r0, r3, #1
 80048d0:	6010      	str	r0, [r2, #0]
 80048d2:	7019      	strb	r1, [r3, #0]
 80048d4:	4608      	mov	r0, r1
 80048d6:	bc10      	pop	{r4}
 80048d8:	4770      	bx	lr

080048da <__sfputs_r>:
 80048da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048dc:	4606      	mov	r6, r0
 80048de:	460f      	mov	r7, r1
 80048e0:	4614      	mov	r4, r2
 80048e2:	18d5      	adds	r5, r2, r3
 80048e4:	42ac      	cmp	r4, r5
 80048e6:	d101      	bne.n	80048ec <__sfputs_r+0x12>
 80048e8:	2000      	movs	r0, #0
 80048ea:	e007      	b.n	80048fc <__sfputs_r+0x22>
 80048ec:	463a      	mov	r2, r7
 80048ee:	4630      	mov	r0, r6
 80048f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f4:	f7ff ffdc 	bl	80048b0 <__sfputc_r>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d1f3      	bne.n	80048e4 <__sfputs_r+0xa>
 80048fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004900 <_vfiprintf_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	460d      	mov	r5, r1
 8004906:	4614      	mov	r4, r2
 8004908:	4698      	mov	r8, r3
 800490a:	4606      	mov	r6, r0
 800490c:	b09d      	sub	sp, #116	; 0x74
 800490e:	b118      	cbz	r0, 8004918 <_vfiprintf_r+0x18>
 8004910:	6983      	ldr	r3, [r0, #24]
 8004912:	b90b      	cbnz	r3, 8004918 <_vfiprintf_r+0x18>
 8004914:	f000 fe84 	bl	8005620 <__sinit>
 8004918:	4b89      	ldr	r3, [pc, #548]	; (8004b40 <_vfiprintf_r+0x240>)
 800491a:	429d      	cmp	r5, r3
 800491c:	d11b      	bne.n	8004956 <_vfiprintf_r+0x56>
 800491e:	6875      	ldr	r5, [r6, #4]
 8004920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004922:	07d9      	lsls	r1, r3, #31
 8004924:	d405      	bmi.n	8004932 <_vfiprintf_r+0x32>
 8004926:	89ab      	ldrh	r3, [r5, #12]
 8004928:	059a      	lsls	r2, r3, #22
 800492a:	d402      	bmi.n	8004932 <_vfiprintf_r+0x32>
 800492c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800492e:	f000 ff15 	bl	800575c <__retarget_lock_acquire_recursive>
 8004932:	89ab      	ldrh	r3, [r5, #12]
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	d501      	bpl.n	800493c <_vfiprintf_r+0x3c>
 8004938:	692b      	ldr	r3, [r5, #16]
 800493a:	b9eb      	cbnz	r3, 8004978 <_vfiprintf_r+0x78>
 800493c:	4629      	mov	r1, r5
 800493e:	4630      	mov	r0, r6
 8004940:	f000 fcde 	bl	8005300 <__swsetup_r>
 8004944:	b1c0      	cbz	r0, 8004978 <_vfiprintf_r+0x78>
 8004946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004948:	07dc      	lsls	r4, r3, #31
 800494a:	d50e      	bpl.n	800496a <_vfiprintf_r+0x6a>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	b01d      	add	sp, #116	; 0x74
 8004952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004956:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <_vfiprintf_r+0x244>)
 8004958:	429d      	cmp	r5, r3
 800495a:	d101      	bne.n	8004960 <_vfiprintf_r+0x60>
 800495c:	68b5      	ldr	r5, [r6, #8]
 800495e:	e7df      	b.n	8004920 <_vfiprintf_r+0x20>
 8004960:	4b79      	ldr	r3, [pc, #484]	; (8004b48 <_vfiprintf_r+0x248>)
 8004962:	429d      	cmp	r5, r3
 8004964:	bf08      	it	eq
 8004966:	68f5      	ldreq	r5, [r6, #12]
 8004968:	e7da      	b.n	8004920 <_vfiprintf_r+0x20>
 800496a:	89ab      	ldrh	r3, [r5, #12]
 800496c:	0598      	lsls	r0, r3, #22
 800496e:	d4ed      	bmi.n	800494c <_vfiprintf_r+0x4c>
 8004970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004972:	f000 fef4 	bl	800575e <__retarget_lock_release_recursive>
 8004976:	e7e9      	b.n	800494c <_vfiprintf_r+0x4c>
 8004978:	2300      	movs	r3, #0
 800497a:	9309      	str	r3, [sp, #36]	; 0x24
 800497c:	2320      	movs	r3, #32
 800497e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004982:	2330      	movs	r3, #48	; 0x30
 8004984:	f04f 0901 	mov.w	r9, #1
 8004988:	f8cd 800c 	str.w	r8, [sp, #12]
 800498c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004b4c <_vfiprintf_r+0x24c>
 8004990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004994:	4623      	mov	r3, r4
 8004996:	469a      	mov	sl, r3
 8004998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800499c:	b10a      	cbz	r2, 80049a2 <_vfiprintf_r+0xa2>
 800499e:	2a25      	cmp	r2, #37	; 0x25
 80049a0:	d1f9      	bne.n	8004996 <_vfiprintf_r+0x96>
 80049a2:	ebba 0b04 	subs.w	fp, sl, r4
 80049a6:	d00b      	beq.n	80049c0 <_vfiprintf_r+0xc0>
 80049a8:	465b      	mov	r3, fp
 80049aa:	4622      	mov	r2, r4
 80049ac:	4629      	mov	r1, r5
 80049ae:	4630      	mov	r0, r6
 80049b0:	f7ff ff93 	bl	80048da <__sfputs_r>
 80049b4:	3001      	adds	r0, #1
 80049b6:	f000 80aa 	beq.w	8004b0e <_vfiprintf_r+0x20e>
 80049ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049bc:	445a      	add	r2, fp
 80049be:	9209      	str	r2, [sp, #36]	; 0x24
 80049c0:	f89a 3000 	ldrb.w	r3, [sl]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a2 	beq.w	8004b0e <_vfiprintf_r+0x20e>
 80049ca:	2300      	movs	r3, #0
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295
 80049d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049d4:	f10a 0a01 	add.w	sl, sl, #1
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	9307      	str	r3, [sp, #28]
 80049dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049e0:	931a      	str	r3, [sp, #104]	; 0x68
 80049e2:	4654      	mov	r4, sl
 80049e4:	2205      	movs	r2, #5
 80049e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ea:	4858      	ldr	r0, [pc, #352]	; (8004b4c <_vfiprintf_r+0x24c>)
 80049ec:	f000 ff1c 	bl	8005828 <memchr>
 80049f0:	9a04      	ldr	r2, [sp, #16]
 80049f2:	b9d8      	cbnz	r0, 8004a2c <_vfiprintf_r+0x12c>
 80049f4:	06d1      	lsls	r1, r2, #27
 80049f6:	bf44      	itt	mi
 80049f8:	2320      	movmi	r3, #32
 80049fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049fe:	0713      	lsls	r3, r2, #28
 8004a00:	bf44      	itt	mi
 8004a02:	232b      	movmi	r3, #43	; 0x2b
 8004a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a08:	f89a 3000 	ldrb.w	r3, [sl]
 8004a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0e:	d015      	beq.n	8004a3c <_vfiprintf_r+0x13c>
 8004a10:	4654      	mov	r4, sl
 8004a12:	2000      	movs	r0, #0
 8004a14:	f04f 0c0a 	mov.w	ip, #10
 8004a18:	9a07      	ldr	r2, [sp, #28]
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a20:	3b30      	subs	r3, #48	; 0x30
 8004a22:	2b09      	cmp	r3, #9
 8004a24:	d94e      	bls.n	8004ac4 <_vfiprintf_r+0x1c4>
 8004a26:	b1b0      	cbz	r0, 8004a56 <_vfiprintf_r+0x156>
 8004a28:	9207      	str	r2, [sp, #28]
 8004a2a:	e014      	b.n	8004a56 <_vfiprintf_r+0x156>
 8004a2c:	eba0 0308 	sub.w	r3, r0, r8
 8004a30:	fa09 f303 	lsl.w	r3, r9, r3
 8004a34:	4313      	orrs	r3, r2
 8004a36:	46a2      	mov	sl, r4
 8004a38:	9304      	str	r3, [sp, #16]
 8004a3a:	e7d2      	b.n	80049e2 <_vfiprintf_r+0xe2>
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	1d19      	adds	r1, r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	9103      	str	r1, [sp, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bfbb      	ittet	lt
 8004a48:	425b      	neglt	r3, r3
 8004a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a4e:	9307      	strge	r3, [sp, #28]
 8004a50:	9307      	strlt	r3, [sp, #28]
 8004a52:	bfb8      	it	lt
 8004a54:	9204      	strlt	r2, [sp, #16]
 8004a56:	7823      	ldrb	r3, [r4, #0]
 8004a58:	2b2e      	cmp	r3, #46	; 0x2e
 8004a5a:	d10c      	bne.n	8004a76 <_vfiprintf_r+0x176>
 8004a5c:	7863      	ldrb	r3, [r4, #1]
 8004a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a60:	d135      	bne.n	8004ace <_vfiprintf_r+0x1ce>
 8004a62:	9b03      	ldr	r3, [sp, #12]
 8004a64:	3402      	adds	r4, #2
 8004a66:	1d1a      	adds	r2, r3, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	9203      	str	r2, [sp, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bfb8      	it	lt
 8004a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a74:	9305      	str	r3, [sp, #20]
 8004a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b5c <_vfiprintf_r+0x25c>
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	4650      	mov	r0, sl
 8004a7e:	7821      	ldrb	r1, [r4, #0]
 8004a80:	f000 fed2 	bl	8005828 <memchr>
 8004a84:	b140      	cbz	r0, 8004a98 <_vfiprintf_r+0x198>
 8004a86:	2340      	movs	r3, #64	; 0x40
 8004a88:	eba0 000a 	sub.w	r0, r0, sl
 8004a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8004a90:	9b04      	ldr	r3, [sp, #16]
 8004a92:	3401      	adds	r4, #1
 8004a94:	4303      	orrs	r3, r0
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9c:	2206      	movs	r2, #6
 8004a9e:	482c      	ldr	r0, [pc, #176]	; (8004b50 <_vfiprintf_r+0x250>)
 8004aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aa4:	f000 fec0 	bl	8005828 <memchr>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d03f      	beq.n	8004b2c <_vfiprintf_r+0x22c>
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <_vfiprintf_r+0x254>)
 8004aae:	bb1b      	cbnz	r3, 8004af8 <_vfiprintf_r+0x1f8>
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	3307      	adds	r3, #7
 8004ab4:	f023 0307 	bic.w	r3, r3, #7
 8004ab8:	3308      	adds	r3, #8
 8004aba:	9303      	str	r3, [sp, #12]
 8004abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004abe:	443b      	add	r3, r7
 8004ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac2:	e767      	b.n	8004994 <_vfiprintf_r+0x94>
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004acc:	e7a5      	b.n	8004a1a <_vfiprintf_r+0x11a>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f04f 0c0a 	mov.w	ip, #10
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	3401      	adds	r4, #1
 8004ad8:	9305      	str	r3, [sp, #20]
 8004ada:	4620      	mov	r0, r4
 8004adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ae0:	3a30      	subs	r2, #48	; 0x30
 8004ae2:	2a09      	cmp	r2, #9
 8004ae4:	d903      	bls.n	8004aee <_vfiprintf_r+0x1ee>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0c5      	beq.n	8004a76 <_vfiprintf_r+0x176>
 8004aea:	9105      	str	r1, [sp, #20]
 8004aec:	e7c3      	b.n	8004a76 <_vfiprintf_r+0x176>
 8004aee:	4604      	mov	r4, r0
 8004af0:	2301      	movs	r3, #1
 8004af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004af6:	e7f0      	b.n	8004ada <_vfiprintf_r+0x1da>
 8004af8:	ab03      	add	r3, sp, #12
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	462a      	mov	r2, r5
 8004afe:	4630      	mov	r0, r6
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <_vfiprintf_r+0x258>)
 8004b02:	a904      	add	r1, sp, #16
 8004b04:	f3af 8000 	nop.w
 8004b08:	4607      	mov	r7, r0
 8004b0a:	1c78      	adds	r0, r7, #1
 8004b0c:	d1d6      	bne.n	8004abc <_vfiprintf_r+0x1bc>
 8004b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b10:	07d9      	lsls	r1, r3, #31
 8004b12:	d405      	bmi.n	8004b20 <_vfiprintf_r+0x220>
 8004b14:	89ab      	ldrh	r3, [r5, #12]
 8004b16:	059a      	lsls	r2, r3, #22
 8004b18:	d402      	bmi.n	8004b20 <_vfiprintf_r+0x220>
 8004b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b1c:	f000 fe1f 	bl	800575e <__retarget_lock_release_recursive>
 8004b20:	89ab      	ldrh	r3, [r5, #12]
 8004b22:	065b      	lsls	r3, r3, #25
 8004b24:	f53f af12 	bmi.w	800494c <_vfiprintf_r+0x4c>
 8004b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b2a:	e711      	b.n	8004950 <_vfiprintf_r+0x50>
 8004b2c:	ab03      	add	r3, sp, #12
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	462a      	mov	r2, r5
 8004b32:	4630      	mov	r0, r6
 8004b34:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <_vfiprintf_r+0x258>)
 8004b36:	a904      	add	r1, sp, #16
 8004b38:	f000 f882 	bl	8004c40 <_printf_i>
 8004b3c:	e7e4      	b.n	8004b08 <_vfiprintf_r+0x208>
 8004b3e:	bf00      	nop
 8004b40:	0800706c 	.word	0x0800706c
 8004b44:	0800708c 	.word	0x0800708c
 8004b48:	0800704c 	.word	0x0800704c
 8004b4c:	08006ea0 	.word	0x08006ea0
 8004b50:	08006eaa 	.word	0x08006eaa
 8004b54:	00000000 	.word	0x00000000
 8004b58:	080048db 	.word	0x080048db
 8004b5c:	08006ea6 	.word	0x08006ea6

08004b60 <_printf_common>:
 8004b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	4616      	mov	r6, r2
 8004b66:	4699      	mov	r9, r3
 8004b68:	688a      	ldr	r2, [r1, #8]
 8004b6a:	690b      	ldr	r3, [r1, #16]
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	bfb8      	it	lt
 8004b72:	4613      	movlt	r3, r2
 8004b74:	6033      	str	r3, [r6, #0]
 8004b76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b80:	b10a      	cbz	r2, 8004b86 <_printf_common+0x26>
 8004b82:	3301      	adds	r3, #1
 8004b84:	6033      	str	r3, [r6, #0]
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	0699      	lsls	r1, r3, #26
 8004b8a:	bf42      	ittt	mi
 8004b8c:	6833      	ldrmi	r3, [r6, #0]
 8004b8e:	3302      	addmi	r3, #2
 8004b90:	6033      	strmi	r3, [r6, #0]
 8004b92:	6825      	ldr	r5, [r4, #0]
 8004b94:	f015 0506 	ands.w	r5, r5, #6
 8004b98:	d106      	bne.n	8004ba8 <_printf_common+0x48>
 8004b9a:	f104 0a19 	add.w	sl, r4, #25
 8004b9e:	68e3      	ldr	r3, [r4, #12]
 8004ba0:	6832      	ldr	r2, [r6, #0]
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	42ab      	cmp	r3, r5
 8004ba6:	dc28      	bgt.n	8004bfa <_printf_common+0x9a>
 8004ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bac:	1e13      	subs	r3, r2, #0
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	bf18      	it	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	0692      	lsls	r2, r2, #26
 8004bb6:	d42d      	bmi.n	8004c14 <_printf_common+0xb4>
 8004bb8:	4649      	mov	r1, r9
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bc0:	47c0      	blx	r8
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d020      	beq.n	8004c08 <_printf_common+0xa8>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	68e5      	ldr	r5, [r4, #12]
 8004bca:	f003 0306 	and.w	r3, r3, #6
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	bf18      	it	ne
 8004bd2:	2500      	movne	r5, #0
 8004bd4:	6832      	ldr	r2, [r6, #0]
 8004bd6:	f04f 0600 	mov.w	r6, #0
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	bf08      	it	eq
 8004bde:	1aad      	subeq	r5, r5, r2
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	bf08      	it	eq
 8004be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bfc4      	itt	gt
 8004bec:	1a9b      	subgt	r3, r3, r2
 8004bee:	18ed      	addgt	r5, r5, r3
 8004bf0:	341a      	adds	r4, #26
 8004bf2:	42b5      	cmp	r5, r6
 8004bf4:	d11a      	bne.n	8004c2c <_printf_common+0xcc>
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	e008      	b.n	8004c0c <_printf_common+0xac>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4652      	mov	r2, sl
 8004bfe:	4649      	mov	r1, r9
 8004c00:	4638      	mov	r0, r7
 8004c02:	47c0      	blx	r8
 8004c04:	3001      	adds	r0, #1
 8004c06:	d103      	bne.n	8004c10 <_printf_common+0xb0>
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c10:	3501      	adds	r5, #1
 8004c12:	e7c4      	b.n	8004b9e <_printf_common+0x3e>
 8004c14:	2030      	movs	r0, #48	; 0x30
 8004c16:	18e1      	adds	r1, r4, r3
 8004c18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c22:	4422      	add	r2, r4
 8004c24:	3302      	adds	r3, #2
 8004c26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c2a:	e7c5      	b.n	8004bb8 <_printf_common+0x58>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4622      	mov	r2, r4
 8004c30:	4649      	mov	r1, r9
 8004c32:	4638      	mov	r0, r7
 8004c34:	47c0      	blx	r8
 8004c36:	3001      	adds	r0, #1
 8004c38:	d0e6      	beq.n	8004c08 <_printf_common+0xa8>
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7d9      	b.n	8004bf2 <_printf_common+0x92>
	...

08004c40 <_printf_i>:
 8004c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c44:	460c      	mov	r4, r1
 8004c46:	7e27      	ldrb	r7, [r4, #24]
 8004c48:	4691      	mov	r9, r2
 8004c4a:	2f78      	cmp	r7, #120	; 0x78
 8004c4c:	4680      	mov	r8, r0
 8004c4e:	469a      	mov	sl, r3
 8004c50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c56:	d807      	bhi.n	8004c68 <_printf_i+0x28>
 8004c58:	2f62      	cmp	r7, #98	; 0x62
 8004c5a:	d80a      	bhi.n	8004c72 <_printf_i+0x32>
 8004c5c:	2f00      	cmp	r7, #0
 8004c5e:	f000 80d9 	beq.w	8004e14 <_printf_i+0x1d4>
 8004c62:	2f58      	cmp	r7, #88	; 0x58
 8004c64:	f000 80a4 	beq.w	8004db0 <_printf_i+0x170>
 8004c68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c70:	e03a      	b.n	8004ce8 <_printf_i+0xa8>
 8004c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c76:	2b15      	cmp	r3, #21
 8004c78:	d8f6      	bhi.n	8004c68 <_printf_i+0x28>
 8004c7a:	a001      	add	r0, pc, #4	; (adr r0, 8004c80 <_printf_i+0x40>)
 8004c7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c80:	08004cd9 	.word	0x08004cd9
 8004c84:	08004ced 	.word	0x08004ced
 8004c88:	08004c69 	.word	0x08004c69
 8004c8c:	08004c69 	.word	0x08004c69
 8004c90:	08004c69 	.word	0x08004c69
 8004c94:	08004c69 	.word	0x08004c69
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004c69 	.word	0x08004c69
 8004ca0:	08004c69 	.word	0x08004c69
 8004ca4:	08004c69 	.word	0x08004c69
 8004ca8:	08004c69 	.word	0x08004c69
 8004cac:	08004dfb 	.word	0x08004dfb
 8004cb0:	08004d1d 	.word	0x08004d1d
 8004cb4:	08004ddd 	.word	0x08004ddd
 8004cb8:	08004c69 	.word	0x08004c69
 8004cbc:	08004c69 	.word	0x08004c69
 8004cc0:	08004e1d 	.word	0x08004e1d
 8004cc4:	08004c69 	.word	0x08004c69
 8004cc8:	08004d1d 	.word	0x08004d1d
 8004ccc:	08004c69 	.word	0x08004c69
 8004cd0:	08004c69 	.word	0x08004c69
 8004cd4:	08004de5 	.word	0x08004de5
 8004cd8:	680b      	ldr	r3, [r1, #0]
 8004cda:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cde:	1d1a      	adds	r2, r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	600a      	str	r2, [r1, #0]
 8004ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0a4      	b.n	8004e36 <_printf_i+0x1f6>
 8004cec:	6825      	ldr	r5, [r4, #0]
 8004cee:	6808      	ldr	r0, [r1, #0]
 8004cf0:	062e      	lsls	r6, r5, #24
 8004cf2:	f100 0304 	add.w	r3, r0, #4
 8004cf6:	d50a      	bpl.n	8004d0e <_printf_i+0xce>
 8004cf8:	6805      	ldr	r5, [r0, #0]
 8004cfa:	600b      	str	r3, [r1, #0]
 8004cfc:	2d00      	cmp	r5, #0
 8004cfe:	da03      	bge.n	8004d08 <_printf_i+0xc8>
 8004d00:	232d      	movs	r3, #45	; 0x2d
 8004d02:	426d      	negs	r5, r5
 8004d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d08:	230a      	movs	r3, #10
 8004d0a:	485e      	ldr	r0, [pc, #376]	; (8004e84 <_printf_i+0x244>)
 8004d0c:	e019      	b.n	8004d42 <_printf_i+0x102>
 8004d0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d12:	6805      	ldr	r5, [r0, #0]
 8004d14:	600b      	str	r3, [r1, #0]
 8004d16:	bf18      	it	ne
 8004d18:	b22d      	sxthne	r5, r5
 8004d1a:	e7ef      	b.n	8004cfc <_printf_i+0xbc>
 8004d1c:	680b      	ldr	r3, [r1, #0]
 8004d1e:	6825      	ldr	r5, [r4, #0]
 8004d20:	1d18      	adds	r0, r3, #4
 8004d22:	6008      	str	r0, [r1, #0]
 8004d24:	0628      	lsls	r0, r5, #24
 8004d26:	d501      	bpl.n	8004d2c <_printf_i+0xec>
 8004d28:	681d      	ldr	r5, [r3, #0]
 8004d2a:	e002      	b.n	8004d32 <_printf_i+0xf2>
 8004d2c:	0669      	lsls	r1, r5, #25
 8004d2e:	d5fb      	bpl.n	8004d28 <_printf_i+0xe8>
 8004d30:	881d      	ldrh	r5, [r3, #0]
 8004d32:	2f6f      	cmp	r7, #111	; 0x6f
 8004d34:	bf0c      	ite	eq
 8004d36:	2308      	moveq	r3, #8
 8004d38:	230a      	movne	r3, #10
 8004d3a:	4852      	ldr	r0, [pc, #328]	; (8004e84 <_printf_i+0x244>)
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d42:	6866      	ldr	r6, [r4, #4]
 8004d44:	2e00      	cmp	r6, #0
 8004d46:	bfa8      	it	ge
 8004d48:	6821      	ldrge	r1, [r4, #0]
 8004d4a:	60a6      	str	r6, [r4, #8]
 8004d4c:	bfa4      	itt	ge
 8004d4e:	f021 0104 	bicge.w	r1, r1, #4
 8004d52:	6021      	strge	r1, [r4, #0]
 8004d54:	b90d      	cbnz	r5, 8004d5a <_printf_i+0x11a>
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	d04d      	beq.n	8004df6 <_printf_i+0x1b6>
 8004d5a:	4616      	mov	r6, r2
 8004d5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d60:	fb03 5711 	mls	r7, r3, r1, r5
 8004d64:	5dc7      	ldrb	r7, [r0, r7]
 8004d66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d6a:	462f      	mov	r7, r5
 8004d6c:	42bb      	cmp	r3, r7
 8004d6e:	460d      	mov	r5, r1
 8004d70:	d9f4      	bls.n	8004d5c <_printf_i+0x11c>
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d10b      	bne.n	8004d8e <_printf_i+0x14e>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	07df      	lsls	r7, r3, #31
 8004d7a:	d508      	bpl.n	8004d8e <_printf_i+0x14e>
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	6861      	ldr	r1, [r4, #4]
 8004d80:	4299      	cmp	r1, r3
 8004d82:	bfde      	ittt	le
 8004d84:	2330      	movle	r3, #48	; 0x30
 8004d86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d8e:	1b92      	subs	r2, r2, r6
 8004d90:	6122      	str	r2, [r4, #16]
 8004d92:	464b      	mov	r3, r9
 8004d94:	4621      	mov	r1, r4
 8004d96:	4640      	mov	r0, r8
 8004d98:	f8cd a000 	str.w	sl, [sp]
 8004d9c:	aa03      	add	r2, sp, #12
 8004d9e:	f7ff fedf 	bl	8004b60 <_printf_common>
 8004da2:	3001      	adds	r0, #1
 8004da4:	d14c      	bne.n	8004e40 <_printf_i+0x200>
 8004da6:	f04f 30ff 	mov.w	r0, #4294967295
 8004daa:	b004      	add	sp, #16
 8004dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db0:	4834      	ldr	r0, [pc, #208]	; (8004e84 <_printf_i+0x244>)
 8004db2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004db6:	680e      	ldr	r6, [r1, #0]
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dbe:	061f      	lsls	r7, r3, #24
 8004dc0:	600e      	str	r6, [r1, #0]
 8004dc2:	d514      	bpl.n	8004dee <_printf_i+0x1ae>
 8004dc4:	07d9      	lsls	r1, r3, #31
 8004dc6:	bf44      	itt	mi
 8004dc8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dcc:	6023      	strmi	r3, [r4, #0]
 8004dce:	b91d      	cbnz	r5, 8004dd8 <_printf_i+0x198>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	f023 0320 	bic.w	r3, r3, #32
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	2310      	movs	r3, #16
 8004dda:	e7af      	b.n	8004d3c <_printf_i+0xfc>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	f043 0320 	orr.w	r3, r3, #32
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	2378      	movs	r3, #120	; 0x78
 8004de6:	4828      	ldr	r0, [pc, #160]	; (8004e88 <_printf_i+0x248>)
 8004de8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dec:	e7e3      	b.n	8004db6 <_printf_i+0x176>
 8004dee:	065e      	lsls	r6, r3, #25
 8004df0:	bf48      	it	mi
 8004df2:	b2ad      	uxthmi	r5, r5
 8004df4:	e7e6      	b.n	8004dc4 <_printf_i+0x184>
 8004df6:	4616      	mov	r6, r2
 8004df8:	e7bb      	b.n	8004d72 <_printf_i+0x132>
 8004dfa:	680b      	ldr	r3, [r1, #0]
 8004dfc:	6826      	ldr	r6, [r4, #0]
 8004dfe:	1d1d      	adds	r5, r3, #4
 8004e00:	6960      	ldr	r0, [r4, #20]
 8004e02:	600d      	str	r5, [r1, #0]
 8004e04:	0635      	lsls	r5, r6, #24
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	d501      	bpl.n	8004e0e <_printf_i+0x1ce>
 8004e0a:	6018      	str	r0, [r3, #0]
 8004e0c:	e002      	b.n	8004e14 <_printf_i+0x1d4>
 8004e0e:	0671      	lsls	r1, r6, #25
 8004e10:	d5fb      	bpl.n	8004e0a <_printf_i+0x1ca>
 8004e12:	8018      	strh	r0, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	4616      	mov	r6, r2
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	e7ba      	b.n	8004d92 <_printf_i+0x152>
 8004e1c:	680b      	ldr	r3, [r1, #0]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	600a      	str	r2, [r1, #0]
 8004e22:	681e      	ldr	r6, [r3, #0]
 8004e24:	2100      	movs	r1, #0
 8004e26:	4630      	mov	r0, r6
 8004e28:	6862      	ldr	r2, [r4, #4]
 8004e2a:	f000 fcfd 	bl	8005828 <memchr>
 8004e2e:	b108      	cbz	r0, 8004e34 <_printf_i+0x1f4>
 8004e30:	1b80      	subs	r0, r0, r6
 8004e32:	6060      	str	r0, [r4, #4]
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e3e:	e7a8      	b.n	8004d92 <_printf_i+0x152>
 8004e40:	4632      	mov	r2, r6
 8004e42:	4649      	mov	r1, r9
 8004e44:	4640      	mov	r0, r8
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	47d0      	blx	sl
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d0ab      	beq.n	8004da6 <_printf_i+0x166>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	079b      	lsls	r3, r3, #30
 8004e52:	d413      	bmi.n	8004e7c <_printf_i+0x23c>
 8004e54:	68e0      	ldr	r0, [r4, #12]
 8004e56:	9b03      	ldr	r3, [sp, #12]
 8004e58:	4298      	cmp	r0, r3
 8004e5a:	bfb8      	it	lt
 8004e5c:	4618      	movlt	r0, r3
 8004e5e:	e7a4      	b.n	8004daa <_printf_i+0x16a>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4632      	mov	r2, r6
 8004e64:	4649      	mov	r1, r9
 8004e66:	4640      	mov	r0, r8
 8004e68:	47d0      	blx	sl
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d09b      	beq.n	8004da6 <_printf_i+0x166>
 8004e6e:	3501      	adds	r5, #1
 8004e70:	68e3      	ldr	r3, [r4, #12]
 8004e72:	9903      	ldr	r1, [sp, #12]
 8004e74:	1a5b      	subs	r3, r3, r1
 8004e76:	42ab      	cmp	r3, r5
 8004e78:	dcf2      	bgt.n	8004e60 <_printf_i+0x220>
 8004e7a:	e7eb      	b.n	8004e54 <_printf_i+0x214>
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	f104 0619 	add.w	r6, r4, #25
 8004e82:	e7f5      	b.n	8004e70 <_printf_i+0x230>
 8004e84:	08006eb1 	.word	0x08006eb1
 8004e88:	08006ec2 	.word	0x08006ec2

08004e8c <_puts_r>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	460e      	mov	r6, r1
 8004e90:	4605      	mov	r5, r0
 8004e92:	b118      	cbz	r0, 8004e9c <_puts_r+0x10>
 8004e94:	6983      	ldr	r3, [r0, #24]
 8004e96:	b90b      	cbnz	r3, 8004e9c <_puts_r+0x10>
 8004e98:	f000 fbc2 	bl	8005620 <__sinit>
 8004e9c:	69ab      	ldr	r3, [r5, #24]
 8004e9e:	68ac      	ldr	r4, [r5, #8]
 8004ea0:	b913      	cbnz	r3, 8004ea8 <_puts_r+0x1c>
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 fbbc 	bl	8005620 <__sinit>
 8004ea8:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <_puts_r+0xd0>)
 8004eaa:	429c      	cmp	r4, r3
 8004eac:	d120      	bne.n	8004ef0 <_puts_r+0x64>
 8004eae:	686c      	ldr	r4, [r5, #4]
 8004eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb2:	07db      	lsls	r3, r3, #31
 8004eb4:	d405      	bmi.n	8004ec2 <_puts_r+0x36>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	0598      	lsls	r0, r3, #22
 8004eba:	d402      	bmi.n	8004ec2 <_puts_r+0x36>
 8004ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ebe:	f000 fc4d 	bl	800575c <__retarget_lock_acquire_recursive>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	0719      	lsls	r1, r3, #28
 8004ec6:	d51d      	bpl.n	8004f04 <_puts_r+0x78>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	b1db      	cbz	r3, 8004f04 <_puts_r+0x78>
 8004ecc:	3e01      	subs	r6, #1
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60a3      	str	r3, [r4, #8]
 8004ed8:	bb39      	cbnz	r1, 8004f2a <_puts_r+0x9e>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da38      	bge.n	8004f50 <_puts_r+0xc4>
 8004ede:	4622      	mov	r2, r4
 8004ee0:	210a      	movs	r1, #10
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 f9ba 	bl	800525c <__swbuf_r>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d011      	beq.n	8004f10 <_puts_r+0x84>
 8004eec:	250a      	movs	r5, #10
 8004eee:	e011      	b.n	8004f14 <_puts_r+0x88>
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <_puts_r+0xd4>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	d101      	bne.n	8004efa <_puts_r+0x6e>
 8004ef6:	68ac      	ldr	r4, [r5, #8]
 8004ef8:	e7da      	b.n	8004eb0 <_puts_r+0x24>
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <_puts_r+0xd8>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	bf08      	it	eq
 8004f00:	68ec      	ldreq	r4, [r5, #12]
 8004f02:	e7d5      	b.n	8004eb0 <_puts_r+0x24>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f9fa 	bl	8005300 <__swsetup_r>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0dd      	beq.n	8004ecc <_puts_r+0x40>
 8004f10:	f04f 35ff 	mov.w	r5, #4294967295
 8004f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f16:	07da      	lsls	r2, r3, #31
 8004f18:	d405      	bmi.n	8004f26 <_puts_r+0x9a>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	059b      	lsls	r3, r3, #22
 8004f1e:	d402      	bmi.n	8004f26 <_puts_r+0x9a>
 8004f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f22:	f000 fc1c 	bl	800575e <__retarget_lock_release_recursive>
 8004f26:	4628      	mov	r0, r5
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da04      	bge.n	8004f38 <_puts_r+0xac>
 8004f2e:	69a2      	ldr	r2, [r4, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dc06      	bgt.n	8004f42 <_puts_r+0xb6>
 8004f34:	290a      	cmp	r1, #10
 8004f36:	d004      	beq.n	8004f42 <_puts_r+0xb6>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	6022      	str	r2, [r4, #0]
 8004f3e:	7019      	strb	r1, [r3, #0]
 8004f40:	e7c5      	b.n	8004ece <_puts_r+0x42>
 8004f42:	4622      	mov	r2, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 f989 	bl	800525c <__swbuf_r>
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d1bf      	bne.n	8004ece <_puts_r+0x42>
 8004f4e:	e7df      	b.n	8004f10 <_puts_r+0x84>
 8004f50:	250a      	movs	r5, #10
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	6022      	str	r2, [r4, #0]
 8004f58:	701d      	strb	r5, [r3, #0]
 8004f5a:	e7db      	b.n	8004f14 <_puts_r+0x88>
 8004f5c:	0800706c 	.word	0x0800706c
 8004f60:	0800708c 	.word	0x0800708c
 8004f64:	0800704c 	.word	0x0800704c

08004f68 <puts>:
 8004f68:	4b02      	ldr	r3, [pc, #8]	; (8004f74 <puts+0xc>)
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	f7ff bf8d 	b.w	8004e8c <_puts_r>
 8004f72:	bf00      	nop
 8004f74:	2000002c 	.word	0x2000002c

08004f78 <_sbrk_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4d05      	ldr	r5, [pc, #20]	; (8004f94 <_sbrk_r+0x1c>)
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	f7fd fbe2 	bl	800274c <_sbrk>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_sbrk_r+0x1a>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_sbrk_r+0x1a>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000258 	.word	0x20000258

08004f98 <siprintf>:
 8004f98:	b40e      	push	{r1, r2, r3}
 8004f9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f9e:	b500      	push	{lr}
 8004fa0:	b09c      	sub	sp, #112	; 0x70
 8004fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8004fa4:	9002      	str	r0, [sp, #8]
 8004fa6:	9006      	str	r0, [sp, #24]
 8004fa8:	9107      	str	r1, [sp, #28]
 8004faa:	9104      	str	r1, [sp, #16]
 8004fac:	4808      	ldr	r0, [pc, #32]	; (8004fd0 <siprintf+0x38>)
 8004fae:	4909      	ldr	r1, [pc, #36]	; (8004fd4 <siprintf+0x3c>)
 8004fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fb4:	9105      	str	r1, [sp, #20]
 8004fb6:	6800      	ldr	r0, [r0, #0]
 8004fb8:	a902      	add	r1, sp, #8
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	f000 fcf8 	bl	80059b0 <_svfiprintf_r>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	b01c      	add	sp, #112	; 0x70
 8004fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fcc:	b003      	add	sp, #12
 8004fce:	4770      	bx	lr
 8004fd0:	2000002c 	.word	0x2000002c
 8004fd4:	ffff0208 	.word	0xffff0208

08004fd8 <strcat>:
 8004fd8:	4602      	mov	r2, r0
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	7814      	ldrb	r4, [r2, #0]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	3201      	adds	r2, #1
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	d1fa      	bne.n	8004fdc <strcat+0x4>
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d1f9      	bne.n	8004fe8 <strcat+0x10>
 8004ff4:	bd10      	pop	{r4, pc}
	...

08004ff8 <strdup>:
 8004ff8:	4b02      	ldr	r3, [pc, #8]	; (8005004 <strdup+0xc>)
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	f000 b803 	b.w	8005008 <_strdup_r>
 8005002:	bf00      	nop
 8005004:	2000002c 	.word	0x2000002c

08005008 <_strdup_r>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	460d      	mov	r5, r1
 8005010:	f7fb f89e 	bl	8000150 <strlen>
 8005014:	1c46      	adds	r6, r0, #1
 8005016:	4631      	mov	r1, r6
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff fbef 	bl	80047fc <_malloc_r>
 800501e:	4604      	mov	r4, r0
 8005020:	b118      	cbz	r0, 800502a <_strdup_r+0x22>
 8005022:	4632      	mov	r2, r6
 8005024:	4629      	mov	r1, r5
 8005026:	f000 fc0d 	bl	8005844 <memcpy>
 800502a:	4620      	mov	r0, r4
 800502c:	bd70      	pop	{r4, r5, r6, pc}

0800502e <strrchr>:
 800502e:	b538      	push	{r3, r4, r5, lr}
 8005030:	4603      	mov	r3, r0
 8005032:	460c      	mov	r4, r1
 8005034:	b969      	cbnz	r1, 8005052 <strrchr+0x24>
 8005036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800503a:	f000 be40 	b.w	8005cbe <strchr>
 800503e:	4605      	mov	r5, r0
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	4621      	mov	r1, r4
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fe3a 	bl	8005cbe <strchr>
 800504a:	2800      	cmp	r0, #0
 800504c:	d1f7      	bne.n	800503e <strrchr+0x10>
 800504e:	4628      	mov	r0, r5
 8005050:	bd38      	pop	{r3, r4, r5, pc}
 8005052:	2500      	movs	r5, #0
 8005054:	e7f5      	b.n	8005042 <strrchr+0x14>

08005056 <strstr>:
 8005056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005058:	780c      	ldrb	r4, [r1, #0]
 800505a:	b164      	cbz	r4, 8005076 <strstr+0x20>
 800505c:	4603      	mov	r3, r0
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	1c5e      	adds	r6, r3, #1
 8005064:	b90a      	cbnz	r2, 800506a <strstr+0x14>
 8005066:	4610      	mov	r0, r2
 8005068:	e005      	b.n	8005076 <strstr+0x20>
 800506a:	4294      	cmp	r4, r2
 800506c:	d108      	bne.n	8005080 <strstr+0x2a>
 800506e:	460d      	mov	r5, r1
 8005070:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005074:	b902      	cbnz	r2, 8005078 <strstr+0x22>
 8005076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005078:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800507c:	4297      	cmp	r7, r2
 800507e:	d0f7      	beq.n	8005070 <strstr+0x1a>
 8005080:	4633      	mov	r3, r6
 8005082:	e7ec      	b.n	800505e <strstr+0x8>

08005084 <strtok>:
 8005084:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <strtok+0x5c>)
 8005086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508a:	681f      	ldr	r7, [r3, #0]
 800508c:	4605      	mov	r5, r0
 800508e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005090:	460e      	mov	r6, r1
 8005092:	b9ec      	cbnz	r4, 80050d0 <strtok+0x4c>
 8005094:	2050      	movs	r0, #80	; 0x50
 8005096:	f7ff fb4d 	bl	8004734 <malloc>
 800509a:	4602      	mov	r2, r0
 800509c:	65b8      	str	r0, [r7, #88]	; 0x58
 800509e:	b920      	cbnz	r0, 80050aa <strtok+0x26>
 80050a0:	2157      	movs	r1, #87	; 0x57
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <strtok+0x60>)
 80050a4:	4810      	ldr	r0, [pc, #64]	; (80050e8 <strtok+0x64>)
 80050a6:	f7ff fae7 	bl	8004678 <__assert_func>
 80050aa:	e9c0 4400 	strd	r4, r4, [r0]
 80050ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80050b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80050b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80050ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80050be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80050c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80050c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80050ca:	6184      	str	r4, [r0, #24]
 80050cc:	7704      	strb	r4, [r0, #28]
 80050ce:	6244      	str	r4, [r0, #36]	; 0x24
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050d6:	2301      	movs	r3, #1
 80050d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	f000 b806 	b.w	80050ec <__strtok_r>
 80050e0:	2000002c 	.word	0x2000002c
 80050e4:	08006ed3 	.word	0x08006ed3
 80050e8:	08006eea 	.word	0x08006eea

080050ec <__strtok_r>:
 80050ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ee:	b908      	cbnz	r0, 80050f4 <__strtok_r+0x8>
 80050f0:	6810      	ldr	r0, [r2, #0]
 80050f2:	b188      	cbz	r0, 8005118 <__strtok_r+0x2c>
 80050f4:	4604      	mov	r4, r0
 80050f6:	460f      	mov	r7, r1
 80050f8:	4620      	mov	r0, r4
 80050fa:	f814 5b01 	ldrb.w	r5, [r4], #1
 80050fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005102:	b91e      	cbnz	r6, 800510c <__strtok_r+0x20>
 8005104:	b965      	cbnz	r5, 8005120 <__strtok_r+0x34>
 8005106:	4628      	mov	r0, r5
 8005108:	6015      	str	r5, [r2, #0]
 800510a:	e005      	b.n	8005118 <__strtok_r+0x2c>
 800510c:	42b5      	cmp	r5, r6
 800510e:	d1f6      	bne.n	80050fe <__strtok_r+0x12>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <__strtok_r+0xa>
 8005114:	6014      	str	r4, [r2, #0]
 8005116:	7003      	strb	r3, [r0, #0]
 8005118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511a:	461c      	mov	r4, r3
 800511c:	e00c      	b.n	8005138 <__strtok_r+0x4c>
 800511e:	b915      	cbnz	r5, 8005126 <__strtok_r+0x3a>
 8005120:	460e      	mov	r6, r1
 8005122:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005126:	f816 5b01 	ldrb.w	r5, [r6], #1
 800512a:	42ab      	cmp	r3, r5
 800512c:	d1f7      	bne.n	800511e <__strtok_r+0x32>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f3      	beq.n	800511a <__strtok_r+0x2e>
 8005132:	2300      	movs	r3, #0
 8005134:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005138:	6014      	str	r4, [r2, #0]
 800513a:	e7ed      	b.n	8005118 <__strtok_r+0x2c>

0800513c <_strtol_l.isra.0>:
 800513c:	2b01      	cmp	r3, #1
 800513e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005142:	4686      	mov	lr, r0
 8005144:	d001      	beq.n	800514a <_strtol_l.isra.0+0xe>
 8005146:	2b24      	cmp	r3, #36	; 0x24
 8005148:	d906      	bls.n	8005158 <_strtol_l.isra.0+0x1c>
 800514a:	f7ff fab7 	bl	80046bc <__errno>
 800514e:	2316      	movs	r3, #22
 8005150:	6003      	str	r3, [r0, #0]
 8005152:	2000      	movs	r0, #0
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	468c      	mov	ip, r1
 800515a:	4e3a      	ldr	r6, [pc, #232]	; (8005244 <_strtol_l.isra.0+0x108>)
 800515c:	4660      	mov	r0, ip
 800515e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005162:	5da5      	ldrb	r5, [r4, r6]
 8005164:	f015 0508 	ands.w	r5, r5, #8
 8005168:	d1f8      	bne.n	800515c <_strtol_l.isra.0+0x20>
 800516a:	2c2d      	cmp	r4, #45	; 0x2d
 800516c:	d133      	bne.n	80051d6 <_strtol_l.isra.0+0x9a>
 800516e:	f04f 0801 	mov.w	r8, #1
 8005172:	f89c 4000 	ldrb.w	r4, [ip]
 8005176:	f100 0c02 	add.w	ip, r0, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d05d      	beq.n	800523a <_strtol_l.isra.0+0xfe>
 800517e:	2b10      	cmp	r3, #16
 8005180:	d10c      	bne.n	800519c <_strtol_l.isra.0+0x60>
 8005182:	2c30      	cmp	r4, #48	; 0x30
 8005184:	d10a      	bne.n	800519c <_strtol_l.isra.0+0x60>
 8005186:	f89c 0000 	ldrb.w	r0, [ip]
 800518a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800518e:	2858      	cmp	r0, #88	; 0x58
 8005190:	d14e      	bne.n	8005230 <_strtol_l.isra.0+0xf4>
 8005192:	2310      	movs	r3, #16
 8005194:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005198:	f10c 0c02 	add.w	ip, ip, #2
 800519c:	2500      	movs	r5, #0
 800519e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80051a2:	3f01      	subs	r7, #1
 80051a4:	fbb7 f9f3 	udiv	r9, r7, r3
 80051a8:	4628      	mov	r0, r5
 80051aa:	fb03 7a19 	mls	sl, r3, r9, r7
 80051ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80051b2:	2e09      	cmp	r6, #9
 80051b4:	d818      	bhi.n	80051e8 <_strtol_l.isra.0+0xac>
 80051b6:	4634      	mov	r4, r6
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	dd24      	ble.n	8005206 <_strtol_l.isra.0+0xca>
 80051bc:	2d00      	cmp	r5, #0
 80051be:	db1f      	blt.n	8005200 <_strtol_l.isra.0+0xc4>
 80051c0:	4581      	cmp	r9, r0
 80051c2:	d31d      	bcc.n	8005200 <_strtol_l.isra.0+0xc4>
 80051c4:	d101      	bne.n	80051ca <_strtol_l.isra.0+0x8e>
 80051c6:	45a2      	cmp	sl, r4
 80051c8:	db1a      	blt.n	8005200 <_strtol_l.isra.0+0xc4>
 80051ca:	2501      	movs	r5, #1
 80051cc:	fb00 4003 	mla	r0, r0, r3, r4
 80051d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80051d4:	e7eb      	b.n	80051ae <_strtol_l.isra.0+0x72>
 80051d6:	2c2b      	cmp	r4, #43	; 0x2b
 80051d8:	bf08      	it	eq
 80051da:	f89c 4000 	ldrbeq.w	r4, [ip]
 80051de:	46a8      	mov	r8, r5
 80051e0:	bf08      	it	eq
 80051e2:	f100 0c02 	addeq.w	ip, r0, #2
 80051e6:	e7c8      	b.n	800517a <_strtol_l.isra.0+0x3e>
 80051e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80051ec:	2e19      	cmp	r6, #25
 80051ee:	d801      	bhi.n	80051f4 <_strtol_l.isra.0+0xb8>
 80051f0:	3c37      	subs	r4, #55	; 0x37
 80051f2:	e7e1      	b.n	80051b8 <_strtol_l.isra.0+0x7c>
 80051f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80051f8:	2e19      	cmp	r6, #25
 80051fa:	d804      	bhi.n	8005206 <_strtol_l.isra.0+0xca>
 80051fc:	3c57      	subs	r4, #87	; 0x57
 80051fe:	e7db      	b.n	80051b8 <_strtol_l.isra.0+0x7c>
 8005200:	f04f 35ff 	mov.w	r5, #4294967295
 8005204:	e7e4      	b.n	80051d0 <_strtol_l.isra.0+0x94>
 8005206:	2d00      	cmp	r5, #0
 8005208:	da08      	bge.n	800521c <_strtol_l.isra.0+0xe0>
 800520a:	2322      	movs	r3, #34	; 0x22
 800520c:	4638      	mov	r0, r7
 800520e:	f8ce 3000 	str.w	r3, [lr]
 8005212:	2a00      	cmp	r2, #0
 8005214:	d09e      	beq.n	8005154 <_strtol_l.isra.0+0x18>
 8005216:	f10c 31ff 	add.w	r1, ip, #4294967295
 800521a:	e007      	b.n	800522c <_strtol_l.isra.0+0xf0>
 800521c:	f1b8 0f00 	cmp.w	r8, #0
 8005220:	d000      	beq.n	8005224 <_strtol_l.isra.0+0xe8>
 8005222:	4240      	negs	r0, r0
 8005224:	2a00      	cmp	r2, #0
 8005226:	d095      	beq.n	8005154 <_strtol_l.isra.0+0x18>
 8005228:	2d00      	cmp	r5, #0
 800522a:	d1f4      	bne.n	8005216 <_strtol_l.isra.0+0xda>
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	e791      	b.n	8005154 <_strtol_l.isra.0+0x18>
 8005230:	2430      	movs	r4, #48	; 0x30
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1b2      	bne.n	800519c <_strtol_l.isra.0+0x60>
 8005236:	2308      	movs	r3, #8
 8005238:	e7b0      	b.n	800519c <_strtol_l.isra.0+0x60>
 800523a:	2c30      	cmp	r4, #48	; 0x30
 800523c:	d0a3      	beq.n	8005186 <_strtol_l.isra.0+0x4a>
 800523e:	230a      	movs	r3, #10
 8005240:	e7ac      	b.n	800519c <_strtol_l.isra.0+0x60>
 8005242:	bf00      	nop
 8005244:	08006f4c 	.word	0x08006f4c

08005248 <strtol>:
 8005248:	4613      	mov	r3, r2
 800524a:	460a      	mov	r2, r1
 800524c:	4601      	mov	r1, r0
 800524e:	4802      	ldr	r0, [pc, #8]	; (8005258 <strtol+0x10>)
 8005250:	6800      	ldr	r0, [r0, #0]
 8005252:	f7ff bf73 	b.w	800513c <_strtol_l.isra.0>
 8005256:	bf00      	nop
 8005258:	2000002c 	.word	0x2000002c

0800525c <__swbuf_r>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	460e      	mov	r6, r1
 8005260:	4614      	mov	r4, r2
 8005262:	4605      	mov	r5, r0
 8005264:	b118      	cbz	r0, 800526e <__swbuf_r+0x12>
 8005266:	6983      	ldr	r3, [r0, #24]
 8005268:	b90b      	cbnz	r3, 800526e <__swbuf_r+0x12>
 800526a:	f000 f9d9 	bl	8005620 <__sinit>
 800526e:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <__swbuf_r+0x98>)
 8005270:	429c      	cmp	r4, r3
 8005272:	d12b      	bne.n	80052cc <__swbuf_r+0x70>
 8005274:	686c      	ldr	r4, [r5, #4]
 8005276:	69a3      	ldr	r3, [r4, #24]
 8005278:	60a3      	str	r3, [r4, #8]
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	071a      	lsls	r2, r3, #28
 800527e:	d52f      	bpl.n	80052e0 <__swbuf_r+0x84>
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	b36b      	cbz	r3, 80052e0 <__swbuf_r+0x84>
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	6820      	ldr	r0, [r4, #0]
 8005288:	b2f6      	uxtb	r6, r6
 800528a:	1ac0      	subs	r0, r0, r3
 800528c:	6963      	ldr	r3, [r4, #20]
 800528e:	4637      	mov	r7, r6
 8005290:	4283      	cmp	r3, r0
 8005292:	dc04      	bgt.n	800529e <__swbuf_r+0x42>
 8005294:	4621      	mov	r1, r4
 8005296:	4628      	mov	r0, r5
 8005298:	f000 f92e 	bl	80054f8 <_fflush_r>
 800529c:	bb30      	cbnz	r0, 80052ec <__swbuf_r+0x90>
 800529e:	68a3      	ldr	r3, [r4, #8]
 80052a0:	3001      	adds	r0, #1
 80052a2:	3b01      	subs	r3, #1
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	6022      	str	r2, [r4, #0]
 80052ac:	701e      	strb	r6, [r3, #0]
 80052ae:	6963      	ldr	r3, [r4, #20]
 80052b0:	4283      	cmp	r3, r0
 80052b2:	d004      	beq.n	80052be <__swbuf_r+0x62>
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	07db      	lsls	r3, r3, #31
 80052b8:	d506      	bpl.n	80052c8 <__swbuf_r+0x6c>
 80052ba:	2e0a      	cmp	r6, #10
 80052bc:	d104      	bne.n	80052c8 <__swbuf_r+0x6c>
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 f919 	bl	80054f8 <_fflush_r>
 80052c6:	b988      	cbnz	r0, 80052ec <__swbuf_r+0x90>
 80052c8:	4638      	mov	r0, r7
 80052ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <__swbuf_r+0x9c>)
 80052ce:	429c      	cmp	r4, r3
 80052d0:	d101      	bne.n	80052d6 <__swbuf_r+0x7a>
 80052d2:	68ac      	ldr	r4, [r5, #8]
 80052d4:	e7cf      	b.n	8005276 <__swbuf_r+0x1a>
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <__swbuf_r+0xa0>)
 80052d8:	429c      	cmp	r4, r3
 80052da:	bf08      	it	eq
 80052dc:	68ec      	ldreq	r4, [r5, #12]
 80052de:	e7ca      	b.n	8005276 <__swbuf_r+0x1a>
 80052e0:	4621      	mov	r1, r4
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 f80c 	bl	8005300 <__swsetup_r>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d0cb      	beq.n	8005284 <__swbuf_r+0x28>
 80052ec:	f04f 37ff 	mov.w	r7, #4294967295
 80052f0:	e7ea      	b.n	80052c8 <__swbuf_r+0x6c>
 80052f2:	bf00      	nop
 80052f4:	0800706c 	.word	0x0800706c
 80052f8:	0800708c 	.word	0x0800708c
 80052fc:	0800704c 	.word	0x0800704c

08005300 <__swsetup_r>:
 8005300:	4b32      	ldr	r3, [pc, #200]	; (80053cc <__swsetup_r+0xcc>)
 8005302:	b570      	push	{r4, r5, r6, lr}
 8005304:	681d      	ldr	r5, [r3, #0]
 8005306:	4606      	mov	r6, r0
 8005308:	460c      	mov	r4, r1
 800530a:	b125      	cbz	r5, 8005316 <__swsetup_r+0x16>
 800530c:	69ab      	ldr	r3, [r5, #24]
 800530e:	b913      	cbnz	r3, 8005316 <__swsetup_r+0x16>
 8005310:	4628      	mov	r0, r5
 8005312:	f000 f985 	bl	8005620 <__sinit>
 8005316:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <__swsetup_r+0xd0>)
 8005318:	429c      	cmp	r4, r3
 800531a:	d10f      	bne.n	800533c <__swsetup_r+0x3c>
 800531c:	686c      	ldr	r4, [r5, #4]
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005324:	0719      	lsls	r1, r3, #28
 8005326:	d42c      	bmi.n	8005382 <__swsetup_r+0x82>
 8005328:	06dd      	lsls	r5, r3, #27
 800532a:	d411      	bmi.n	8005350 <__swsetup_r+0x50>
 800532c:	2309      	movs	r3, #9
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	e03e      	b.n	80053ba <__swsetup_r+0xba>
 800533c:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <__swsetup_r+0xd4>)
 800533e:	429c      	cmp	r4, r3
 8005340:	d101      	bne.n	8005346 <__swsetup_r+0x46>
 8005342:	68ac      	ldr	r4, [r5, #8]
 8005344:	e7eb      	b.n	800531e <__swsetup_r+0x1e>
 8005346:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <__swsetup_r+0xd8>)
 8005348:	429c      	cmp	r4, r3
 800534a:	bf08      	it	eq
 800534c:	68ec      	ldreq	r4, [r5, #12]
 800534e:	e7e6      	b.n	800531e <__swsetup_r+0x1e>
 8005350:	0758      	lsls	r0, r3, #29
 8005352:	d512      	bpl.n	800537a <__swsetup_r+0x7a>
 8005354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005356:	b141      	cbz	r1, 800536a <__swsetup_r+0x6a>
 8005358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <__swsetup_r+0x66>
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff f9ff 	bl	8004764 <_free_r>
 8005366:	2300      	movs	r3, #0
 8005368:	6363      	str	r3, [r4, #52]	; 0x34
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	2300      	movs	r3, #0
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	f043 0308 	orr.w	r3, r3, #8
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	6923      	ldr	r3, [r4, #16]
 8005384:	b94b      	cbnz	r3, 800539a <__swsetup_r+0x9a>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800538c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005390:	d003      	beq.n	800539a <__swsetup_r+0x9a>
 8005392:	4621      	mov	r1, r4
 8005394:	4630      	mov	r0, r6
 8005396:	f000 fa07 	bl	80057a8 <__smakebuf_r>
 800539a:	89a0      	ldrh	r0, [r4, #12]
 800539c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053a0:	f010 0301 	ands.w	r3, r0, #1
 80053a4:	d00a      	beq.n	80053bc <__swsetup_r+0xbc>
 80053a6:	2300      	movs	r3, #0
 80053a8:	60a3      	str	r3, [r4, #8]
 80053aa:	6963      	ldr	r3, [r4, #20]
 80053ac:	425b      	negs	r3, r3
 80053ae:	61a3      	str	r3, [r4, #24]
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	b943      	cbnz	r3, 80053c6 <__swsetup_r+0xc6>
 80053b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053b8:	d1ba      	bne.n	8005330 <__swsetup_r+0x30>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	0781      	lsls	r1, r0, #30
 80053be:	bf58      	it	pl
 80053c0:	6963      	ldrpl	r3, [r4, #20]
 80053c2:	60a3      	str	r3, [r4, #8]
 80053c4:	e7f4      	b.n	80053b0 <__swsetup_r+0xb0>
 80053c6:	2000      	movs	r0, #0
 80053c8:	e7f7      	b.n	80053ba <__swsetup_r+0xba>
 80053ca:	bf00      	nop
 80053cc:	2000002c 	.word	0x2000002c
 80053d0:	0800706c 	.word	0x0800706c
 80053d4:	0800708c 	.word	0x0800708c
 80053d8:	0800704c 	.word	0x0800704c

080053dc <abort>:
 80053dc:	2006      	movs	r0, #6
 80053de:	b508      	push	{r3, lr}
 80053e0:	f000 fc0e 	bl	8005c00 <raise>
 80053e4:	2001      	movs	r0, #1
 80053e6:	f7fd f96e 	bl	80026c6 <_exit>
	...

080053ec <__sflush_r>:
 80053ec:	898a      	ldrh	r2, [r1, #12]
 80053ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	4605      	mov	r5, r0
 80053f4:	0710      	lsls	r0, r2, #28
 80053f6:	460c      	mov	r4, r1
 80053f8:	d458      	bmi.n	80054ac <__sflush_r+0xc0>
 80053fa:	684b      	ldr	r3, [r1, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dc05      	bgt.n	800540c <__sflush_r+0x20>
 8005400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	dc02      	bgt.n	800540c <__sflush_r+0x20>
 8005406:	2000      	movs	r0, #0
 8005408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800540c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800540e:	2e00      	cmp	r6, #0
 8005410:	d0f9      	beq.n	8005406 <__sflush_r+0x1a>
 8005412:	2300      	movs	r3, #0
 8005414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005418:	682f      	ldr	r7, [r5, #0]
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	d032      	beq.n	8005484 <__sflush_r+0x98>
 800541e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	075a      	lsls	r2, r3, #29
 8005424:	d505      	bpl.n	8005432 <__sflush_r+0x46>
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	1ac0      	subs	r0, r0, r3
 800542a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800542c:	b10b      	cbz	r3, 8005432 <__sflush_r+0x46>
 800542e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005430:	1ac0      	subs	r0, r0, r3
 8005432:	2300      	movs	r3, #0
 8005434:	4602      	mov	r2, r0
 8005436:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005438:	4628      	mov	r0, r5
 800543a:	6a21      	ldr	r1, [r4, #32]
 800543c:	47b0      	blx	r6
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	d106      	bne.n	8005452 <__sflush_r+0x66>
 8005444:	6829      	ldr	r1, [r5, #0]
 8005446:	291d      	cmp	r1, #29
 8005448:	d82c      	bhi.n	80054a4 <__sflush_r+0xb8>
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <__sflush_r+0x108>)
 800544c:	40ca      	lsrs	r2, r1
 800544e:	07d6      	lsls	r6, r2, #31
 8005450:	d528      	bpl.n	80054a4 <__sflush_r+0xb8>
 8005452:	2200      	movs	r2, #0
 8005454:	6062      	str	r2, [r4, #4]
 8005456:	6922      	ldr	r2, [r4, #16]
 8005458:	04d9      	lsls	r1, r3, #19
 800545a:	6022      	str	r2, [r4, #0]
 800545c:	d504      	bpl.n	8005468 <__sflush_r+0x7c>
 800545e:	1c42      	adds	r2, r0, #1
 8005460:	d101      	bne.n	8005466 <__sflush_r+0x7a>
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	b903      	cbnz	r3, 8005468 <__sflush_r+0x7c>
 8005466:	6560      	str	r0, [r4, #84]	; 0x54
 8005468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800546a:	602f      	str	r7, [r5, #0]
 800546c:	2900      	cmp	r1, #0
 800546e:	d0ca      	beq.n	8005406 <__sflush_r+0x1a>
 8005470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005474:	4299      	cmp	r1, r3
 8005476:	d002      	beq.n	800547e <__sflush_r+0x92>
 8005478:	4628      	mov	r0, r5
 800547a:	f7ff f973 	bl	8004764 <_free_r>
 800547e:	2000      	movs	r0, #0
 8005480:	6360      	str	r0, [r4, #52]	; 0x34
 8005482:	e7c1      	b.n	8005408 <__sflush_r+0x1c>
 8005484:	6a21      	ldr	r1, [r4, #32]
 8005486:	2301      	movs	r3, #1
 8005488:	4628      	mov	r0, r5
 800548a:	47b0      	blx	r6
 800548c:	1c41      	adds	r1, r0, #1
 800548e:	d1c7      	bne.n	8005420 <__sflush_r+0x34>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0c4      	beq.n	8005420 <__sflush_r+0x34>
 8005496:	2b1d      	cmp	r3, #29
 8005498:	d001      	beq.n	800549e <__sflush_r+0xb2>
 800549a:	2b16      	cmp	r3, #22
 800549c:	d101      	bne.n	80054a2 <__sflush_r+0xb6>
 800549e:	602f      	str	r7, [r5, #0]
 80054a0:	e7b1      	b.n	8005406 <__sflush_r+0x1a>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	e7ad      	b.n	8005408 <__sflush_r+0x1c>
 80054ac:	690f      	ldr	r7, [r1, #16]
 80054ae:	2f00      	cmp	r7, #0
 80054b0:	d0a9      	beq.n	8005406 <__sflush_r+0x1a>
 80054b2:	0793      	lsls	r3, r2, #30
 80054b4:	bf18      	it	ne
 80054b6:	2300      	movne	r3, #0
 80054b8:	680e      	ldr	r6, [r1, #0]
 80054ba:	bf08      	it	eq
 80054bc:	694b      	ldreq	r3, [r1, #20]
 80054be:	eba6 0807 	sub.w	r8, r6, r7
 80054c2:	600f      	str	r7, [r1, #0]
 80054c4:	608b      	str	r3, [r1, #8]
 80054c6:	f1b8 0f00 	cmp.w	r8, #0
 80054ca:	dd9c      	ble.n	8005406 <__sflush_r+0x1a>
 80054cc:	4643      	mov	r3, r8
 80054ce:	463a      	mov	r2, r7
 80054d0:	4628      	mov	r0, r5
 80054d2:	6a21      	ldr	r1, [r4, #32]
 80054d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054d6:	47b0      	blx	r6
 80054d8:	2800      	cmp	r0, #0
 80054da:	dc06      	bgt.n	80054ea <__sflush_r+0xfe>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	f04f 30ff 	mov.w	r0, #4294967295
 80054e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e6:	81a3      	strh	r3, [r4, #12]
 80054e8:	e78e      	b.n	8005408 <__sflush_r+0x1c>
 80054ea:	4407      	add	r7, r0
 80054ec:	eba8 0800 	sub.w	r8, r8, r0
 80054f0:	e7e9      	b.n	80054c6 <__sflush_r+0xda>
 80054f2:	bf00      	nop
 80054f4:	20400001 	.word	0x20400001

080054f8 <_fflush_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	690b      	ldr	r3, [r1, #16]
 80054fc:	4605      	mov	r5, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	b913      	cbnz	r3, 8005508 <_fflush_r+0x10>
 8005502:	2500      	movs	r5, #0
 8005504:	4628      	mov	r0, r5
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	b118      	cbz	r0, 8005512 <_fflush_r+0x1a>
 800550a:	6983      	ldr	r3, [r0, #24]
 800550c:	b90b      	cbnz	r3, 8005512 <_fflush_r+0x1a>
 800550e:	f000 f887 	bl	8005620 <__sinit>
 8005512:	4b14      	ldr	r3, [pc, #80]	; (8005564 <_fflush_r+0x6c>)
 8005514:	429c      	cmp	r4, r3
 8005516:	d11b      	bne.n	8005550 <_fflush_r+0x58>
 8005518:	686c      	ldr	r4, [r5, #4]
 800551a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0ef      	beq.n	8005502 <_fflush_r+0xa>
 8005522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005524:	07d0      	lsls	r0, r2, #31
 8005526:	d404      	bmi.n	8005532 <_fflush_r+0x3a>
 8005528:	0599      	lsls	r1, r3, #22
 800552a:	d402      	bmi.n	8005532 <_fflush_r+0x3a>
 800552c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800552e:	f000 f915 	bl	800575c <__retarget_lock_acquire_recursive>
 8005532:	4628      	mov	r0, r5
 8005534:	4621      	mov	r1, r4
 8005536:	f7ff ff59 	bl	80053ec <__sflush_r>
 800553a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800553c:	4605      	mov	r5, r0
 800553e:	07da      	lsls	r2, r3, #31
 8005540:	d4e0      	bmi.n	8005504 <_fflush_r+0xc>
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	059b      	lsls	r3, r3, #22
 8005546:	d4dd      	bmi.n	8005504 <_fflush_r+0xc>
 8005548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800554a:	f000 f908 	bl	800575e <__retarget_lock_release_recursive>
 800554e:	e7d9      	b.n	8005504 <_fflush_r+0xc>
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <_fflush_r+0x70>)
 8005552:	429c      	cmp	r4, r3
 8005554:	d101      	bne.n	800555a <_fflush_r+0x62>
 8005556:	68ac      	ldr	r4, [r5, #8]
 8005558:	e7df      	b.n	800551a <_fflush_r+0x22>
 800555a:	4b04      	ldr	r3, [pc, #16]	; (800556c <_fflush_r+0x74>)
 800555c:	429c      	cmp	r4, r3
 800555e:	bf08      	it	eq
 8005560:	68ec      	ldreq	r4, [r5, #12]
 8005562:	e7da      	b.n	800551a <_fflush_r+0x22>
 8005564:	0800706c 	.word	0x0800706c
 8005568:	0800708c 	.word	0x0800708c
 800556c:	0800704c 	.word	0x0800704c

08005570 <std>:
 8005570:	2300      	movs	r3, #0
 8005572:	b510      	push	{r4, lr}
 8005574:	4604      	mov	r4, r0
 8005576:	e9c0 3300 	strd	r3, r3, [r0]
 800557a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800557e:	6083      	str	r3, [r0, #8]
 8005580:	8181      	strh	r1, [r0, #12]
 8005582:	6643      	str	r3, [r0, #100]	; 0x64
 8005584:	81c2      	strh	r2, [r0, #14]
 8005586:	6183      	str	r3, [r0, #24]
 8005588:	4619      	mov	r1, r3
 800558a:	2208      	movs	r2, #8
 800558c:	305c      	adds	r0, #92	; 0x5c
 800558e:	f7ff f8e1 	bl	8004754 <memset>
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <std+0x38>)
 8005594:	6224      	str	r4, [r4, #32]
 8005596:	6263      	str	r3, [r4, #36]	; 0x24
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <std+0x3c>)
 800559a:	62a3      	str	r3, [r4, #40]	; 0x28
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <std+0x40>)
 800559e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <std+0x44>)
 80055a2:	6323      	str	r3, [r4, #48]	; 0x30
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	bf00      	nop
 80055a8:	08005c39 	.word	0x08005c39
 80055ac:	08005c5b 	.word	0x08005c5b
 80055b0:	08005c93 	.word	0x08005c93
 80055b4:	08005cb7 	.word	0x08005cb7

080055b8 <_cleanup_r>:
 80055b8:	4901      	ldr	r1, [pc, #4]	; (80055c0 <_cleanup_r+0x8>)
 80055ba:	f000 b8af 	b.w	800571c <_fwalk_reent>
 80055be:	bf00      	nop
 80055c0:	080054f9 	.word	0x080054f9

080055c4 <__sfmoreglue>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	2568      	movs	r5, #104	; 0x68
 80055c8:	1e4a      	subs	r2, r1, #1
 80055ca:	4355      	muls	r5, r2
 80055cc:	460e      	mov	r6, r1
 80055ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055d2:	f7ff f913 	bl	80047fc <_malloc_r>
 80055d6:	4604      	mov	r4, r0
 80055d8:	b140      	cbz	r0, 80055ec <__sfmoreglue+0x28>
 80055da:	2100      	movs	r1, #0
 80055dc:	e9c0 1600 	strd	r1, r6, [r0]
 80055e0:	300c      	adds	r0, #12
 80055e2:	60a0      	str	r0, [r4, #8]
 80055e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055e8:	f7ff f8b4 	bl	8004754 <memset>
 80055ec:	4620      	mov	r0, r4
 80055ee:	bd70      	pop	{r4, r5, r6, pc}

080055f0 <__sfp_lock_acquire>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__sfp_lock_acquire+0x8>)
 80055f2:	f000 b8b3 	b.w	800575c <__retarget_lock_acquire_recursive>
 80055f6:	bf00      	nop
 80055f8:	20000254 	.word	0x20000254

080055fc <__sfp_lock_release>:
 80055fc:	4801      	ldr	r0, [pc, #4]	; (8005604 <__sfp_lock_release+0x8>)
 80055fe:	f000 b8ae 	b.w	800575e <__retarget_lock_release_recursive>
 8005602:	bf00      	nop
 8005604:	20000254 	.word	0x20000254

08005608 <__sinit_lock_acquire>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__sinit_lock_acquire+0x8>)
 800560a:	f000 b8a7 	b.w	800575c <__retarget_lock_acquire_recursive>
 800560e:	bf00      	nop
 8005610:	2000024f 	.word	0x2000024f

08005614 <__sinit_lock_release>:
 8005614:	4801      	ldr	r0, [pc, #4]	; (800561c <__sinit_lock_release+0x8>)
 8005616:	f000 b8a2 	b.w	800575e <__retarget_lock_release_recursive>
 800561a:	bf00      	nop
 800561c:	2000024f 	.word	0x2000024f

08005620 <__sinit>:
 8005620:	b510      	push	{r4, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	f7ff fff0 	bl	8005608 <__sinit_lock_acquire>
 8005628:	69a3      	ldr	r3, [r4, #24]
 800562a:	b11b      	cbz	r3, 8005634 <__sinit+0x14>
 800562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005630:	f7ff bff0 	b.w	8005614 <__sinit_lock_release>
 8005634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005638:	6523      	str	r3, [r4, #80]	; 0x50
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <__sinit+0x68>)
 800563c:	4a13      	ldr	r2, [pc, #76]	; (800568c <__sinit+0x6c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	62a2      	str	r2, [r4, #40]	; 0x28
 8005642:	42a3      	cmp	r3, r4
 8005644:	bf08      	it	eq
 8005646:	2301      	moveq	r3, #1
 8005648:	4620      	mov	r0, r4
 800564a:	bf08      	it	eq
 800564c:	61a3      	streq	r3, [r4, #24]
 800564e:	f000 f81f 	bl	8005690 <__sfp>
 8005652:	6060      	str	r0, [r4, #4]
 8005654:	4620      	mov	r0, r4
 8005656:	f000 f81b 	bl	8005690 <__sfp>
 800565a:	60a0      	str	r0, [r4, #8]
 800565c:	4620      	mov	r0, r4
 800565e:	f000 f817 	bl	8005690 <__sfp>
 8005662:	2200      	movs	r2, #0
 8005664:	2104      	movs	r1, #4
 8005666:	60e0      	str	r0, [r4, #12]
 8005668:	6860      	ldr	r0, [r4, #4]
 800566a:	f7ff ff81 	bl	8005570 <std>
 800566e:	2201      	movs	r2, #1
 8005670:	2109      	movs	r1, #9
 8005672:	68a0      	ldr	r0, [r4, #8]
 8005674:	f7ff ff7c 	bl	8005570 <std>
 8005678:	2202      	movs	r2, #2
 800567a:	2112      	movs	r1, #18
 800567c:	68e0      	ldr	r0, [r4, #12]
 800567e:	f7ff ff77 	bl	8005570 <std>
 8005682:	2301      	movs	r3, #1
 8005684:	61a3      	str	r3, [r4, #24]
 8005686:	e7d1      	b.n	800562c <__sinit+0xc>
 8005688:	08006e9c 	.word	0x08006e9c
 800568c:	080055b9 	.word	0x080055b9

08005690 <__sfp>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	4607      	mov	r7, r0
 8005694:	f7ff ffac 	bl	80055f0 <__sfp_lock_acquire>
 8005698:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <__sfp+0x84>)
 800569a:	681e      	ldr	r6, [r3, #0]
 800569c:	69b3      	ldr	r3, [r6, #24]
 800569e:	b913      	cbnz	r3, 80056a6 <__sfp+0x16>
 80056a0:	4630      	mov	r0, r6
 80056a2:	f7ff ffbd 	bl	8005620 <__sinit>
 80056a6:	3648      	adds	r6, #72	; 0x48
 80056a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	d503      	bpl.n	80056b8 <__sfp+0x28>
 80056b0:	6833      	ldr	r3, [r6, #0]
 80056b2:	b30b      	cbz	r3, 80056f8 <__sfp+0x68>
 80056b4:	6836      	ldr	r6, [r6, #0]
 80056b6:	e7f7      	b.n	80056a8 <__sfp+0x18>
 80056b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056bc:	b9d5      	cbnz	r5, 80056f4 <__sfp+0x64>
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <__sfp+0x88>)
 80056c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056c4:	60e3      	str	r3, [r4, #12]
 80056c6:	6665      	str	r5, [r4, #100]	; 0x64
 80056c8:	f000 f847 	bl	800575a <__retarget_lock_init_recursive>
 80056cc:	f7ff ff96 	bl	80055fc <__sfp_lock_release>
 80056d0:	2208      	movs	r2, #8
 80056d2:	4629      	mov	r1, r5
 80056d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056dc:	6025      	str	r5, [r4, #0]
 80056de:	61a5      	str	r5, [r4, #24]
 80056e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056e4:	f7ff f836 	bl	8004754 <memset>
 80056e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056f0:	4620      	mov	r0, r4
 80056f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f4:	3468      	adds	r4, #104	; 0x68
 80056f6:	e7d9      	b.n	80056ac <__sfp+0x1c>
 80056f8:	2104      	movs	r1, #4
 80056fa:	4638      	mov	r0, r7
 80056fc:	f7ff ff62 	bl	80055c4 <__sfmoreglue>
 8005700:	4604      	mov	r4, r0
 8005702:	6030      	str	r0, [r6, #0]
 8005704:	2800      	cmp	r0, #0
 8005706:	d1d5      	bne.n	80056b4 <__sfp+0x24>
 8005708:	f7ff ff78 	bl	80055fc <__sfp_lock_release>
 800570c:	230c      	movs	r3, #12
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	e7ee      	b.n	80056f0 <__sfp+0x60>
 8005712:	bf00      	nop
 8005714:	08006e9c 	.word	0x08006e9c
 8005718:	ffff0001 	.word	0xffff0001

0800571c <_fwalk_reent>:
 800571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005720:	4606      	mov	r6, r0
 8005722:	4688      	mov	r8, r1
 8005724:	2700      	movs	r7, #0
 8005726:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800572a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800572e:	f1b9 0901 	subs.w	r9, r9, #1
 8005732:	d505      	bpl.n	8005740 <_fwalk_reent+0x24>
 8005734:	6824      	ldr	r4, [r4, #0]
 8005736:	2c00      	cmp	r4, #0
 8005738:	d1f7      	bne.n	800572a <_fwalk_reent+0xe>
 800573a:	4638      	mov	r0, r7
 800573c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005740:	89ab      	ldrh	r3, [r5, #12]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d907      	bls.n	8005756 <_fwalk_reent+0x3a>
 8005746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800574a:	3301      	adds	r3, #1
 800574c:	d003      	beq.n	8005756 <_fwalk_reent+0x3a>
 800574e:	4629      	mov	r1, r5
 8005750:	4630      	mov	r0, r6
 8005752:	47c0      	blx	r8
 8005754:	4307      	orrs	r7, r0
 8005756:	3568      	adds	r5, #104	; 0x68
 8005758:	e7e9      	b.n	800572e <_fwalk_reent+0x12>

0800575a <__retarget_lock_init_recursive>:
 800575a:	4770      	bx	lr

0800575c <__retarget_lock_acquire_recursive>:
 800575c:	4770      	bx	lr

0800575e <__retarget_lock_release_recursive>:
 800575e:	4770      	bx	lr

08005760 <__swhatbuf_r>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	460e      	mov	r6, r1
 8005764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005768:	4614      	mov	r4, r2
 800576a:	2900      	cmp	r1, #0
 800576c:	461d      	mov	r5, r3
 800576e:	b096      	sub	sp, #88	; 0x58
 8005770:	da07      	bge.n	8005782 <__swhatbuf_r+0x22>
 8005772:	2300      	movs	r3, #0
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	89b3      	ldrh	r3, [r6, #12]
 8005778:	061a      	lsls	r2, r3, #24
 800577a:	d410      	bmi.n	800579e <__swhatbuf_r+0x3e>
 800577c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005780:	e00e      	b.n	80057a0 <__swhatbuf_r+0x40>
 8005782:	466a      	mov	r2, sp
 8005784:	f000 faca 	bl	8005d1c <_fstat_r>
 8005788:	2800      	cmp	r0, #0
 800578a:	dbf2      	blt.n	8005772 <__swhatbuf_r+0x12>
 800578c:	9a01      	ldr	r2, [sp, #4]
 800578e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005796:	425a      	negs	r2, r3
 8005798:	415a      	adcs	r2, r3
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	e7ee      	b.n	800577c <__swhatbuf_r+0x1c>
 800579e:	2340      	movs	r3, #64	; 0x40
 80057a0:	2000      	movs	r0, #0
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	b016      	add	sp, #88	; 0x58
 80057a6:	bd70      	pop	{r4, r5, r6, pc}

080057a8 <__smakebuf_r>:
 80057a8:	898b      	ldrh	r3, [r1, #12]
 80057aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057ac:	079d      	lsls	r5, r3, #30
 80057ae:	4606      	mov	r6, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	d507      	bpl.n	80057c4 <__smakebuf_r+0x1c>
 80057b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	2301      	movs	r3, #1
 80057be:	6163      	str	r3, [r4, #20]
 80057c0:	b002      	add	sp, #8
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
 80057c4:	466a      	mov	r2, sp
 80057c6:	ab01      	add	r3, sp, #4
 80057c8:	f7ff ffca 	bl	8005760 <__swhatbuf_r>
 80057cc:	9900      	ldr	r1, [sp, #0]
 80057ce:	4605      	mov	r5, r0
 80057d0:	4630      	mov	r0, r6
 80057d2:	f7ff f813 	bl	80047fc <_malloc_r>
 80057d6:	b948      	cbnz	r0, 80057ec <__smakebuf_r+0x44>
 80057d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057dc:	059a      	lsls	r2, r3, #22
 80057de:	d4ef      	bmi.n	80057c0 <__smakebuf_r+0x18>
 80057e0:	f023 0303 	bic.w	r3, r3, #3
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	e7e3      	b.n	80057b4 <__smakebuf_r+0xc>
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <__smakebuf_r+0x7c>)
 80057ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	6020      	str	r0, [r4, #0]
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	9b00      	ldr	r3, [sp, #0]
 80057fc:	6120      	str	r0, [r4, #16]
 80057fe:	6163      	str	r3, [r4, #20]
 8005800:	9b01      	ldr	r3, [sp, #4]
 8005802:	b15b      	cbz	r3, 800581c <__smakebuf_r+0x74>
 8005804:	4630      	mov	r0, r6
 8005806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800580a:	f000 fa99 	bl	8005d40 <_isatty_r>
 800580e:	b128      	cbz	r0, 800581c <__smakebuf_r+0x74>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	89a0      	ldrh	r0, [r4, #12]
 800581e:	4305      	orrs	r5, r0
 8005820:	81a5      	strh	r5, [r4, #12]
 8005822:	e7cd      	b.n	80057c0 <__smakebuf_r+0x18>
 8005824:	080055b9 	.word	0x080055b9

08005828 <memchr>:
 8005828:	4603      	mov	r3, r0
 800582a:	b510      	push	{r4, lr}
 800582c:	b2c9      	uxtb	r1, r1
 800582e:	4402      	add	r2, r0
 8005830:	4293      	cmp	r3, r2
 8005832:	4618      	mov	r0, r3
 8005834:	d101      	bne.n	800583a <memchr+0x12>
 8005836:	2000      	movs	r0, #0
 8005838:	e003      	b.n	8005842 <memchr+0x1a>
 800583a:	7804      	ldrb	r4, [r0, #0]
 800583c:	3301      	adds	r3, #1
 800583e:	428c      	cmp	r4, r1
 8005840:	d1f6      	bne.n	8005830 <memchr+0x8>
 8005842:	bd10      	pop	{r4, pc}

08005844 <memcpy>:
 8005844:	440a      	add	r2, r1
 8005846:	4291      	cmp	r1, r2
 8005848:	f100 33ff 	add.w	r3, r0, #4294967295
 800584c:	d100      	bne.n	8005850 <memcpy+0xc>
 800584e:	4770      	bx	lr
 8005850:	b510      	push	{r4, lr}
 8005852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005856:	4291      	cmp	r1, r2
 8005858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800585c:	d1f9      	bne.n	8005852 <memcpy+0xe>
 800585e:	bd10      	pop	{r4, pc}

08005860 <memmove>:
 8005860:	4288      	cmp	r0, r1
 8005862:	b510      	push	{r4, lr}
 8005864:	eb01 0402 	add.w	r4, r1, r2
 8005868:	d902      	bls.n	8005870 <memmove+0x10>
 800586a:	4284      	cmp	r4, r0
 800586c:	4623      	mov	r3, r4
 800586e:	d807      	bhi.n	8005880 <memmove+0x20>
 8005870:	1e43      	subs	r3, r0, #1
 8005872:	42a1      	cmp	r1, r4
 8005874:	d008      	beq.n	8005888 <memmove+0x28>
 8005876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800587a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800587e:	e7f8      	b.n	8005872 <memmove+0x12>
 8005880:	4601      	mov	r1, r0
 8005882:	4402      	add	r2, r0
 8005884:	428a      	cmp	r2, r1
 8005886:	d100      	bne.n	800588a <memmove+0x2a>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800588e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005892:	e7f7      	b.n	8005884 <memmove+0x24>

08005894 <__malloc_lock>:
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <__malloc_lock+0x8>)
 8005896:	f7ff bf61 	b.w	800575c <__retarget_lock_acquire_recursive>
 800589a:	bf00      	nop
 800589c:	20000250 	.word	0x20000250

080058a0 <__malloc_unlock>:
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <__malloc_unlock+0x8>)
 80058a2:	f7ff bf5c 	b.w	800575e <__retarget_lock_release_recursive>
 80058a6:	bf00      	nop
 80058a8:	20000250 	.word	0x20000250

080058ac <_realloc_r>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	4607      	mov	r7, r0
 80058b0:	4614      	mov	r4, r2
 80058b2:	460e      	mov	r6, r1
 80058b4:	b921      	cbnz	r1, 80058c0 <_realloc_r+0x14>
 80058b6:	4611      	mov	r1, r2
 80058b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058bc:	f7fe bf9e 	b.w	80047fc <_malloc_r>
 80058c0:	b922      	cbnz	r2, 80058cc <_realloc_r+0x20>
 80058c2:	f7fe ff4f 	bl	8004764 <_free_r>
 80058c6:	4625      	mov	r5, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058cc:	f000 fa5a 	bl	8005d84 <_malloc_usable_size_r>
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d20f      	bcs.n	80058f4 <_realloc_r+0x48>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4638      	mov	r0, r7
 80058d8:	f7fe ff90 	bl	80047fc <_malloc_r>
 80058dc:	4605      	mov	r5, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0f2      	beq.n	80058c8 <_realloc_r+0x1c>
 80058e2:	4631      	mov	r1, r6
 80058e4:	4622      	mov	r2, r4
 80058e6:	f7ff ffad 	bl	8005844 <memcpy>
 80058ea:	4631      	mov	r1, r6
 80058ec:	4638      	mov	r0, r7
 80058ee:	f7fe ff39 	bl	8004764 <_free_r>
 80058f2:	e7e9      	b.n	80058c8 <_realloc_r+0x1c>
 80058f4:	4635      	mov	r5, r6
 80058f6:	e7e7      	b.n	80058c8 <_realloc_r+0x1c>

080058f8 <__ssputs_r>:
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	688e      	ldr	r6, [r1, #8]
 80058fe:	4682      	mov	sl, r0
 8005900:	429e      	cmp	r6, r3
 8005902:	460c      	mov	r4, r1
 8005904:	4690      	mov	r8, r2
 8005906:	461f      	mov	r7, r3
 8005908:	d838      	bhi.n	800597c <__ssputs_r+0x84>
 800590a:	898a      	ldrh	r2, [r1, #12]
 800590c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005910:	d032      	beq.n	8005978 <__ssputs_r+0x80>
 8005912:	6825      	ldr	r5, [r4, #0]
 8005914:	6909      	ldr	r1, [r1, #16]
 8005916:	3301      	adds	r3, #1
 8005918:	eba5 0901 	sub.w	r9, r5, r1
 800591c:	6965      	ldr	r5, [r4, #20]
 800591e:	444b      	add	r3, r9
 8005920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005928:	106d      	asrs	r5, r5, #1
 800592a:	429d      	cmp	r5, r3
 800592c:	bf38      	it	cc
 800592e:	461d      	movcc	r5, r3
 8005930:	0553      	lsls	r3, r2, #21
 8005932:	d531      	bpl.n	8005998 <__ssputs_r+0xa0>
 8005934:	4629      	mov	r1, r5
 8005936:	f7fe ff61 	bl	80047fc <_malloc_r>
 800593a:	4606      	mov	r6, r0
 800593c:	b950      	cbnz	r0, 8005954 <__ssputs_r+0x5c>
 800593e:	230c      	movs	r3, #12
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	f8ca 3000 	str.w	r3, [sl]
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	464a      	mov	r2, r9
 8005956:	6921      	ldr	r1, [r4, #16]
 8005958:	f7ff ff74 	bl	8005844 <memcpy>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	6126      	str	r6, [r4, #16]
 800596a:	444e      	add	r6, r9
 800596c:	6026      	str	r6, [r4, #0]
 800596e:	463e      	mov	r6, r7
 8005970:	6165      	str	r5, [r4, #20]
 8005972:	eba5 0509 	sub.w	r5, r5, r9
 8005976:	60a5      	str	r5, [r4, #8]
 8005978:	42be      	cmp	r6, r7
 800597a:	d900      	bls.n	800597e <__ssputs_r+0x86>
 800597c:	463e      	mov	r6, r7
 800597e:	4632      	mov	r2, r6
 8005980:	4641      	mov	r1, r8
 8005982:	6820      	ldr	r0, [r4, #0]
 8005984:	f7ff ff6c 	bl	8005860 <memmove>
 8005988:	68a3      	ldr	r3, [r4, #8]
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	1b9b      	subs	r3, r3, r6
 800598e:	4432      	add	r2, r6
 8005990:	2000      	movs	r0, #0
 8005992:	60a3      	str	r3, [r4, #8]
 8005994:	6022      	str	r2, [r4, #0]
 8005996:	e7db      	b.n	8005950 <__ssputs_r+0x58>
 8005998:	462a      	mov	r2, r5
 800599a:	f7ff ff87 	bl	80058ac <_realloc_r>
 800599e:	4606      	mov	r6, r0
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d1e1      	bne.n	8005968 <__ssputs_r+0x70>
 80059a4:	4650      	mov	r0, sl
 80059a6:	6921      	ldr	r1, [r4, #16]
 80059a8:	f7fe fedc 	bl	8004764 <_free_r>
 80059ac:	e7c7      	b.n	800593e <__ssputs_r+0x46>
	...

080059b0 <_svfiprintf_r>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	4698      	mov	r8, r3
 80059b6:	898b      	ldrh	r3, [r1, #12]
 80059b8:	4607      	mov	r7, r0
 80059ba:	061b      	lsls	r3, r3, #24
 80059bc:	460d      	mov	r5, r1
 80059be:	4614      	mov	r4, r2
 80059c0:	b09d      	sub	sp, #116	; 0x74
 80059c2:	d50e      	bpl.n	80059e2 <_svfiprintf_r+0x32>
 80059c4:	690b      	ldr	r3, [r1, #16]
 80059c6:	b963      	cbnz	r3, 80059e2 <_svfiprintf_r+0x32>
 80059c8:	2140      	movs	r1, #64	; 0x40
 80059ca:	f7fe ff17 	bl	80047fc <_malloc_r>
 80059ce:	6028      	str	r0, [r5, #0]
 80059d0:	6128      	str	r0, [r5, #16]
 80059d2:	b920      	cbnz	r0, 80059de <_svfiprintf_r+0x2e>
 80059d4:	230c      	movs	r3, #12
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	e0d1      	b.n	8005b82 <_svfiprintf_r+0x1d2>
 80059de:	2340      	movs	r3, #64	; 0x40
 80059e0:	616b      	str	r3, [r5, #20]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	2320      	movs	r3, #32
 80059e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ec:	2330      	movs	r3, #48	; 0x30
 80059ee:	f04f 0901 	mov.w	r9, #1
 80059f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b9c <_svfiprintf_r+0x1ec>
 80059fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059fe:	4623      	mov	r3, r4
 8005a00:	469a      	mov	sl, r3
 8005a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a06:	b10a      	cbz	r2, 8005a0c <_svfiprintf_r+0x5c>
 8005a08:	2a25      	cmp	r2, #37	; 0x25
 8005a0a:	d1f9      	bne.n	8005a00 <_svfiprintf_r+0x50>
 8005a0c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a10:	d00b      	beq.n	8005a2a <_svfiprintf_r+0x7a>
 8005a12:	465b      	mov	r3, fp
 8005a14:	4622      	mov	r2, r4
 8005a16:	4629      	mov	r1, r5
 8005a18:	4638      	mov	r0, r7
 8005a1a:	f7ff ff6d 	bl	80058f8 <__ssputs_r>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	f000 80aa 	beq.w	8005b78 <_svfiprintf_r+0x1c8>
 8005a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a26:	445a      	add	r2, fp
 8005a28:	9209      	str	r2, [sp, #36]	; 0x24
 8005a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80a2 	beq.w	8005b78 <_svfiprintf_r+0x1c8>
 8005a34:	2300      	movs	r3, #0
 8005a36:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a3e:	f10a 0a01 	add.w	sl, sl, #1
 8005a42:	9304      	str	r3, [sp, #16]
 8005a44:	9307      	str	r3, [sp, #28]
 8005a46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a4c:	4654      	mov	r4, sl
 8005a4e:	2205      	movs	r2, #5
 8005a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a54:	4851      	ldr	r0, [pc, #324]	; (8005b9c <_svfiprintf_r+0x1ec>)
 8005a56:	f7ff fee7 	bl	8005828 <memchr>
 8005a5a:	9a04      	ldr	r2, [sp, #16]
 8005a5c:	b9d8      	cbnz	r0, 8005a96 <_svfiprintf_r+0xe6>
 8005a5e:	06d0      	lsls	r0, r2, #27
 8005a60:	bf44      	itt	mi
 8005a62:	2320      	movmi	r3, #32
 8005a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a68:	0711      	lsls	r1, r2, #28
 8005a6a:	bf44      	itt	mi
 8005a6c:	232b      	movmi	r3, #43	; 0x2b
 8005a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a72:	f89a 3000 	ldrb.w	r3, [sl]
 8005a76:	2b2a      	cmp	r3, #42	; 0x2a
 8005a78:	d015      	beq.n	8005aa6 <_svfiprintf_r+0xf6>
 8005a7a:	4654      	mov	r4, sl
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f04f 0c0a 	mov.w	ip, #10
 8005a82:	9a07      	ldr	r2, [sp, #28]
 8005a84:	4621      	mov	r1, r4
 8005a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a8a:	3b30      	subs	r3, #48	; 0x30
 8005a8c:	2b09      	cmp	r3, #9
 8005a8e:	d94e      	bls.n	8005b2e <_svfiprintf_r+0x17e>
 8005a90:	b1b0      	cbz	r0, 8005ac0 <_svfiprintf_r+0x110>
 8005a92:	9207      	str	r2, [sp, #28]
 8005a94:	e014      	b.n	8005ac0 <_svfiprintf_r+0x110>
 8005a96:	eba0 0308 	sub.w	r3, r0, r8
 8005a9a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	46a2      	mov	sl, r4
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	e7d2      	b.n	8005a4c <_svfiprintf_r+0x9c>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	1d19      	adds	r1, r3, #4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	9103      	str	r1, [sp, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bfbb      	ittet	lt
 8005ab2:	425b      	neglt	r3, r3
 8005ab4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ab8:	9307      	strge	r3, [sp, #28]
 8005aba:	9307      	strlt	r3, [sp, #28]
 8005abc:	bfb8      	it	lt
 8005abe:	9204      	strlt	r2, [sp, #16]
 8005ac0:	7823      	ldrb	r3, [r4, #0]
 8005ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac4:	d10c      	bne.n	8005ae0 <_svfiprintf_r+0x130>
 8005ac6:	7863      	ldrb	r3, [r4, #1]
 8005ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aca:	d135      	bne.n	8005b38 <_svfiprintf_r+0x188>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	3402      	adds	r4, #2
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	9203      	str	r2, [sp, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfb8      	it	lt
 8005ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ade:	9305      	str	r3, [sp, #20]
 8005ae0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bac <_svfiprintf_r+0x1fc>
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	7821      	ldrb	r1, [r4, #0]
 8005aea:	f7ff fe9d 	bl	8005828 <memchr>
 8005aee:	b140      	cbz	r0, 8005b02 <_svfiprintf_r+0x152>
 8005af0:	2340      	movs	r3, #64	; 0x40
 8005af2:	eba0 000a 	sub.w	r0, r0, sl
 8005af6:	fa03 f000 	lsl.w	r0, r3, r0
 8005afa:	9b04      	ldr	r3, [sp, #16]
 8005afc:	3401      	adds	r4, #1
 8005afe:	4303      	orrs	r3, r0
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b06:	2206      	movs	r2, #6
 8005b08:	4825      	ldr	r0, [pc, #148]	; (8005ba0 <_svfiprintf_r+0x1f0>)
 8005b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b0e:	f7ff fe8b 	bl	8005828 <memchr>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d038      	beq.n	8005b88 <_svfiprintf_r+0x1d8>
 8005b16:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <_svfiprintf_r+0x1f4>)
 8005b18:	bb1b      	cbnz	r3, 8005b62 <_svfiprintf_r+0x1b2>
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	3307      	adds	r3, #7
 8005b1e:	f023 0307 	bic.w	r3, r3, #7
 8005b22:	3308      	adds	r3, #8
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b28:	4433      	add	r3, r6
 8005b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2c:	e767      	b.n	80059fe <_svfiprintf_r+0x4e>
 8005b2e:	460c      	mov	r4, r1
 8005b30:	2001      	movs	r0, #1
 8005b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b36:	e7a5      	b.n	8005a84 <_svfiprintf_r+0xd4>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f04f 0c0a 	mov.w	ip, #10
 8005b3e:	4619      	mov	r1, r3
 8005b40:	3401      	adds	r4, #1
 8005b42:	9305      	str	r3, [sp, #20]
 8005b44:	4620      	mov	r0, r4
 8005b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b4a:	3a30      	subs	r2, #48	; 0x30
 8005b4c:	2a09      	cmp	r2, #9
 8005b4e:	d903      	bls.n	8005b58 <_svfiprintf_r+0x1a8>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0c5      	beq.n	8005ae0 <_svfiprintf_r+0x130>
 8005b54:	9105      	str	r1, [sp, #20]
 8005b56:	e7c3      	b.n	8005ae0 <_svfiprintf_r+0x130>
 8005b58:	4604      	mov	r4, r0
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b60:	e7f0      	b.n	8005b44 <_svfiprintf_r+0x194>
 8005b62:	ab03      	add	r3, sp, #12
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	462a      	mov	r2, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <_svfiprintf_r+0x1f8>)
 8005b6c:	a904      	add	r1, sp, #16
 8005b6e:	f3af 8000 	nop.w
 8005b72:	1c42      	adds	r2, r0, #1
 8005b74:	4606      	mov	r6, r0
 8005b76:	d1d6      	bne.n	8005b26 <_svfiprintf_r+0x176>
 8005b78:	89ab      	ldrh	r3, [r5, #12]
 8005b7a:	065b      	lsls	r3, r3, #25
 8005b7c:	f53f af2c 	bmi.w	80059d8 <_svfiprintf_r+0x28>
 8005b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b82:	b01d      	add	sp, #116	; 0x74
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	ab03      	add	r3, sp, #12
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	462a      	mov	r2, r5
 8005b8e:	4638      	mov	r0, r7
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <_svfiprintf_r+0x1f8>)
 8005b92:	a904      	add	r1, sp, #16
 8005b94:	f7ff f854 	bl	8004c40 <_printf_i>
 8005b98:	e7eb      	b.n	8005b72 <_svfiprintf_r+0x1c2>
 8005b9a:	bf00      	nop
 8005b9c:	08006ea0 	.word	0x08006ea0
 8005ba0:	08006eaa 	.word	0x08006eaa
 8005ba4:	00000000 	.word	0x00000000
 8005ba8:	080058f9 	.word	0x080058f9
 8005bac:	08006ea6 	.word	0x08006ea6

08005bb0 <_raise_r>:
 8005bb0:	291f      	cmp	r1, #31
 8005bb2:	b538      	push	{r3, r4, r5, lr}
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	d904      	bls.n	8005bc4 <_raise_r+0x14>
 8005bba:	2316      	movs	r3, #22
 8005bbc:	6003      	str	r3, [r0, #0]
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bc6:	b112      	cbz	r2, 8005bce <_raise_r+0x1e>
 8005bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bcc:	b94b      	cbnz	r3, 8005be2 <_raise_r+0x32>
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 f830 	bl	8005c34 <_getpid_r>
 8005bd4:	462a      	mov	r2, r5
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	4620      	mov	r0, r4
 8005bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bde:	f000 b817 	b.w	8005c10 <_kill_r>
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d00a      	beq.n	8005bfc <_raise_r+0x4c>
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	d103      	bne.n	8005bf2 <_raise_r+0x42>
 8005bea:	2316      	movs	r3, #22
 8005bec:	6003      	str	r3, [r0, #0]
 8005bee:	2001      	movs	r0, #1
 8005bf0:	e7e7      	b.n	8005bc2 <_raise_r+0x12>
 8005bf2:	2400      	movs	r4, #0
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bfa:	4798      	blx	r3
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e7e0      	b.n	8005bc2 <_raise_r+0x12>

08005c00 <raise>:
 8005c00:	4b02      	ldr	r3, [pc, #8]	; (8005c0c <raise+0xc>)
 8005c02:	4601      	mov	r1, r0
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	f7ff bfd3 	b.w	8005bb0 <_raise_r>
 8005c0a:	bf00      	nop
 8005c0c:	2000002c 	.word	0x2000002c

08005c10 <_kill_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	2300      	movs	r3, #0
 8005c14:	4d06      	ldr	r5, [pc, #24]	; (8005c30 <_kill_r+0x20>)
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	f7fc fd42 	bl	80026a6 <_kill>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d102      	bne.n	8005c2c <_kill_r+0x1c>
 8005c26:	682b      	ldr	r3, [r5, #0]
 8005c28:	b103      	cbz	r3, 8005c2c <_kill_r+0x1c>
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	bd38      	pop	{r3, r4, r5, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000258 	.word	0x20000258

08005c34 <_getpid_r>:
 8005c34:	f7fc bd30 	b.w	8002698 <_getpid>

08005c38 <__sread>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c40:	f000 f8a8 	bl	8005d94 <_read_r>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	bfab      	itete	ge
 8005c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c4c:	181b      	addge	r3, r3, r0
 8005c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c52:	bfac      	ite	ge
 8005c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c56:	81a3      	strhlt	r3, [r4, #12]
 8005c58:	bd10      	pop	{r4, pc}

08005c5a <__swrite>:
 8005c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5e:	461f      	mov	r7, r3
 8005c60:	898b      	ldrh	r3, [r1, #12]
 8005c62:	4605      	mov	r5, r0
 8005c64:	05db      	lsls	r3, r3, #23
 8005c66:	460c      	mov	r4, r1
 8005c68:	4616      	mov	r6, r2
 8005c6a:	d505      	bpl.n	8005c78 <__swrite+0x1e>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c74:	f000 f874 	bl	8005d60 <_lseek_r>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	4628      	mov	r0, r5
 8005c84:	463b      	mov	r3, r7
 8005c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	f000 b823 	b.w	8005cd8 <_write_r>

08005c92 <__sseek>:
 8005c92:	b510      	push	{r4, lr}
 8005c94:	460c      	mov	r4, r1
 8005c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9a:	f000 f861 	bl	8005d60 <_lseek_r>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	bf15      	itete	ne
 8005ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cae:	81a3      	strheq	r3, [r4, #12]
 8005cb0:	bf18      	it	ne
 8005cb2:	81a3      	strhne	r3, [r4, #12]
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <__sclose>:
 8005cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cba:	f000 b81f 	b.w	8005cfc <_close_r>

08005cbe <strchr>:
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	b2c9      	uxtb	r1, r1
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc8:	b112      	cbz	r2, 8005cd0 <strchr+0x12>
 8005cca:	428a      	cmp	r2, r1
 8005ccc:	d1f9      	bne.n	8005cc2 <strchr+0x4>
 8005cce:	4770      	bx	lr
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	bf18      	it	ne
 8005cd4:	2000      	movne	r0, #0
 8005cd6:	4770      	bx	lr

08005cd8 <_write_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	4d05      	ldr	r5, [pc, #20]	; (8005cf8 <_write_r+0x20>)
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fc fd14 	bl	8002714 <_write>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_write_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_write_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	20000258 	.word	0x20000258

08005cfc <_close_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4d05      	ldr	r5, [pc, #20]	; (8005d18 <_close_r+0x1c>)
 8005d02:	4604      	mov	r4, r0
 8005d04:	4608      	mov	r0, r1
 8005d06:	602b      	str	r3, [r5, #0]
 8005d08:	f7fc fd4c 	bl	80027a4 <_close>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d102      	bne.n	8005d16 <_close_r+0x1a>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	b103      	cbz	r3, 8005d16 <_close_r+0x1a>
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	20000258 	.word	0x20000258

08005d1c <_fstat_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4d06      	ldr	r5, [pc, #24]	; (8005d3c <_fstat_r+0x20>)
 8005d22:	4604      	mov	r4, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	f7fc fd46 	bl	80027ba <_fstat>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	d102      	bne.n	8005d38 <_fstat_r+0x1c>
 8005d32:	682b      	ldr	r3, [r5, #0]
 8005d34:	b103      	cbz	r3, 8005d38 <_fstat_r+0x1c>
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000258 	.word	0x20000258

08005d40 <_isatty_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	; (8005d5c <_isatty_r+0x1c>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fc fd44 	bl	80027d8 <_isatty>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_isatty_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_isatty_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20000258 	.word	0x20000258

08005d60 <_lseek_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4d05      	ldr	r5, [pc, #20]	; (8005d80 <_lseek_r+0x20>)
 8005d6c:	602a      	str	r2, [r5, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f7fc fd3c 	bl	80027ec <_lseek>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_lseek_r+0x1e>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_lseek_r+0x1e>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	20000258 	.word	0x20000258

08005d84 <_malloc_usable_size_r>:
 8005d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d88:	1f18      	subs	r0, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfbc      	itt	lt
 8005d8e:	580b      	ldrlt	r3, [r1, r0]
 8005d90:	18c0      	addlt	r0, r0, r3
 8005d92:	4770      	bx	lr

08005d94 <_read_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4d05      	ldr	r5, [pc, #20]	; (8005db4 <_read_r+0x20>)
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fc fc99 	bl	80026da <_read>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_read_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_read_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20000258 	.word	0x20000258

08005db8 <pow>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	461f      	mov	r7, r3
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	4689      	mov	r9, r1
 8005dc2:	4616      	mov	r6, r2
 8005dc4:	f000 f8a4 	bl	8005f10 <__ieee754_pow>
 8005dc8:	4b4d      	ldr	r3, [pc, #308]	; (8005f00 <pow+0x148>)
 8005dca:	4604      	mov	r4, r0
 8005dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	d015      	beq.n	8005e02 <pow+0x4a>
 8005dd6:	4632      	mov	r2, r6
 8005dd8:	463b      	mov	r3, r7
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa fe15 	bl	8000a0c <__aeabi_dcmpun>
 8005de2:	b970      	cbnz	r0, 8005e02 <pow+0x4a>
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	4640      	mov	r0, r8
 8005dea:	4649      	mov	r1, r9
 8005dec:	f7fa fe0e 	bl	8000a0c <__aeabi_dcmpun>
 8005df0:	2200      	movs	r2, #0
 8005df2:	2300      	movs	r3, #0
 8005df4:	b148      	cbz	r0, 8005e0a <pow+0x52>
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa fdd5 	bl	80009a8 <__aeabi_dcmpeq>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d17b      	bne.n	8005efa <pow+0x142>
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7fa fdcb 	bl	80009a8 <__aeabi_dcmpeq>
 8005e12:	b1e0      	cbz	r0, 8005e4e <pow+0x96>
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	4630      	mov	r0, r6
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	f7fa fdc4 	bl	80009a8 <__aeabi_dcmpeq>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d16a      	bne.n	8005efa <pow+0x142>
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	f000 fe37 	bl	8006a9a <finite>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d0e8      	beq.n	8005e02 <pow+0x4a>
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa fdc0 	bl	80009bc <__aeabi_dcmplt>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d0e0      	beq.n	8005e02 <pow+0x4a>
 8005e40:	f7fe fc3c 	bl	80046bc <__errno>
 8005e44:	2321      	movs	r3, #33	; 0x21
 8005e46:	2400      	movs	r4, #0
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	4d2e      	ldr	r5, [pc, #184]	; (8005f04 <pow+0x14c>)
 8005e4c:	e7d9      	b.n	8005e02 <pow+0x4a>
 8005e4e:	4620      	mov	r0, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	f000 fe22 	bl	8006a9a <finite>
 8005e56:	bba8      	cbnz	r0, 8005ec4 <pow+0x10c>
 8005e58:	4640      	mov	r0, r8
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	f000 fe1d 	bl	8006a9a <finite>
 8005e60:	b380      	cbz	r0, 8005ec4 <pow+0x10c>
 8005e62:	4630      	mov	r0, r6
 8005e64:	4639      	mov	r1, r7
 8005e66:	f000 fe18 	bl	8006a9a <finite>
 8005e6a:	b358      	cbz	r0, 8005ec4 <pow+0x10c>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	462b      	mov	r3, r5
 8005e70:	4620      	mov	r0, r4
 8005e72:	4629      	mov	r1, r5
 8005e74:	f7fa fdca 	bl	8000a0c <__aeabi_dcmpun>
 8005e78:	b160      	cbz	r0, 8005e94 <pow+0xdc>
 8005e7a:	f7fe fc1f 	bl	80046bc <__errno>
 8005e7e:	2321      	movs	r3, #33	; 0x21
 8005e80:	2200      	movs	r2, #0
 8005e82:	6003      	str	r3, [r0, #0]
 8005e84:	2300      	movs	r3, #0
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	f7fa fc4f 	bl	800072c <__aeabi_ddiv>
 8005e8e:	4604      	mov	r4, r0
 8005e90:	460d      	mov	r5, r1
 8005e92:	e7b6      	b.n	8005e02 <pow+0x4a>
 8005e94:	f7fe fc12 	bl	80046bc <__errno>
 8005e98:	2322      	movs	r3, #34	; 0x22
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	6003      	str	r3, [r0, #0]
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	f7fa fd8a 	bl	80009bc <__aeabi_dcmplt>
 8005ea8:	2400      	movs	r4, #0
 8005eaa:	b148      	cbz	r0, 8005ec0 <pow+0x108>
 8005eac:	4630      	mov	r0, r6
 8005eae:	4639      	mov	r1, r7
 8005eb0:	f000 fe00 	bl	8006ab4 <rint>
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	f7fa fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d0c4      	beq.n	8005e4a <pow+0x92>
 8005ec0:	4d11      	ldr	r5, [pc, #68]	; (8005f08 <pow+0x150>)
 8005ec2:	e79e      	b.n	8005e02 <pow+0x4a>
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4620      	mov	r0, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	f7fa fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d096      	beq.n	8005e02 <pow+0x4a>
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f000 fddf 	bl	8006a9a <finite>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d090      	beq.n	8005e02 <pow+0x4a>
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f000 fdd9 	bl	8006a9a <finite>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d08a      	beq.n	8005e02 <pow+0x4a>
 8005eec:	f7fe fbe6 	bl	80046bc <__errno>
 8005ef0:	2322      	movs	r3, #34	; 0x22
 8005ef2:	2400      	movs	r4, #0
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	6003      	str	r3, [r0, #0]
 8005ef8:	e783      	b.n	8005e02 <pow+0x4a>
 8005efa:	2400      	movs	r4, #0
 8005efc:	4d03      	ldr	r5, [pc, #12]	; (8005f0c <pow+0x154>)
 8005efe:	e780      	b.n	8005e02 <pow+0x4a>
 8005f00:	20000090 	.word	0x20000090
 8005f04:	fff00000 	.word	0xfff00000
 8005f08:	7ff00000 	.word	0x7ff00000
 8005f0c:	3ff00000 	.word	0x3ff00000

08005f10 <__ieee754_pow>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	b093      	sub	sp, #76	; 0x4c
 8005f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f1a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005f1e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005f22:	ea55 0302 	orrs.w	r3, r5, r2
 8005f26:	4607      	mov	r7, r0
 8005f28:	4688      	mov	r8, r1
 8005f2a:	f000 84bf 	beq.w	80068ac <__ieee754_pow+0x99c>
 8005f2e:	4b7e      	ldr	r3, [pc, #504]	; (8006128 <__ieee754_pow+0x218>)
 8005f30:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005f34:	429c      	cmp	r4, r3
 8005f36:	4689      	mov	r9, r1
 8005f38:	4682      	mov	sl, r0
 8005f3a:	dc09      	bgt.n	8005f50 <__ieee754_pow+0x40>
 8005f3c:	d103      	bne.n	8005f46 <__ieee754_pow+0x36>
 8005f3e:	b978      	cbnz	r0, 8005f60 <__ieee754_pow+0x50>
 8005f40:	42a5      	cmp	r5, r4
 8005f42:	dd02      	ble.n	8005f4a <__ieee754_pow+0x3a>
 8005f44:	e00c      	b.n	8005f60 <__ieee754_pow+0x50>
 8005f46:	429d      	cmp	r5, r3
 8005f48:	dc02      	bgt.n	8005f50 <__ieee754_pow+0x40>
 8005f4a:	429d      	cmp	r5, r3
 8005f4c:	d10e      	bne.n	8005f6c <__ieee754_pow+0x5c>
 8005f4e:	b16a      	cbz	r2, 8005f6c <__ieee754_pow+0x5c>
 8005f50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005f54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f58:	ea54 030a 	orrs.w	r3, r4, sl
 8005f5c:	f000 84a6 	beq.w	80068ac <__ieee754_pow+0x99c>
 8005f60:	4872      	ldr	r0, [pc, #456]	; (800612c <__ieee754_pow+0x21c>)
 8005f62:	b013      	add	sp, #76	; 0x4c
 8005f64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	f000 bd9e 	b.w	8006aa8 <nan>
 8005f6c:	f1b9 0f00 	cmp.w	r9, #0
 8005f70:	da39      	bge.n	8005fe6 <__ieee754_pow+0xd6>
 8005f72:	4b6f      	ldr	r3, [pc, #444]	; (8006130 <__ieee754_pow+0x220>)
 8005f74:	429d      	cmp	r5, r3
 8005f76:	dc54      	bgt.n	8006022 <__ieee754_pow+0x112>
 8005f78:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005f7c:	429d      	cmp	r5, r3
 8005f7e:	f340 84a6 	ble.w	80068ce <__ieee754_pow+0x9be>
 8005f82:	152b      	asrs	r3, r5, #20
 8005f84:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f88:	2b14      	cmp	r3, #20
 8005f8a:	dd0f      	ble.n	8005fac <__ieee754_pow+0x9c>
 8005f8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005f90:	fa22 f103 	lsr.w	r1, r2, r3
 8005f94:	fa01 f303 	lsl.w	r3, r1, r3
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	f040 8498 	bne.w	80068ce <__ieee754_pow+0x9be>
 8005f9e:	f001 0101 	and.w	r1, r1, #1
 8005fa2:	f1c1 0302 	rsb	r3, r1, #2
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	b182      	cbz	r2, 8005fcc <__ieee754_pow+0xbc>
 8005faa:	e05e      	b.n	800606a <__ieee754_pow+0x15a>
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	d15a      	bne.n	8006066 <__ieee754_pow+0x156>
 8005fb0:	f1c3 0314 	rsb	r3, r3, #20
 8005fb4:	fa45 f103 	asr.w	r1, r5, r3
 8005fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbc:	42ab      	cmp	r3, r5
 8005fbe:	f040 8483 	bne.w	80068c8 <__ieee754_pow+0x9b8>
 8005fc2:	f001 0101 	and.w	r1, r1, #1
 8005fc6:	f1c1 0302 	rsb	r3, r1, #2
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	4b59      	ldr	r3, [pc, #356]	; (8006134 <__ieee754_pow+0x224>)
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	d130      	bne.n	8006034 <__ieee754_pow+0x124>
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	f280 8474 	bge.w	80068c0 <__ieee754_pow+0x9b0>
 8005fd8:	463a      	mov	r2, r7
 8005fda:	4643      	mov	r3, r8
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4955      	ldr	r1, [pc, #340]	; (8006134 <__ieee754_pow+0x224>)
 8005fe0:	f7fa fba4 	bl	800072c <__aeabi_ddiv>
 8005fe4:	e02f      	b.n	8006046 <__ieee754_pow+0x136>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	d13d      	bne.n	800606a <__ieee754_pow+0x15a>
 8005fee:	4b4e      	ldr	r3, [pc, #312]	; (8006128 <__ieee754_pow+0x218>)
 8005ff0:	429d      	cmp	r5, r3
 8005ff2:	d1eb      	bne.n	8005fcc <__ieee754_pow+0xbc>
 8005ff4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005ff8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005ffc:	ea53 030a 	orrs.w	r3, r3, sl
 8006000:	f000 8454 	beq.w	80068ac <__ieee754_pow+0x99c>
 8006004:	4b4c      	ldr	r3, [pc, #304]	; (8006138 <__ieee754_pow+0x228>)
 8006006:	429c      	cmp	r4, r3
 8006008:	dd0d      	ble.n	8006026 <__ieee754_pow+0x116>
 800600a:	2e00      	cmp	r6, #0
 800600c:	f280 8454 	bge.w	80068b8 <__ieee754_pow+0x9a8>
 8006010:	f04f 0b00 	mov.w	fp, #0
 8006014:	f04f 0c00 	mov.w	ip, #0
 8006018:	4658      	mov	r0, fp
 800601a:	4661      	mov	r1, ip
 800601c:	b013      	add	sp, #76	; 0x4c
 800601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006022:	2302      	movs	r3, #2
 8006024:	e7e0      	b.n	8005fe8 <__ieee754_pow+0xd8>
 8006026:	2e00      	cmp	r6, #0
 8006028:	daf2      	bge.n	8006010 <__ieee754_pow+0x100>
 800602a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800602e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006032:	e7f1      	b.n	8006018 <__ieee754_pow+0x108>
 8006034:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006038:	d108      	bne.n	800604c <__ieee754_pow+0x13c>
 800603a:	463a      	mov	r2, r7
 800603c:	4643      	mov	r3, r8
 800603e:	4638      	mov	r0, r7
 8006040:	4641      	mov	r1, r8
 8006042:	f7fa fa49 	bl	80004d8 <__aeabi_dmul>
 8006046:	4683      	mov	fp, r0
 8006048:	468c      	mov	ip, r1
 800604a:	e7e5      	b.n	8006018 <__ieee754_pow+0x108>
 800604c:	4b3b      	ldr	r3, [pc, #236]	; (800613c <__ieee754_pow+0x22c>)
 800604e:	429e      	cmp	r6, r3
 8006050:	d10b      	bne.n	800606a <__ieee754_pow+0x15a>
 8006052:	f1b9 0f00 	cmp.w	r9, #0
 8006056:	db08      	blt.n	800606a <__ieee754_pow+0x15a>
 8006058:	4638      	mov	r0, r7
 800605a:	4641      	mov	r1, r8
 800605c:	b013      	add	sp, #76	; 0x4c
 800605e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006062:	f000 bc6b 	b.w	800693c <__ieee754_sqrt>
 8006066:	2300      	movs	r3, #0
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	4638      	mov	r0, r7
 800606c:	4641      	mov	r1, r8
 800606e:	f000 fd11 	bl	8006a94 <fabs>
 8006072:	4683      	mov	fp, r0
 8006074:	468c      	mov	ip, r1
 8006076:	f1ba 0f00 	cmp.w	sl, #0
 800607a:	d129      	bne.n	80060d0 <__ieee754_pow+0x1c0>
 800607c:	b124      	cbz	r4, 8006088 <__ieee754_pow+0x178>
 800607e:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <__ieee754_pow+0x224>)
 8006080:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006084:	429a      	cmp	r2, r3
 8006086:	d123      	bne.n	80060d0 <__ieee754_pow+0x1c0>
 8006088:	2e00      	cmp	r6, #0
 800608a:	da07      	bge.n	800609c <__ieee754_pow+0x18c>
 800608c:	465a      	mov	r2, fp
 800608e:	4663      	mov	r3, ip
 8006090:	2000      	movs	r0, #0
 8006092:	4928      	ldr	r1, [pc, #160]	; (8006134 <__ieee754_pow+0x224>)
 8006094:	f7fa fb4a 	bl	800072c <__aeabi_ddiv>
 8006098:	4683      	mov	fp, r0
 800609a:	468c      	mov	ip, r1
 800609c:	f1b9 0f00 	cmp.w	r9, #0
 80060a0:	daba      	bge.n	8006018 <__ieee754_pow+0x108>
 80060a2:	9b00      	ldr	r3, [sp, #0]
 80060a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80060a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80060ac:	4323      	orrs	r3, r4
 80060ae:	d108      	bne.n	80060c2 <__ieee754_pow+0x1b2>
 80060b0:	465a      	mov	r2, fp
 80060b2:	4663      	mov	r3, ip
 80060b4:	4658      	mov	r0, fp
 80060b6:	4661      	mov	r1, ip
 80060b8:	f7fa f856 	bl	8000168 <__aeabi_dsub>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	e78e      	b.n	8005fe0 <__ieee754_pow+0xd0>
 80060c2:	9b00      	ldr	r3, [sp, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d1a7      	bne.n	8006018 <__ieee754_pow+0x108>
 80060c8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80060cc:	469c      	mov	ip, r3
 80060ce:	e7a3      	b.n	8006018 <__ieee754_pow+0x108>
 80060d0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80060d4:	3b01      	subs	r3, #1
 80060d6:	930c      	str	r3, [sp, #48]	; 0x30
 80060d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060da:	9b00      	ldr	r3, [sp, #0]
 80060dc:	4313      	orrs	r3, r2
 80060de:	d104      	bne.n	80060ea <__ieee754_pow+0x1da>
 80060e0:	463a      	mov	r2, r7
 80060e2:	4643      	mov	r3, r8
 80060e4:	4638      	mov	r0, r7
 80060e6:	4641      	mov	r1, r8
 80060e8:	e7e6      	b.n	80060b8 <__ieee754_pow+0x1a8>
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <__ieee754_pow+0x230>)
 80060ec:	429d      	cmp	r5, r3
 80060ee:	f340 80f9 	ble.w	80062e4 <__ieee754_pow+0x3d4>
 80060f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80060f6:	429d      	cmp	r5, r3
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <__ieee754_pow+0x228>)
 80060fa:	dd09      	ble.n	8006110 <__ieee754_pow+0x200>
 80060fc:	429c      	cmp	r4, r3
 80060fe:	dc0c      	bgt.n	800611a <__ieee754_pow+0x20a>
 8006100:	2e00      	cmp	r6, #0
 8006102:	da85      	bge.n	8006010 <__ieee754_pow+0x100>
 8006104:	a306      	add	r3, pc, #24	; (adr r3, 8006120 <__ieee754_pow+0x210>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	4610      	mov	r0, r2
 800610c:	4619      	mov	r1, r3
 800610e:	e798      	b.n	8006042 <__ieee754_pow+0x132>
 8006110:	429c      	cmp	r4, r3
 8006112:	dbf5      	blt.n	8006100 <__ieee754_pow+0x1f0>
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <__ieee754_pow+0x224>)
 8006116:	429c      	cmp	r4, r3
 8006118:	dd14      	ble.n	8006144 <__ieee754_pow+0x234>
 800611a:	2e00      	cmp	r6, #0
 800611c:	dcf2      	bgt.n	8006104 <__ieee754_pow+0x1f4>
 800611e:	e777      	b.n	8006010 <__ieee754_pow+0x100>
 8006120:	8800759c 	.word	0x8800759c
 8006124:	7e37e43c 	.word	0x7e37e43c
 8006128:	7ff00000 	.word	0x7ff00000
 800612c:	08006e9b 	.word	0x08006e9b
 8006130:	433fffff 	.word	0x433fffff
 8006134:	3ff00000 	.word	0x3ff00000
 8006138:	3fefffff 	.word	0x3fefffff
 800613c:	3fe00000 	.word	0x3fe00000
 8006140:	41e00000 	.word	0x41e00000
 8006144:	4661      	mov	r1, ip
 8006146:	2200      	movs	r2, #0
 8006148:	4658      	mov	r0, fp
 800614a:	4b61      	ldr	r3, [pc, #388]	; (80062d0 <__ieee754_pow+0x3c0>)
 800614c:	f7fa f80c 	bl	8000168 <__aeabi_dsub>
 8006150:	a355      	add	r3, pc, #340	; (adr r3, 80062a8 <__ieee754_pow+0x398>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	4604      	mov	r4, r0
 8006158:	460d      	mov	r5, r1
 800615a:	f7fa f9bd 	bl	80004d8 <__aeabi_dmul>
 800615e:	a354      	add	r3, pc, #336	; (adr r3, 80062b0 <__ieee754_pow+0x3a0>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	4606      	mov	r6, r0
 8006166:	460f      	mov	r7, r1
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	f7fa f9b4 	bl	80004d8 <__aeabi_dmul>
 8006170:	2200      	movs	r2, #0
 8006172:	4682      	mov	sl, r0
 8006174:	468b      	mov	fp, r1
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	4b56      	ldr	r3, [pc, #344]	; (80062d4 <__ieee754_pow+0x3c4>)
 800617c:	f7fa f9ac 	bl	80004d8 <__aeabi_dmul>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	a14c      	add	r1, pc, #304	; (adr r1, 80062b8 <__ieee754_pow+0x3a8>)
 8006186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800618a:	f7f9 ffed 	bl	8000168 <__aeabi_dsub>
 800618e:	4622      	mov	r2, r4
 8006190:	462b      	mov	r3, r5
 8006192:	f7fa f9a1 	bl	80004d8 <__aeabi_dmul>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	2000      	movs	r0, #0
 800619c:	494e      	ldr	r1, [pc, #312]	; (80062d8 <__ieee754_pow+0x3c8>)
 800619e:	f7f9 ffe3 	bl	8000168 <__aeabi_dsub>
 80061a2:	4622      	mov	r2, r4
 80061a4:	462b      	mov	r3, r5
 80061a6:	4680      	mov	r8, r0
 80061a8:	4689      	mov	r9, r1
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f7fa f993 	bl	80004d8 <__aeabi_dmul>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4640      	mov	r0, r8
 80061b8:	4649      	mov	r1, r9
 80061ba:	f7fa f98d 	bl	80004d8 <__aeabi_dmul>
 80061be:	a340      	add	r3, pc, #256	; (adr r3, 80062c0 <__ieee754_pow+0x3b0>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa f988 	bl	80004d8 <__aeabi_dmul>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4650      	mov	r0, sl
 80061ce:	4659      	mov	r1, fp
 80061d0:	f7f9 ffca 	bl	8000168 <__aeabi_dsub>
 80061d4:	f04f 0a00 	mov.w	sl, #0
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4604      	mov	r4, r0
 80061de:	460d      	mov	r5, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7f9 ffc2 	bl	800016c <__adddf3>
 80061e8:	4632      	mov	r2, r6
 80061ea:	463b      	mov	r3, r7
 80061ec:	4650      	mov	r0, sl
 80061ee:	468b      	mov	fp, r1
 80061f0:	f7f9 ffba 	bl	8000168 <__aeabi_dsub>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4620      	mov	r0, r4
 80061fa:	4629      	mov	r1, r5
 80061fc:	f7f9 ffb4 	bl	8000168 <__aeabi_dsub>
 8006200:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006204:	9b00      	ldr	r3, [sp, #0]
 8006206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006208:	3b01      	subs	r3, #1
 800620a:	4313      	orrs	r3, r2
 800620c:	f04f 0600 	mov.w	r6, #0
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	bf0c      	ite	eq
 8006216:	4b31      	ldreq	r3, [pc, #196]	; (80062dc <__ieee754_pow+0x3cc>)
 8006218:	4b2d      	ldrne	r3, [pc, #180]	; (80062d0 <__ieee754_pow+0x3c0>)
 800621a:	4604      	mov	r4, r0
 800621c:	460d      	mov	r5, r1
 800621e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006222:	e9cd 2300 	strd	r2, r3, [sp]
 8006226:	4632      	mov	r2, r6
 8006228:	463b      	mov	r3, r7
 800622a:	f7f9 ff9d 	bl	8000168 <__aeabi_dsub>
 800622e:	4652      	mov	r2, sl
 8006230:	465b      	mov	r3, fp
 8006232:	f7fa f951 	bl	80004d8 <__aeabi_dmul>
 8006236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800623a:	4680      	mov	r8, r0
 800623c:	4689      	mov	r9, r1
 800623e:	4620      	mov	r0, r4
 8006240:	4629      	mov	r1, r5
 8006242:	f7fa f949 	bl	80004d8 <__aeabi_dmul>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4640      	mov	r0, r8
 800624c:	4649      	mov	r1, r9
 800624e:	f7f9 ff8d 	bl	800016c <__adddf3>
 8006252:	4632      	mov	r2, r6
 8006254:	463b      	mov	r3, r7
 8006256:	4680      	mov	r8, r0
 8006258:	4689      	mov	r9, r1
 800625a:	4650      	mov	r0, sl
 800625c:	4659      	mov	r1, fp
 800625e:	f7fa f93b 	bl	80004d8 <__aeabi_dmul>
 8006262:	4604      	mov	r4, r0
 8006264:	460d      	mov	r5, r1
 8006266:	460b      	mov	r3, r1
 8006268:	4602      	mov	r2, r0
 800626a:	4649      	mov	r1, r9
 800626c:	4640      	mov	r0, r8
 800626e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006272:	f7f9 ff7b 	bl	800016c <__adddf3>
 8006276:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <__ieee754_pow+0x3d0>)
 8006278:	4682      	mov	sl, r0
 800627a:	4299      	cmp	r1, r3
 800627c:	460f      	mov	r7, r1
 800627e:	460e      	mov	r6, r1
 8006280:	f340 82ed 	ble.w	800685e <__ieee754_pow+0x94e>
 8006284:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006288:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800628c:	4303      	orrs	r3, r0
 800628e:	f000 81e7 	beq.w	8006660 <__ieee754_pow+0x750>
 8006292:	a30d      	add	r3, pc, #52	; (adr r3, 80062c8 <__ieee754_pow+0x3b8>)
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800629c:	f7fa f91c 	bl	80004d8 <__aeabi_dmul>
 80062a0:	a309      	add	r3, pc, #36	; (adr r3, 80062c8 <__ieee754_pow+0x3b8>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	e6cc      	b.n	8006042 <__ieee754_pow+0x132>
 80062a8:	60000000 	.word	0x60000000
 80062ac:	3ff71547 	.word	0x3ff71547
 80062b0:	f85ddf44 	.word	0xf85ddf44
 80062b4:	3e54ae0b 	.word	0x3e54ae0b
 80062b8:	55555555 	.word	0x55555555
 80062bc:	3fd55555 	.word	0x3fd55555
 80062c0:	652b82fe 	.word	0x652b82fe
 80062c4:	3ff71547 	.word	0x3ff71547
 80062c8:	8800759c 	.word	0x8800759c
 80062cc:	7e37e43c 	.word	0x7e37e43c
 80062d0:	3ff00000 	.word	0x3ff00000
 80062d4:	3fd00000 	.word	0x3fd00000
 80062d8:	3fe00000 	.word	0x3fe00000
 80062dc:	bff00000 	.word	0xbff00000
 80062e0:	408fffff 	.word	0x408fffff
 80062e4:	4bd4      	ldr	r3, [pc, #848]	; (8006638 <__ieee754_pow+0x728>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	ea09 0303 	and.w	r3, r9, r3
 80062ec:	b943      	cbnz	r3, 8006300 <__ieee754_pow+0x3f0>
 80062ee:	4658      	mov	r0, fp
 80062f0:	4661      	mov	r1, ip
 80062f2:	4bd2      	ldr	r3, [pc, #840]	; (800663c <__ieee754_pow+0x72c>)
 80062f4:	f7fa f8f0 	bl	80004d8 <__aeabi_dmul>
 80062f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80062fc:	4683      	mov	fp, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	1523      	asrs	r3, r4, #20
 8006302:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006306:	4413      	add	r3, r2
 8006308:	930b      	str	r3, [sp, #44]	; 0x2c
 800630a:	4bcd      	ldr	r3, [pc, #820]	; (8006640 <__ieee754_pow+0x730>)
 800630c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006310:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006314:	429c      	cmp	r4, r3
 8006316:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800631a:	dd08      	ble.n	800632e <__ieee754_pow+0x41e>
 800631c:	4bc9      	ldr	r3, [pc, #804]	; (8006644 <__ieee754_pow+0x734>)
 800631e:	429c      	cmp	r4, r3
 8006320:	f340 819c 	ble.w	800665c <__ieee754_pow+0x74c>
 8006324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006326:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800632a:	3301      	adds	r3, #1
 800632c:	930b      	str	r3, [sp, #44]	; 0x2c
 800632e:	2600      	movs	r6, #0
 8006330:	00f3      	lsls	r3, r6, #3
 8006332:	930d      	str	r3, [sp, #52]	; 0x34
 8006334:	4bc4      	ldr	r3, [pc, #784]	; (8006648 <__ieee754_pow+0x738>)
 8006336:	4658      	mov	r0, fp
 8006338:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800633c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006340:	4629      	mov	r1, r5
 8006342:	461a      	mov	r2, r3
 8006344:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006348:	4623      	mov	r3, r4
 800634a:	f7f9 ff0d 	bl	8000168 <__aeabi_dsub>
 800634e:	46da      	mov	sl, fp
 8006350:	462b      	mov	r3, r5
 8006352:	4652      	mov	r2, sl
 8006354:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006358:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800635c:	f7f9 ff06 	bl	800016c <__adddf3>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	2000      	movs	r0, #0
 8006366:	49b9      	ldr	r1, [pc, #740]	; (800664c <__ieee754_pow+0x73c>)
 8006368:	f7fa f9e0 	bl	800072c <__aeabi_ddiv>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006374:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006378:	f7fa f8ae 	bl	80004d8 <__aeabi_dmul>
 800637c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006380:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006384:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006388:	2300      	movs	r3, #0
 800638a:	2200      	movs	r2, #0
 800638c:	46ab      	mov	fp, r5
 800638e:	106d      	asrs	r5, r5, #1
 8006390:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006394:	9304      	str	r3, [sp, #16]
 8006396:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800639a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800639e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	4614      	mov	r4, r2
 80063a8:	461d      	mov	r5, r3
 80063aa:	f7fa f895 	bl	80004d8 <__aeabi_dmul>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063b6:	f7f9 fed7 	bl	8000168 <__aeabi_dsub>
 80063ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	4620      	mov	r0, r4
 80063c4:	4629      	mov	r1, r5
 80063c6:	f7f9 fecf 	bl	8000168 <__aeabi_dsub>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4650      	mov	r0, sl
 80063d0:	4659      	mov	r1, fp
 80063d2:	f7f9 fec9 	bl	8000168 <__aeabi_dsub>
 80063d6:	4642      	mov	r2, r8
 80063d8:	464b      	mov	r3, r9
 80063da:	f7fa f87d 	bl	80004d8 <__aeabi_dmul>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	f7f9 febf 	bl	8000168 <__aeabi_dsub>
 80063ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063ee:	f7fa f873 	bl	80004d8 <__aeabi_dmul>
 80063f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	f7fa f86b 	bl	80004d8 <__aeabi_dmul>
 8006402:	a37b      	add	r3, pc, #492	; (adr r3, 80065f0 <__ieee754_pow+0x6e0>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
 800640c:	f7fa f864 	bl	80004d8 <__aeabi_dmul>
 8006410:	a379      	add	r3, pc, #484	; (adr r3, 80065f8 <__ieee754_pow+0x6e8>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7f9 fea9 	bl	800016c <__adddf3>
 800641a:	4622      	mov	r2, r4
 800641c:	462b      	mov	r3, r5
 800641e:	f7fa f85b 	bl	80004d8 <__aeabi_dmul>
 8006422:	a377      	add	r3, pc, #476	; (adr r3, 8006600 <__ieee754_pow+0x6f0>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7f9 fea0 	bl	800016c <__adddf3>
 800642c:	4622      	mov	r2, r4
 800642e:	462b      	mov	r3, r5
 8006430:	f7fa f852 	bl	80004d8 <__aeabi_dmul>
 8006434:	a374      	add	r3, pc, #464	; (adr r3, 8006608 <__ieee754_pow+0x6f8>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7f9 fe97 	bl	800016c <__adddf3>
 800643e:	4622      	mov	r2, r4
 8006440:	462b      	mov	r3, r5
 8006442:	f7fa f849 	bl	80004d8 <__aeabi_dmul>
 8006446:	a372      	add	r3, pc, #456	; (adr r3, 8006610 <__ieee754_pow+0x700>)
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7f9 fe8e 	bl	800016c <__adddf3>
 8006450:	4622      	mov	r2, r4
 8006452:	462b      	mov	r3, r5
 8006454:	f7fa f840 	bl	80004d8 <__aeabi_dmul>
 8006458:	a36f      	add	r3, pc, #444	; (adr r3, 8006618 <__ieee754_pow+0x708>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7f9 fe85 	bl	800016c <__adddf3>
 8006462:	4622      	mov	r2, r4
 8006464:	4606      	mov	r6, r0
 8006466:	460f      	mov	r7, r1
 8006468:	462b      	mov	r3, r5
 800646a:	4620      	mov	r0, r4
 800646c:	4629      	mov	r1, r5
 800646e:	f7fa f833 	bl	80004d8 <__aeabi_dmul>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4630      	mov	r0, r6
 8006478:	4639      	mov	r1, r7
 800647a:	f7fa f82d 	bl	80004d8 <__aeabi_dmul>
 800647e:	4604      	mov	r4, r0
 8006480:	460d      	mov	r5, r1
 8006482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006486:	4642      	mov	r2, r8
 8006488:	464b      	mov	r3, r9
 800648a:	f7f9 fe6f 	bl	800016c <__adddf3>
 800648e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	f7f9 fe67 	bl	800016c <__adddf3>
 800649e:	4642      	mov	r2, r8
 80064a0:	4606      	mov	r6, r0
 80064a2:	460f      	mov	r7, r1
 80064a4:	464b      	mov	r3, r9
 80064a6:	4640      	mov	r0, r8
 80064a8:	4649      	mov	r1, r9
 80064aa:	f7fa f815 	bl	80004d8 <__aeabi_dmul>
 80064ae:	2200      	movs	r2, #0
 80064b0:	4b67      	ldr	r3, [pc, #412]	; (8006650 <__ieee754_pow+0x740>)
 80064b2:	4682      	mov	sl, r0
 80064b4:	468b      	mov	fp, r1
 80064b6:	f7f9 fe59 	bl	800016c <__adddf3>
 80064ba:	4632      	mov	r2, r6
 80064bc:	463b      	mov	r3, r7
 80064be:	f7f9 fe55 	bl	800016c <__adddf3>
 80064c2:	9c04      	ldr	r4, [sp, #16]
 80064c4:	460d      	mov	r5, r1
 80064c6:	4622      	mov	r2, r4
 80064c8:	460b      	mov	r3, r1
 80064ca:	4640      	mov	r0, r8
 80064cc:	4649      	mov	r1, r9
 80064ce:	f7fa f803 	bl	80004d8 <__aeabi_dmul>
 80064d2:	2200      	movs	r2, #0
 80064d4:	4680      	mov	r8, r0
 80064d6:	4689      	mov	r9, r1
 80064d8:	4620      	mov	r0, r4
 80064da:	4629      	mov	r1, r5
 80064dc:	4b5c      	ldr	r3, [pc, #368]	; (8006650 <__ieee754_pow+0x740>)
 80064de:	f7f9 fe43 	bl	8000168 <__aeabi_dsub>
 80064e2:	4652      	mov	r2, sl
 80064e4:	465b      	mov	r3, fp
 80064e6:	f7f9 fe3f 	bl	8000168 <__aeabi_dsub>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7f9 fe39 	bl	8000168 <__aeabi_dsub>
 80064f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064fa:	f7f9 ffed 	bl	80004d8 <__aeabi_dmul>
 80064fe:	4622      	mov	r2, r4
 8006500:	4606      	mov	r6, r0
 8006502:	460f      	mov	r7, r1
 8006504:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006508:	462b      	mov	r3, r5
 800650a:	f7f9 ffe5 	bl	80004d8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4630      	mov	r0, r6
 8006514:	4639      	mov	r1, r7
 8006516:	f7f9 fe29 	bl	800016c <__adddf3>
 800651a:	4606      	mov	r6, r0
 800651c:	460f      	mov	r7, r1
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7f9 fe21 	bl	800016c <__adddf3>
 800652a:	a33d      	add	r3, pc, #244	; (adr r3, 8006620 <__ieee754_pow+0x710>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	9c04      	ldr	r4, [sp, #16]
 8006532:	460d      	mov	r5, r1
 8006534:	4620      	mov	r0, r4
 8006536:	f7f9 ffcf 	bl	80004d8 <__aeabi_dmul>
 800653a:	4642      	mov	r2, r8
 800653c:	464b      	mov	r3, r9
 800653e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006542:	4620      	mov	r0, r4
 8006544:	4629      	mov	r1, r5
 8006546:	f7f9 fe0f 	bl	8000168 <__aeabi_dsub>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7f9 fe09 	bl	8000168 <__aeabi_dsub>
 8006556:	a334      	add	r3, pc, #208	; (adr r3, 8006628 <__ieee754_pow+0x718>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 ffbc 	bl	80004d8 <__aeabi_dmul>
 8006560:	a333      	add	r3, pc, #204	; (adr r3, 8006630 <__ieee754_pow+0x720>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	4606      	mov	r6, r0
 8006568:	460f      	mov	r7, r1
 800656a:	4620      	mov	r0, r4
 800656c:	4629      	mov	r1, r5
 800656e:	f7f9 ffb3 	bl	80004d8 <__aeabi_dmul>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4630      	mov	r0, r6
 8006578:	4639      	mov	r1, r7
 800657a:	f7f9 fdf7 	bl	800016c <__adddf3>
 800657e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006580:	4b34      	ldr	r3, [pc, #208]	; (8006654 <__ieee754_pow+0x744>)
 8006582:	4413      	add	r3, r2
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 fdf0 	bl	800016c <__adddf3>
 800658c:	4680      	mov	r8, r0
 800658e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006590:	4689      	mov	r9, r1
 8006592:	f7f9 ff37 	bl	8000404 <__aeabi_i2d>
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800659c:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <__ieee754_pow+0x748>)
 800659e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065a2:	4413      	add	r3, r2
 80065a4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	f7f9 fdde 	bl	800016c <__adddf3>
 80065b0:	4632      	mov	r2, r6
 80065b2:	463b      	mov	r3, r7
 80065b4:	f7f9 fdda 	bl	800016c <__adddf3>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	f7f9 fdd6 	bl	800016c <__adddf3>
 80065c0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80065c4:	4622      	mov	r2, r4
 80065c6:	462b      	mov	r3, r5
 80065c8:	4650      	mov	r0, sl
 80065ca:	468b      	mov	fp, r1
 80065cc:	f7f9 fdcc 	bl	8000168 <__aeabi_dsub>
 80065d0:	4632      	mov	r2, r6
 80065d2:	463b      	mov	r3, r7
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065dc:	f7f9 fdc4 	bl	8000168 <__aeabi_dsub>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	e608      	b.n	80061fc <__ieee754_pow+0x2ec>
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w
 80065f0:	4a454eef 	.word	0x4a454eef
 80065f4:	3fca7e28 	.word	0x3fca7e28
 80065f8:	93c9db65 	.word	0x93c9db65
 80065fc:	3fcd864a 	.word	0x3fcd864a
 8006600:	a91d4101 	.word	0xa91d4101
 8006604:	3fd17460 	.word	0x3fd17460
 8006608:	518f264d 	.word	0x518f264d
 800660c:	3fd55555 	.word	0x3fd55555
 8006610:	db6fabff 	.word	0xdb6fabff
 8006614:	3fdb6db6 	.word	0x3fdb6db6
 8006618:	33333303 	.word	0x33333303
 800661c:	3fe33333 	.word	0x3fe33333
 8006620:	e0000000 	.word	0xe0000000
 8006624:	3feec709 	.word	0x3feec709
 8006628:	dc3a03fd 	.word	0xdc3a03fd
 800662c:	3feec709 	.word	0x3feec709
 8006630:	145b01f5 	.word	0x145b01f5
 8006634:	be3e2fe0 	.word	0xbe3e2fe0
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	43400000 	.word	0x43400000
 8006640:	0003988e 	.word	0x0003988e
 8006644:	000bb679 	.word	0x000bb679
 8006648:	080070b0 	.word	0x080070b0
 800664c:	3ff00000 	.word	0x3ff00000
 8006650:	40080000 	.word	0x40080000
 8006654:	080070d0 	.word	0x080070d0
 8006658:	080070c0 	.word	0x080070c0
 800665c:	2601      	movs	r6, #1
 800665e:	e667      	b.n	8006330 <__ieee754_pow+0x420>
 8006660:	a39d      	add	r3, pc, #628	; (adr r3, 80068d8 <__ieee754_pow+0x9c8>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	f7f9 fd7f 	bl	800016c <__adddf3>
 800666e:	4622      	mov	r2, r4
 8006670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006674:	462b      	mov	r3, r5
 8006676:	4650      	mov	r0, sl
 8006678:	4639      	mov	r1, r7
 800667a:	f7f9 fd75 	bl	8000168 <__aeabi_dsub>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006686:	f7fa f9b7 	bl	80009f8 <__aeabi_dcmpgt>
 800668a:	2800      	cmp	r0, #0
 800668c:	f47f ae01 	bne.w	8006292 <__ieee754_pow+0x382>
 8006690:	4aa5      	ldr	r2, [pc, #660]	; (8006928 <__ieee754_pow+0xa18>)
 8006692:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006696:	4293      	cmp	r3, r2
 8006698:	f340 8103 	ble.w	80068a2 <__ieee754_pow+0x992>
 800669c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80066a0:	2000      	movs	r0, #0
 80066a2:	151b      	asrs	r3, r3, #20
 80066a4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80066a8:	fa4a f303 	asr.w	r3, sl, r3
 80066ac:	4433      	add	r3, r6
 80066ae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80066b2:	4f9e      	ldr	r7, [pc, #632]	; (800692c <__ieee754_pow+0xa1c>)
 80066b4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80066b8:	4117      	asrs	r7, r2
 80066ba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80066be:	ea23 0107 	bic.w	r1, r3, r7
 80066c2:	f1c2 0214 	rsb	r2, r2, #20
 80066c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80066ca:	460b      	mov	r3, r1
 80066cc:	fa4a fa02 	asr.w	sl, sl, r2
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	4602      	mov	r2, r0
 80066d4:	4629      	mov	r1, r5
 80066d6:	4620      	mov	r0, r4
 80066d8:	bfb8      	it	lt
 80066da:	f1ca 0a00 	rsblt	sl, sl, #0
 80066de:	f7f9 fd43 	bl	8000168 <__aeabi_dsub>
 80066e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	2400      	movs	r4, #0
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	f7f9 fd3c 	bl	800016c <__adddf3>
 80066f4:	a37a      	add	r3, pc, #488	; (adr r3, 80068e0 <__ieee754_pow+0x9d0>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	4620      	mov	r0, r4
 80066fc:	460d      	mov	r5, r1
 80066fe:	f7f9 feeb 	bl	80004d8 <__aeabi_dmul>
 8006702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006706:	4606      	mov	r6, r0
 8006708:	460f      	mov	r7, r1
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7f9 fd2b 	bl	8000168 <__aeabi_dsub>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4640      	mov	r0, r8
 8006718:	4649      	mov	r1, r9
 800671a:	f7f9 fd25 	bl	8000168 <__aeabi_dsub>
 800671e:	a372      	add	r3, pc, #456	; (adr r3, 80068e8 <__ieee754_pow+0x9d8>)
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f7f9 fed8 	bl	80004d8 <__aeabi_dmul>
 8006728:	a371      	add	r3, pc, #452	; (adr r3, 80068f0 <__ieee754_pow+0x9e0>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	4680      	mov	r8, r0
 8006730:	4689      	mov	r9, r1
 8006732:	4620      	mov	r0, r4
 8006734:	4629      	mov	r1, r5
 8006736:	f7f9 fecf 	bl	80004d8 <__aeabi_dmul>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7f9 fd13 	bl	800016c <__adddf3>
 8006746:	4604      	mov	r4, r0
 8006748:	460d      	mov	r5, r1
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4630      	mov	r0, r6
 8006750:	4639      	mov	r1, r7
 8006752:	f7f9 fd0b 	bl	800016c <__adddf3>
 8006756:	4632      	mov	r2, r6
 8006758:	463b      	mov	r3, r7
 800675a:	4680      	mov	r8, r0
 800675c:	4689      	mov	r9, r1
 800675e:	f7f9 fd03 	bl	8000168 <__aeabi_dsub>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	f7f9 fcfd 	bl	8000168 <__aeabi_dsub>
 800676e:	4642      	mov	r2, r8
 8006770:	4606      	mov	r6, r0
 8006772:	460f      	mov	r7, r1
 8006774:	464b      	mov	r3, r9
 8006776:	4640      	mov	r0, r8
 8006778:	4649      	mov	r1, r9
 800677a:	f7f9 fead 	bl	80004d8 <__aeabi_dmul>
 800677e:	a35e      	add	r3, pc, #376	; (adr r3, 80068f8 <__ieee754_pow+0x9e8>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	4604      	mov	r4, r0
 8006786:	460d      	mov	r5, r1
 8006788:	f7f9 fea6 	bl	80004d8 <__aeabi_dmul>
 800678c:	a35c      	add	r3, pc, #368	; (adr r3, 8006900 <__ieee754_pow+0x9f0>)
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f7f9 fce9 	bl	8000168 <__aeabi_dsub>
 8006796:	4622      	mov	r2, r4
 8006798:	462b      	mov	r3, r5
 800679a:	f7f9 fe9d 	bl	80004d8 <__aeabi_dmul>
 800679e:	a35a      	add	r3, pc, #360	; (adr r3, 8006908 <__ieee754_pow+0x9f8>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f7f9 fce2 	bl	800016c <__adddf3>
 80067a8:	4622      	mov	r2, r4
 80067aa:	462b      	mov	r3, r5
 80067ac:	f7f9 fe94 	bl	80004d8 <__aeabi_dmul>
 80067b0:	a357      	add	r3, pc, #348	; (adr r3, 8006910 <__ieee754_pow+0xa00>)
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f7f9 fcd7 	bl	8000168 <__aeabi_dsub>
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	f7f9 fe8b 	bl	80004d8 <__aeabi_dmul>
 80067c2:	a355      	add	r3, pc, #340	; (adr r3, 8006918 <__ieee754_pow+0xa08>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 fcd0 	bl	800016c <__adddf3>
 80067cc:	4622      	mov	r2, r4
 80067ce:	462b      	mov	r3, r5
 80067d0:	f7f9 fe82 	bl	80004d8 <__aeabi_dmul>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7f9 fcc4 	bl	8000168 <__aeabi_dsub>
 80067e0:	4604      	mov	r4, r0
 80067e2:	460d      	mov	r5, r1
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4640      	mov	r0, r8
 80067ea:	4649      	mov	r1, r9
 80067ec:	f7f9 fe74 	bl	80004d8 <__aeabi_dmul>
 80067f0:	2200      	movs	r2, #0
 80067f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067fa:	4620      	mov	r0, r4
 80067fc:	4629      	mov	r1, r5
 80067fe:	f7f9 fcb3 	bl	8000168 <__aeabi_dsub>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800680a:	f7f9 ff8f 	bl	800072c <__aeabi_ddiv>
 800680e:	4632      	mov	r2, r6
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	463b      	mov	r3, r7
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7f9 fe5d 	bl	80004d8 <__aeabi_dmul>
 800681e:	4632      	mov	r2, r6
 8006820:	463b      	mov	r3, r7
 8006822:	f7f9 fca3 	bl	800016c <__adddf3>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4620      	mov	r0, r4
 800682c:	4629      	mov	r1, r5
 800682e:	f7f9 fc9b 	bl	8000168 <__aeabi_dsub>
 8006832:	4642      	mov	r2, r8
 8006834:	464b      	mov	r3, r9
 8006836:	f7f9 fc97 	bl	8000168 <__aeabi_dsub>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	2000      	movs	r0, #0
 8006840:	493b      	ldr	r1, [pc, #236]	; (8006930 <__ieee754_pow+0xa20>)
 8006842:	f7f9 fc91 	bl	8000168 <__aeabi_dsub>
 8006846:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800684a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800684e:	da2b      	bge.n	80068a8 <__ieee754_pow+0x998>
 8006850:	4652      	mov	r2, sl
 8006852:	f000 f9b9 	bl	8006bc8 <scalbn>
 8006856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800685a:	f7ff bbf2 	b.w	8006042 <__ieee754_pow+0x132>
 800685e:	4b35      	ldr	r3, [pc, #212]	; (8006934 <__ieee754_pow+0xa24>)
 8006860:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006864:	429f      	cmp	r7, r3
 8006866:	f77f af13 	ble.w	8006690 <__ieee754_pow+0x780>
 800686a:	4b33      	ldr	r3, [pc, #204]	; (8006938 <__ieee754_pow+0xa28>)
 800686c:	440b      	add	r3, r1
 800686e:	4303      	orrs	r3, r0
 8006870:	d00b      	beq.n	800688a <__ieee754_pow+0x97a>
 8006872:	a32b      	add	r3, pc, #172	; (adr r3, 8006920 <__ieee754_pow+0xa10>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800687c:	f7f9 fe2c 	bl	80004d8 <__aeabi_dmul>
 8006880:	a327      	add	r3, pc, #156	; (adr r3, 8006920 <__ieee754_pow+0xa10>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7ff bbdc 	b.w	8006042 <__ieee754_pow+0x132>
 800688a:	4622      	mov	r2, r4
 800688c:	462b      	mov	r3, r5
 800688e:	f7f9 fc6b 	bl	8000168 <__aeabi_dsub>
 8006892:	4642      	mov	r2, r8
 8006894:	464b      	mov	r3, r9
 8006896:	f7fa f8a5 	bl	80009e4 <__aeabi_dcmpge>
 800689a:	2800      	cmp	r0, #0
 800689c:	f43f aef8 	beq.w	8006690 <__ieee754_pow+0x780>
 80068a0:	e7e7      	b.n	8006872 <__ieee754_pow+0x962>
 80068a2:	f04f 0a00 	mov.w	sl, #0
 80068a6:	e71e      	b.n	80066e6 <__ieee754_pow+0x7d6>
 80068a8:	4621      	mov	r1, r4
 80068aa:	e7d4      	b.n	8006856 <__ieee754_pow+0x946>
 80068ac:	f04f 0b00 	mov.w	fp, #0
 80068b0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006930 <__ieee754_pow+0xa20>
 80068b4:	f7ff bbb0 	b.w	8006018 <__ieee754_pow+0x108>
 80068b8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80068bc:	f7ff bbac 	b.w	8006018 <__ieee754_pow+0x108>
 80068c0:	4638      	mov	r0, r7
 80068c2:	4641      	mov	r1, r8
 80068c4:	f7ff bbbf 	b.w	8006046 <__ieee754_pow+0x136>
 80068c8:	9200      	str	r2, [sp, #0]
 80068ca:	f7ff bb7f 	b.w	8005fcc <__ieee754_pow+0xbc>
 80068ce:	2300      	movs	r3, #0
 80068d0:	f7ff bb69 	b.w	8005fa6 <__ieee754_pow+0x96>
 80068d4:	f3af 8000 	nop.w
 80068d8:	652b82fe 	.word	0x652b82fe
 80068dc:	3c971547 	.word	0x3c971547
 80068e0:	00000000 	.word	0x00000000
 80068e4:	3fe62e43 	.word	0x3fe62e43
 80068e8:	fefa39ef 	.word	0xfefa39ef
 80068ec:	3fe62e42 	.word	0x3fe62e42
 80068f0:	0ca86c39 	.word	0x0ca86c39
 80068f4:	be205c61 	.word	0xbe205c61
 80068f8:	72bea4d0 	.word	0x72bea4d0
 80068fc:	3e663769 	.word	0x3e663769
 8006900:	c5d26bf1 	.word	0xc5d26bf1
 8006904:	3ebbbd41 	.word	0x3ebbbd41
 8006908:	af25de2c 	.word	0xaf25de2c
 800690c:	3f11566a 	.word	0x3f11566a
 8006910:	16bebd93 	.word	0x16bebd93
 8006914:	3f66c16c 	.word	0x3f66c16c
 8006918:	5555553e 	.word	0x5555553e
 800691c:	3fc55555 	.word	0x3fc55555
 8006920:	c2f8f359 	.word	0xc2f8f359
 8006924:	01a56e1f 	.word	0x01a56e1f
 8006928:	3fe00000 	.word	0x3fe00000
 800692c:	000fffff 	.word	0x000fffff
 8006930:	3ff00000 	.word	0x3ff00000
 8006934:	4090cbff 	.word	0x4090cbff
 8006938:	3f6f3400 	.word	0x3f6f3400

0800693c <__ieee754_sqrt>:
 800693c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006a90 <__ieee754_sqrt+0x154>
 8006940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006944:	ea3c 0c01 	bics.w	ip, ip, r1
 8006948:	460b      	mov	r3, r1
 800694a:	4606      	mov	r6, r0
 800694c:	460d      	mov	r5, r1
 800694e:	460a      	mov	r2, r1
 8006950:	4607      	mov	r7, r0
 8006952:	4604      	mov	r4, r0
 8006954:	d10e      	bne.n	8006974 <__ieee754_sqrt+0x38>
 8006956:	4602      	mov	r2, r0
 8006958:	f7f9 fdbe 	bl	80004d8 <__aeabi_dmul>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4630      	mov	r0, r6
 8006962:	4629      	mov	r1, r5
 8006964:	f7f9 fc02 	bl	800016c <__adddf3>
 8006968:	4606      	mov	r6, r0
 800696a:	460d      	mov	r5, r1
 800696c:	4630      	mov	r0, r6
 800696e:	4629      	mov	r1, r5
 8006970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006974:	2900      	cmp	r1, #0
 8006976:	dc0d      	bgt.n	8006994 <__ieee754_sqrt+0x58>
 8006978:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800697c:	ea5c 0707 	orrs.w	r7, ip, r7
 8006980:	d0f4      	beq.n	800696c <__ieee754_sqrt+0x30>
 8006982:	b139      	cbz	r1, 8006994 <__ieee754_sqrt+0x58>
 8006984:	4602      	mov	r2, r0
 8006986:	f7f9 fbef 	bl	8000168 <__aeabi_dsub>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	f7f9 fecd 	bl	800072c <__aeabi_ddiv>
 8006992:	e7e9      	b.n	8006968 <__ieee754_sqrt+0x2c>
 8006994:	1512      	asrs	r2, r2, #20
 8006996:	d074      	beq.n	8006a82 <__ieee754_sqrt+0x146>
 8006998:	2000      	movs	r0, #0
 800699a:	07d5      	lsls	r5, r2, #31
 800699c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069a0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80069a4:	bf5e      	ittt	pl
 80069a6:	0fe3      	lsrpl	r3, r4, #31
 80069a8:	0064      	lslpl	r4, r4, #1
 80069aa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80069ae:	0fe3      	lsrs	r3, r4, #31
 80069b0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80069b4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80069b8:	2516      	movs	r5, #22
 80069ba:	4601      	mov	r1, r0
 80069bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069c0:	1076      	asrs	r6, r6, #1
 80069c2:	0064      	lsls	r4, r4, #1
 80069c4:	188f      	adds	r7, r1, r2
 80069c6:	429f      	cmp	r7, r3
 80069c8:	bfde      	ittt	le
 80069ca:	1bdb      	suble	r3, r3, r7
 80069cc:	18b9      	addle	r1, r7, r2
 80069ce:	1880      	addle	r0, r0, r2
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	3d01      	subs	r5, #1
 80069d4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80069d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80069dc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80069e0:	d1f0      	bne.n	80069c4 <__ieee754_sqrt+0x88>
 80069e2:	462a      	mov	r2, r5
 80069e4:	f04f 0e20 	mov.w	lr, #32
 80069e8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80069ec:	428b      	cmp	r3, r1
 80069ee:	eb07 0c05 	add.w	ip, r7, r5
 80069f2:	dc02      	bgt.n	80069fa <__ieee754_sqrt+0xbe>
 80069f4:	d113      	bne.n	8006a1e <__ieee754_sqrt+0xe2>
 80069f6:	45a4      	cmp	ip, r4
 80069f8:	d811      	bhi.n	8006a1e <__ieee754_sqrt+0xe2>
 80069fa:	f1bc 0f00 	cmp.w	ip, #0
 80069fe:	eb0c 0507 	add.w	r5, ip, r7
 8006a02:	da43      	bge.n	8006a8c <__ieee754_sqrt+0x150>
 8006a04:	2d00      	cmp	r5, #0
 8006a06:	db41      	blt.n	8006a8c <__ieee754_sqrt+0x150>
 8006a08:	f101 0801 	add.w	r8, r1, #1
 8006a0c:	1a5b      	subs	r3, r3, r1
 8006a0e:	4641      	mov	r1, r8
 8006a10:	45a4      	cmp	ip, r4
 8006a12:	bf88      	it	hi
 8006a14:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006a18:	eba4 040c 	sub.w	r4, r4, ip
 8006a1c:	443a      	add	r2, r7
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	f1be 0e01 	subs.w	lr, lr, #1
 8006a24:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006a28:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8006a2c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a30:	d1dc      	bne.n	80069ec <__ieee754_sqrt+0xb0>
 8006a32:	4323      	orrs	r3, r4
 8006a34:	d006      	beq.n	8006a44 <__ieee754_sqrt+0x108>
 8006a36:	1c54      	adds	r4, r2, #1
 8006a38:	bf0b      	itete	eq
 8006a3a:	4672      	moveq	r2, lr
 8006a3c:	3201      	addne	r2, #1
 8006a3e:	3001      	addeq	r0, #1
 8006a40:	f022 0201 	bicne.w	r2, r2, #1
 8006a44:	1043      	asrs	r3, r0, #1
 8006a46:	07c1      	lsls	r1, r0, #31
 8006a48:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006a4c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006a50:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006a54:	bf48      	it	mi
 8006a56:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006a60:	e782      	b.n	8006968 <__ieee754_sqrt+0x2c>
 8006a62:	0ae3      	lsrs	r3, r4, #11
 8006a64:	3915      	subs	r1, #21
 8006a66:	0564      	lsls	r4, r4, #21
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0fa      	beq.n	8006a62 <__ieee754_sqrt+0x126>
 8006a6c:	02de      	lsls	r6, r3, #11
 8006a6e:	d50a      	bpl.n	8006a86 <__ieee754_sqrt+0x14a>
 8006a70:	f1c2 0020 	rsb	r0, r2, #32
 8006a74:	fa24 f000 	lsr.w	r0, r4, r0
 8006a78:	1e55      	subs	r5, r2, #1
 8006a7a:	4094      	lsls	r4, r2
 8006a7c:	4303      	orrs	r3, r0
 8006a7e:	1b4a      	subs	r2, r1, r5
 8006a80:	e78a      	b.n	8006998 <__ieee754_sqrt+0x5c>
 8006a82:	4611      	mov	r1, r2
 8006a84:	e7f0      	b.n	8006a68 <__ieee754_sqrt+0x12c>
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	3201      	adds	r2, #1
 8006a8a:	e7ef      	b.n	8006a6c <__ieee754_sqrt+0x130>
 8006a8c:	4688      	mov	r8, r1
 8006a8e:	e7bd      	b.n	8006a0c <__ieee754_sqrt+0xd0>
 8006a90:	7ff00000 	.word	0x7ff00000

08006a94 <fabs>:
 8006a94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006a98:	4770      	bx	lr

08006a9a <finite>:
 8006a9a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006a9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006aa2:	0fc0      	lsrs	r0, r0, #31
 8006aa4:	4770      	bx	lr
	...

08006aa8 <nan>:
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	4901      	ldr	r1, [pc, #4]	; (8006ab0 <nan+0x8>)
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	7ff80000 	.word	0x7ff80000

08006ab4 <rint>:
 8006ab4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8006ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aba:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8006abe:	2f13      	cmp	r7, #19
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8006acc:	dc59      	bgt.n	8006b82 <rint+0xce>
 8006ace:	2f00      	cmp	r7, #0
 8006ad0:	da2a      	bge.n	8006b28 <rint+0x74>
 8006ad2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ad6:	4301      	orrs	r1, r0
 8006ad8:	d022      	beq.n	8006b20 <rint+0x6c>
 8006ada:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8006ade:	4301      	orrs	r1, r0
 8006ae0:	424d      	negs	r5, r1
 8006ae2:	430d      	orrs	r5, r1
 8006ae4:	4936      	ldr	r1, [pc, #216]	; (8006bc0 <rint+0x10c>)
 8006ae6:	0c5c      	lsrs	r4, r3, #17
 8006ae8:	0b2d      	lsrs	r5, r5, #12
 8006aea:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8006aee:	0464      	lsls	r4, r4, #17
 8006af0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006af4:	ea45 0304 	orr.w	r3, r5, r4
 8006af8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fb34 	bl	800016c <__adddf3>
 8006b04:	e9cd 0100 	strd	r0, r1, [sp]
 8006b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b0c:	462b      	mov	r3, r5
 8006b0e:	4622      	mov	r2, r4
 8006b10:	f7f9 fb2a 	bl	8000168 <__aeabi_dsub>
 8006b14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b18:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4610      	mov	r0, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	b003      	add	sp, #12
 8006b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b28:	4926      	ldr	r1, [pc, #152]	; (8006bc4 <rint+0x110>)
 8006b2a:	4139      	asrs	r1, r7
 8006b2c:	ea03 0001 	and.w	r0, r3, r1
 8006b30:	4310      	orrs	r0, r2
 8006b32:	d0f5      	beq.n	8006b20 <rint+0x6c>
 8006b34:	084b      	lsrs	r3, r1, #1
 8006b36:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8006b3a:	ea52 0501 	orrs.w	r5, r2, r1
 8006b3e:	d00c      	beq.n	8006b5a <rint+0xa6>
 8006b40:	ea24 0303 	bic.w	r3, r4, r3
 8006b44:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8006b48:	2f13      	cmp	r7, #19
 8006b4a:	bf0c      	ite	eq
 8006b4c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8006b50:	2500      	movne	r5, #0
 8006b52:	fa44 f707 	asr.w	r7, r4, r7
 8006b56:	ea43 0407 	orr.w	r4, r3, r7
 8006b5a:	4919      	ldr	r1, [pc, #100]	; (8006bc0 <rint+0x10c>)
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8006b62:	462a      	mov	r2, r5
 8006b64:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006b68:	4620      	mov	r0, r4
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	f7f9 fafe 	bl	800016c <__adddf3>
 8006b70:	e9cd 0100 	strd	r0, r1, [sp]
 8006b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b78:	4622      	mov	r2, r4
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	f7f9 faf4 	bl	8000168 <__aeabi_dsub>
 8006b80:	e7cc      	b.n	8006b1c <rint+0x68>
 8006b82:	2f33      	cmp	r7, #51	; 0x33
 8006b84:	dd05      	ble.n	8006b92 <rint+0xde>
 8006b86:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006b8a:	d1c9      	bne.n	8006b20 <rint+0x6c>
 8006b8c:	f7f9 faee 	bl	800016c <__adddf3>
 8006b90:	e7c4      	b.n	8006b1c <rint+0x68>
 8006b92:	f04f 31ff 	mov.w	r1, #4294967295
 8006b96:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8006b9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8006b9e:	4208      	tst	r0, r1
 8006ba0:	d0be      	beq.n	8006b20 <rint+0x6c>
 8006ba2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8006ba6:	bf18      	it	ne
 8006ba8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8006bac:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8006bb0:	bf1e      	ittt	ne
 8006bb2:	ea20 0303 	bicne.w	r3, r0, r3
 8006bb6:	fa45 fc0c 	asrne.w	ip, r5, ip
 8006bba:	ea43 050c 	orrne.w	r5, r3, ip
 8006bbe:	e7cc      	b.n	8006b5a <rint+0xa6>
 8006bc0:	080070e0 	.word	0x080070e0
 8006bc4:	000fffff 	.word	0x000fffff

08006bc8 <scalbn>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006bce:	4604      	mov	r4, r0
 8006bd0:	460d      	mov	r5, r1
 8006bd2:	4617      	mov	r7, r2
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	b996      	cbnz	r6, 8006bfe <scalbn+0x36>
 8006bd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bdc:	4303      	orrs	r3, r0
 8006bde:	d039      	beq.n	8006c54 <scalbn+0x8c>
 8006be0:	4b35      	ldr	r3, [pc, #212]	; (8006cb8 <scalbn+0xf0>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	f7f9 fc78 	bl	80004d8 <__aeabi_dmul>
 8006be8:	4b34      	ldr	r3, [pc, #208]	; (8006cbc <scalbn+0xf4>)
 8006bea:	4604      	mov	r4, r0
 8006bec:	429f      	cmp	r7, r3
 8006bee:	460d      	mov	r5, r1
 8006bf0:	da0f      	bge.n	8006c12 <scalbn+0x4a>
 8006bf2:	a32d      	add	r3, pc, #180	; (adr r3, 8006ca8 <scalbn+0xe0>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f7f9 fc6e 	bl	80004d8 <__aeabi_dmul>
 8006bfc:	e006      	b.n	8006c0c <scalbn+0x44>
 8006bfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006c02:	4296      	cmp	r6, r2
 8006c04:	d10a      	bne.n	8006c1c <scalbn+0x54>
 8006c06:	4602      	mov	r2, r0
 8006c08:	f7f9 fab0 	bl	800016c <__adddf3>
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	460d      	mov	r5, r1
 8006c10:	e020      	b.n	8006c54 <scalbn+0x8c>
 8006c12:	460b      	mov	r3, r1
 8006c14:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c18:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006c1c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006c20:	19b9      	adds	r1, r7, r6
 8006c22:	4291      	cmp	r1, r2
 8006c24:	dd0e      	ble.n	8006c44 <scalbn+0x7c>
 8006c26:	a322      	add	r3, pc, #136	; (adr r3, 8006cb0 <scalbn+0xe8>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006c30:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006c34:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006c38:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006c3c:	4820      	ldr	r0, [pc, #128]	; (8006cc0 <scalbn+0xf8>)
 8006c3e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006c42:	e7d9      	b.n	8006bf8 <scalbn+0x30>
 8006c44:	2900      	cmp	r1, #0
 8006c46:	dd08      	ble.n	8006c5a <scalbn+0x92>
 8006c48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c54:	4620      	mov	r0, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006c5e:	da16      	bge.n	8006c8e <scalbn+0xc6>
 8006c60:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c64:	429f      	cmp	r7, r3
 8006c66:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006c6a:	dd08      	ble.n	8006c7e <scalbn+0xb6>
 8006c6c:	4c15      	ldr	r4, [pc, #84]	; (8006cc4 <scalbn+0xfc>)
 8006c6e:	4814      	ldr	r0, [pc, #80]	; (8006cc0 <scalbn+0xf8>)
 8006c70:	f363 74df 	bfi	r4, r3, #31, #1
 8006c74:	a30e      	add	r3, pc, #56	; (adr r3, 8006cb0 <scalbn+0xe8>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	e7bc      	b.n	8006bf8 <scalbn+0x30>
 8006c7e:	4c12      	ldr	r4, [pc, #72]	; (8006cc8 <scalbn+0x100>)
 8006c80:	4812      	ldr	r0, [pc, #72]	; (8006ccc <scalbn+0x104>)
 8006c82:	f363 74df 	bfi	r4, r3, #31, #1
 8006c86:	a308      	add	r3, pc, #32	; (adr r3, 8006ca8 <scalbn+0xe0>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	e7f5      	b.n	8006c7a <scalbn+0xb2>
 8006c8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c92:	3136      	adds	r1, #54	; 0x36
 8006c94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <scalbn+0x108>)
 8006ca4:	e7a8      	b.n	8006bf8 <scalbn+0x30>
 8006ca6:	bf00      	nop
 8006ca8:	c2f8f359 	.word	0xc2f8f359
 8006cac:	01a56e1f 	.word	0x01a56e1f
 8006cb0:	8800759c 	.word	0x8800759c
 8006cb4:	7e37e43c 	.word	0x7e37e43c
 8006cb8:	43500000 	.word	0x43500000
 8006cbc:	ffff3cb0 	.word	0xffff3cb0
 8006cc0:	8800759c 	.word	0x8800759c
 8006cc4:	7e37e43c 	.word	0x7e37e43c
 8006cc8:	01a56e1f 	.word	0x01a56e1f
 8006ccc:	c2f8f359 	.word	0xc2f8f359
 8006cd0:	3c900000 	.word	0x3c900000

08006cd4 <_init>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr

08006ce0 <_fini>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr
